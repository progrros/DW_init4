
build/debug/DW_init4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ec4  080001c0  080001c0  000101c0  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08006084  08006084  00016084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800633c  0800633c  000200f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800633c  0800633c  000200f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800633c  0800633c  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800633c  0800633c  0001633c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006340  08006340  00016340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f0  20000000  08006344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200f0  2**0
                  CONTENTS
 10 .bss          00000328  200000f0  200000f0  000200f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000418  20000418  000200f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 13 .comment      00000033  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 14 .debug_info   000327ea  00000000  00000000  00020153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007a12  00000000  00000000  0005293d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a40  00000000  00000000  0005a350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d2c5  00000000  00000000  0005bd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007be7  00000000  00000000  00079055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    00019ef0  00000000  00000000  00080c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00001940  00000000  00000000  0009ab30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004414  00000000  00000000  0009c470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  000a0884  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  000a08a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <deregister_tm_clones>:
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <deregister_tm_clones+0x10>)
 80001c2:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <deregister_tm_clones+0x14>)
 80001c4:	4283      	cmp	r3, r0
 80001c6:	d002      	beq.n	80001ce <deregister_tm_clones+0xe>
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <deregister_tm_clones+0x18>)
 80001ca:	b103      	cbz	r3, 80001ce <deregister_tm_clones+0xe>
 80001cc:	4718      	bx	r3
 80001ce:	4770      	bx	lr
 80001d0:	200000f0 	.word	0x200000f0
 80001d4:	200000f0 	.word	0x200000f0
 80001d8:	00000000 	.word	0x00000000

080001dc <register_tm_clones>:
 80001dc:	4805      	ldr	r0, [pc, #20]	; (80001f4 <register_tm_clones+0x18>)
 80001de:	4906      	ldr	r1, [pc, #24]	; (80001f8 <register_tm_clones+0x1c>)
 80001e0:	1a0b      	subs	r3, r1, r0
 80001e2:	0fd9      	lsrs	r1, r3, #31
 80001e4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001e8:	1049      	asrs	r1, r1, #1
 80001ea:	d002      	beq.n	80001f2 <register_tm_clones+0x16>
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <register_tm_clones+0x20>)
 80001ee:	b103      	cbz	r3, 80001f2 <register_tm_clones+0x16>
 80001f0:	4718      	bx	r3
 80001f2:	4770      	bx	lr
 80001f4:	200000f0 	.word	0x200000f0
 80001f8:	200000f0 	.word	0x200000f0
 80001fc:	00000000 	.word	0x00000000

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c06      	ldr	r4, [pc, #24]	; (800021c <__do_global_dtors_aux+0x1c>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b943      	cbnz	r3, 800021a <__do_global_dtors_aux+0x1a>
 8000208:	f7ff ffda 	bl	80001c0 <deregister_tm_clones>
 800020c:	4b04      	ldr	r3, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	b113      	cbz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000210:	4804      	ldr	r0, [pc, #16]	; (8000224 <__do_global_dtors_aux+0x24>)
 8000212:	f3af 8000 	nop.w
 8000216:	2301      	movs	r3, #1
 8000218:	7023      	strb	r3, [r4, #0]
 800021a:	bd10      	pop	{r4, pc}
 800021c:	200000f0 	.word	0x200000f0
 8000220:	00000000 	.word	0x00000000
 8000224:	0800606c 	.word	0x0800606c

08000228 <frame_dummy>:
 8000228:	b508      	push	{r3, lr}
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <frame_dummy+0x14>)
 800022c:	b11b      	cbz	r3, 8000236 <frame_dummy+0xe>
 800022e:	4904      	ldr	r1, [pc, #16]	; (8000240 <frame_dummy+0x18>)
 8000230:	4804      	ldr	r0, [pc, #16]	; (8000244 <frame_dummy+0x1c>)
 8000232:	f3af 8000 	nop.w
 8000236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800023a:	e7cf      	b.n	80001dc <register_tm_clones>
 800023c:	00000000 	.word	0x00000000
 8000240:	200000f4 	.word	0x200000f4
 8000244:	0800606c 	.word	0x0800606c

08000248 <__assert_func>:
 8000248:	b500      	push	{lr}
 800024a:	4c0b      	ldr	r4, [pc, #44]	; (8000278 <__assert_func+0x30>)
 800024c:	6825      	ldr	r5, [r4, #0]
 800024e:	4614      	mov	r4, r2
 8000250:	68ee      	ldr	r6, [r5, #12]
 8000252:	461a      	mov	r2, r3
 8000254:	b085      	sub	sp, #20
 8000256:	4603      	mov	r3, r0
 8000258:	460d      	mov	r5, r1
 800025a:	b14c      	cbz	r4, 8000270 <__assert_func+0x28>
 800025c:	4907      	ldr	r1, [pc, #28]	; (800027c <__assert_func+0x34>)
 800025e:	9500      	str	r5, [sp, #0]
 8000260:	e9cd 1401 	strd	r1, r4, [sp, #4]
 8000264:	4630      	mov	r0, r6
 8000266:	4906      	ldr	r1, [pc, #24]	; (8000280 <__assert_func+0x38>)
 8000268:	f000 f828 	bl	80002bc <fiprintf>
 800026c:	f000 fe54 	bl	8000f18 <abort>
 8000270:	4904      	ldr	r1, [pc, #16]	; (8000284 <__assert_func+0x3c>)
 8000272:	460c      	mov	r4, r1
 8000274:	e7f3      	b.n	800025e <__assert_func+0x16>
 8000276:	bf00      	nop
 8000278:	20000000 	.word	0x20000000
 800027c:	08006274 	.word	0x08006274
 8000280:	08006284 	.word	0x08006284
 8000284:	08006208 	.word	0x08006208

08000288 <__assert>:
 8000288:	b508      	push	{r3, lr}
 800028a:	4613      	mov	r3, r2
 800028c:	2200      	movs	r2, #0
 800028e:	f7ff ffdb 	bl	8000248 <__assert_func>
 8000292:	bf00      	nop

08000294 <__errno>:
 8000294:	4b01      	ldr	r3, [pc, #4]	; (800029c <__errno+0x8>)
 8000296:	6818      	ldr	r0, [r3, #0]
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000000 	.word	0x20000000

080002a0 <_fiprintf_r>:
 80002a0:	b40c      	push	{r2, r3}
 80002a2:	b500      	push	{lr}
 80002a4:	b083      	sub	sp, #12
 80002a6:	ab04      	add	r3, sp, #16
 80002a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80002ac:	9301      	str	r3, [sp, #4]
 80002ae:	f000 f905 	bl	80004bc <_vfiprintf_r>
 80002b2:	b003      	add	sp, #12
 80002b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80002b8:	b002      	add	sp, #8
 80002ba:	4770      	bx	lr

080002bc <fiprintf>:
 80002bc:	b40e      	push	{r1, r2, r3}
 80002be:	b510      	push	{r4, lr}
 80002c0:	b083      	sub	sp, #12
 80002c2:	ab05      	add	r3, sp, #20
 80002c4:	4c06      	ldr	r4, [pc, #24]	; (80002e0 <fiprintf+0x24>)
 80002c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80002ca:	9301      	str	r3, [sp, #4]
 80002cc:	4601      	mov	r1, r0
 80002ce:	6820      	ldr	r0, [r4, #0]
 80002d0:	f000 f8f4 	bl	80004bc <_vfiprintf_r>
 80002d4:	b003      	add	sp, #12
 80002d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80002da:	b003      	add	sp, #12
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	20000000 	.word	0x20000000

080002e4 <__libc_init_array>:
 80002e4:	b570      	push	{r4, r5, r6, lr}
 80002e6:	4e0d      	ldr	r6, [pc, #52]	; (800031c <__libc_init_array+0x38>)
 80002e8:	4d0d      	ldr	r5, [pc, #52]	; (8000320 <__libc_init_array+0x3c>)
 80002ea:	1b76      	subs	r6, r6, r5
 80002ec:	10b6      	asrs	r6, r6, #2
 80002ee:	d006      	beq.n	80002fe <__libc_init_array+0x1a>
 80002f0:	2400      	movs	r4, #0
 80002f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80002f6:	3401      	adds	r4, #1
 80002f8:	4798      	blx	r3
 80002fa:	42a6      	cmp	r6, r4
 80002fc:	d1f9      	bne.n	80002f2 <__libc_init_array+0xe>
 80002fe:	4e09      	ldr	r6, [pc, #36]	; (8000324 <__libc_init_array+0x40>)
 8000300:	4d09      	ldr	r5, [pc, #36]	; (8000328 <__libc_init_array+0x44>)
 8000302:	1b76      	subs	r6, r6, r5
 8000304:	f005 feb2 	bl	800606c <_init>
 8000308:	10b6      	asrs	r6, r6, #2
 800030a:	d006      	beq.n	800031a <__libc_init_array+0x36>
 800030c:	2400      	movs	r4, #0
 800030e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000312:	3401      	adds	r4, #1
 8000314:	4798      	blx	r3
 8000316:	42a6      	cmp	r6, r4
 8000318:	d1f9      	bne.n	800030e <__libc_init_array+0x2a>
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	0800633c 	.word	0x0800633c
 8000320:	0800633c 	.word	0x0800633c
 8000324:	08006340 	.word	0x08006340
 8000328:	0800633c 	.word	0x0800633c

0800032c <memcmp>:
 800032c:	2a03      	cmp	r2, #3
 800032e:	b570      	push	{r4, r5, r6, lr}
 8000330:	d915      	bls.n	800035e <memcmp+0x32>
 8000332:	ea40 0c01 	orr.w	ip, r0, r1
 8000336:	f01c 0f03 	tst.w	ip, #3
 800033a:	4604      	mov	r4, r0
 800033c:	460b      	mov	r3, r1
 800033e:	d121      	bne.n	8000384 <memcmp+0x58>
 8000340:	4619      	mov	r1, r3
 8000342:	4620      	mov	r0, r4
 8000344:	680e      	ldr	r6, [r1, #0]
 8000346:	6805      	ldr	r5, [r0, #0]
 8000348:	42b5      	cmp	r5, r6
 800034a:	f104 0404 	add.w	r4, r4, #4
 800034e:	f103 0304 	add.w	r3, r3, #4
 8000352:	d117      	bne.n	8000384 <memcmp+0x58>
 8000354:	3a04      	subs	r2, #4
 8000356:	2a03      	cmp	r2, #3
 8000358:	4620      	mov	r0, r4
 800035a:	4619      	mov	r1, r3
 800035c:	d8f0      	bhi.n	8000340 <memcmp+0x14>
 800035e:	1e54      	subs	r4, r2, #1
 8000360:	b1a2      	cbz	r2, 800038c <memcmp+0x60>
 8000362:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000366:	3901      	subs	r1, #1
 8000368:	e001      	b.n	800036e <memcmp+0x42>
 800036a:	18c3      	adds	r3, r0, r3
 800036c:	d00c      	beq.n	8000388 <memcmp+0x5c>
 800036e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8000372:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8000376:	4596      	cmp	lr, r2
 8000378:	eba4 030c 	sub.w	r3, r4, ip
 800037c:	d0f5      	beq.n	800036a <memcmp+0x3e>
 800037e:	ebae 0002 	sub.w	r0, lr, r2
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	1e54      	subs	r4, r2, #1
 8000386:	e7ec      	b.n	8000362 <memcmp+0x36>
 8000388:	4618      	mov	r0, r3
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	4610      	mov	r0, r2
 800038e:	bd70      	pop	{r4, r5, r6, pc}

08000390 <memset>:
 8000390:	0783      	lsls	r3, r0, #30
 8000392:	b530      	push	{r4, r5, lr}
 8000394:	d048      	beq.n	8000428 <memset+0x98>
 8000396:	1e54      	subs	r4, r2, #1
 8000398:	2a00      	cmp	r2, #0
 800039a:	d03f      	beq.n	800041c <memset+0x8c>
 800039c:	b2ca      	uxtb	r2, r1
 800039e:	4603      	mov	r3, r0
 80003a0:	e001      	b.n	80003a6 <memset+0x16>
 80003a2:	3c01      	subs	r4, #1
 80003a4:	d33a      	bcc.n	800041c <memset+0x8c>
 80003a6:	f803 2b01 	strb.w	r2, [r3], #1
 80003aa:	079d      	lsls	r5, r3, #30
 80003ac:	d1f9      	bne.n	80003a2 <memset+0x12>
 80003ae:	2c03      	cmp	r4, #3
 80003b0:	d92d      	bls.n	800040e <memset+0x7e>
 80003b2:	b2cd      	uxtb	r5, r1
 80003b4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80003b8:	2c0f      	cmp	r4, #15
 80003ba:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80003be:	d936      	bls.n	800042e <memset+0x9e>
 80003c0:	f1a4 0210 	sub.w	r2, r4, #16
 80003c4:	f022 0c0f 	bic.w	ip, r2, #15
 80003c8:	f103 0e20 	add.w	lr, r3, #32
 80003cc:	44e6      	add	lr, ip
 80003ce:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 80003d2:	f103 0210 	add.w	r2, r3, #16
 80003d6:	e942 5504 	strd	r5, r5, [r2, #-16]
 80003da:	e942 5502 	strd	r5, r5, [r2, #-8]
 80003de:	3210      	adds	r2, #16
 80003e0:	4572      	cmp	r2, lr
 80003e2:	d1f8      	bne.n	80003d6 <memset+0x46>
 80003e4:	f10c 0201 	add.w	r2, ip, #1
 80003e8:	f014 0f0c 	tst.w	r4, #12
 80003ec:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80003f0:	f004 0c0f 	and.w	ip, r4, #15
 80003f4:	d013      	beq.n	800041e <memset+0x8e>
 80003f6:	f1ac 0304 	sub.w	r3, ip, #4
 80003fa:	f023 0303 	bic.w	r3, r3, #3
 80003fe:	3304      	adds	r3, #4
 8000400:	4413      	add	r3, r2
 8000402:	f842 5b04 	str.w	r5, [r2], #4
 8000406:	4293      	cmp	r3, r2
 8000408:	d1fb      	bne.n	8000402 <memset+0x72>
 800040a:	f00c 0403 	and.w	r4, ip, #3
 800040e:	b12c      	cbz	r4, 800041c <memset+0x8c>
 8000410:	b2ca      	uxtb	r2, r1
 8000412:	441c      	add	r4, r3
 8000414:	f803 2b01 	strb.w	r2, [r3], #1
 8000418:	429c      	cmp	r4, r3
 800041a:	d1fb      	bne.n	8000414 <memset+0x84>
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	4664      	mov	r4, ip
 8000420:	4613      	mov	r3, r2
 8000422:	2c00      	cmp	r4, #0
 8000424:	d1f4      	bne.n	8000410 <memset+0x80>
 8000426:	e7f9      	b.n	800041c <memset+0x8c>
 8000428:	4603      	mov	r3, r0
 800042a:	4614      	mov	r4, r2
 800042c:	e7bf      	b.n	80003ae <memset+0x1e>
 800042e:	461a      	mov	r2, r3
 8000430:	46a4      	mov	ip, r4
 8000432:	e7e0      	b.n	80003f6 <memset+0x66>

08000434 <__sfputc_r>:
 8000434:	6893      	ldr	r3, [r2, #8]
 8000436:	3b01      	subs	r3, #1
 8000438:	2b00      	cmp	r3, #0
 800043a:	6093      	str	r3, [r2, #8]
 800043c:	da11      	bge.n	8000462 <__sfputc_r+0x2e>
 800043e:	b410      	push	{r4}
 8000440:	6994      	ldr	r4, [r2, #24]
 8000442:	42a3      	cmp	r3, r4
 8000444:	db09      	blt.n	800045a <__sfputc_r+0x26>
 8000446:	290a      	cmp	r1, #10
 8000448:	d007      	beq.n	800045a <__sfputc_r+0x26>
 800044a:	6813      	ldr	r3, [r2, #0]
 800044c:	1c58      	adds	r0, r3, #1
 800044e:	6010      	str	r0, [r2, #0]
 8000450:	7019      	strb	r1, [r3, #0]
 8000452:	4608      	mov	r0, r1
 8000454:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800045e:	f000 bc75 	b.w	8000d4c <__swbuf_r>
 8000462:	6813      	ldr	r3, [r2, #0]
 8000464:	1c58      	adds	r0, r3, #1
 8000466:	6010      	str	r0, [r2, #0]
 8000468:	7019      	strb	r1, [r3, #0]
 800046a:	4608      	mov	r0, r1
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop

08000470 <__sfputs_r>:
 8000470:	b19b      	cbz	r3, 800049a <__sfputs_r+0x2a>
 8000472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000474:	4413      	add	r3, r2
 8000476:	4606      	mov	r6, r0
 8000478:	460f      	mov	r7, r1
 800047a:	1e54      	subs	r4, r2, #1
 800047c:	1e5d      	subs	r5, r3, #1
 800047e:	e001      	b.n	8000484 <__sfputs_r+0x14>
 8000480:	42ac      	cmp	r4, r5
 8000482:	d008      	beq.n	8000496 <__sfputs_r+0x26>
 8000484:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000488:	463a      	mov	r2, r7
 800048a:	4630      	mov	r0, r6
 800048c:	f7ff ffd2 	bl	8000434 <__sfputc_r>
 8000490:	1c43      	adds	r3, r0, #1
 8000492:	d1f5      	bne.n	8000480 <__sfputs_r+0x10>
 8000494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000496:	2000      	movs	r0, #0
 8000498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800049a:	2000      	movs	r0, #0
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop

080004a0 <__sprint_r>:
 80004a0:	6893      	ldr	r3, [r2, #8]
 80004a2:	b510      	push	{r4, lr}
 80004a4:	4614      	mov	r4, r2
 80004a6:	b913      	cbnz	r3, 80004ae <__sprint_r+0xe>
 80004a8:	6053      	str	r3, [r2, #4]
 80004aa:	4618      	mov	r0, r3
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	f000 ff4b 	bl	8001348 <__sfvwrite_r>
 80004b2:	2300      	movs	r3, #0
 80004b4:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	bf00      	nop

080004bc <_vfiprintf_r>:
 80004bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004c0:	4688      	mov	r8, r1
 80004c2:	b09f      	sub	sp, #124	; 0x7c
 80004c4:	4615      	mov	r5, r2
 80004c6:	461c      	mov	r4, r3
 80004c8:	4681      	mov	r9, r0
 80004ca:	b118      	cbz	r0, 80004d4 <_vfiprintf_r+0x18>
 80004cc:	6983      	ldr	r3, [r0, #24]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	f000 80a2 	beq.w	8000618 <_vfiprintf_r+0x15c>
 80004d4:	4b92      	ldr	r3, [pc, #584]	; (8000720 <_vfiprintf_r+0x264>)
 80004d6:	4598      	cmp	r8, r3
 80004d8:	f000 80a4 	beq.w	8000624 <_vfiprintf_r+0x168>
 80004dc:	4b91      	ldr	r3, [pc, #580]	; (8000724 <_vfiprintf_r+0x268>)
 80004de:	4598      	cmp	r8, r3
 80004e0:	f000 80b1 	beq.w	8000646 <_vfiprintf_r+0x18a>
 80004e4:	4b90      	ldr	r3, [pc, #576]	; (8000728 <_vfiprintf_r+0x26c>)
 80004e6:	4598      	cmp	r8, r3
 80004e8:	bf08      	it	eq
 80004ea:	f8d9 800c 	ldreq.w	r8, [r9, #12]
 80004ee:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80004f2:	0718      	lsls	r0, r3, #28
 80004f4:	f140 809d 	bpl.w	8000632 <_vfiprintf_r+0x176>
 80004f8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	f000 8098 	beq.w	8000632 <_vfiprintf_r+0x176>
 8000502:	2300      	movs	r3, #0
 8000504:	930b      	str	r3, [sp, #44]	; 0x2c
 8000506:	7829      	ldrb	r1, [r5, #0]
 8000508:	4e88      	ldr	r6, [pc, #544]	; (800072c <_vfiprintf_r+0x270>)
 800050a:	9405      	str	r4, [sp, #20]
 800050c:	2320      	movs	r3, #32
 800050e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8000512:	2330      	movs	r3, #48	; 0x30
 8000514:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 8000518:	2701      	movs	r7, #1
 800051a:	2900      	cmp	r1, #0
 800051c:	d074      	beq.n	8000608 <_vfiprintf_r+0x14c>
 800051e:	462c      	mov	r4, r5
 8000520:	460b      	mov	r3, r1
 8000522:	e004      	b.n	800052e <_vfiprintf_r+0x72>
 8000524:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8000528:	2b00      	cmp	r3, #0
 800052a:	f000 808f 	beq.w	800064c <_vfiprintf_r+0x190>
 800052e:	2b25      	cmp	r3, #37	; 0x25
 8000530:	d1f8      	bne.n	8000524 <_vfiprintf_r+0x68>
 8000532:	ebb4 0b05 	subs.w	fp, r4, r5
 8000536:	f040 808c 	bne.w	8000652 <_vfiprintf_r+0x196>
 800053a:	7823      	ldrb	r3, [r4, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d063      	beq.n	8000608 <_vfiprintf_r+0x14c>
 8000540:	2300      	movs	r3, #0
 8000542:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000546:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800054a:	9306      	str	r3, [sp, #24]
 800054c:	9309      	str	r3, [sp, #36]	; 0x24
 800054e:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8000552:	931c      	str	r3, [sp, #112]	; 0x70
 8000554:	3401      	adds	r4, #1
 8000556:	e004      	b.n	8000562 <_vfiprintf_r+0xa6>
 8000558:	9a06      	ldr	r2, [sp, #24]
 800055a:	fa07 f303 	lsl.w	r3, r7, r3
 800055e:	4313      	orrs	r3, r2
 8000560:	9306      	str	r3, [sp, #24]
 8000562:	4625      	mov	r5, r4
 8000564:	2205      	movs	r2, #5
 8000566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800056a:	4630      	mov	r0, r6
 800056c:	f001 f960 	bl	8001830 <memchr>
 8000570:	1b83      	subs	r3, r0, r6
 8000572:	2800      	cmp	r0, #0
 8000574:	d1f0      	bne.n	8000558 <_vfiprintf_r+0x9c>
 8000576:	9b06      	ldr	r3, [sp, #24]
 8000578:	06d9      	lsls	r1, r3, #27
 800057a:	bf44      	itt	mi
 800057c:	2220      	movmi	r2, #32
 800057e:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 8000582:	7829      	ldrb	r1, [r5, #0]
 8000584:	071a      	lsls	r2, r3, #28
 8000586:	bf44      	itt	mi
 8000588:	222b      	movmi	r2, #43	; 0x2b
 800058a:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 800058e:	292a      	cmp	r1, #42	; 0x2a
 8000590:	d170      	bne.n	8000674 <_vfiprintf_r+0x1b8>
 8000592:	9a05      	ldr	r2, [sp, #20]
 8000594:	6811      	ldr	r1, [r2, #0]
 8000596:	3204      	adds	r2, #4
 8000598:	2900      	cmp	r1, #0
 800059a:	9205      	str	r2, [sp, #20]
 800059c:	f2c0 809b 	blt.w	80006d6 <_vfiprintf_r+0x21a>
 80005a0:	9109      	str	r1, [sp, #36]	; 0x24
 80005a2:	7869      	ldrb	r1, [r5, #1]
 80005a4:	3501      	adds	r5, #1
 80005a6:	292e      	cmp	r1, #46	; 0x2e
 80005a8:	d076      	beq.n	8000698 <_vfiprintf_r+0x1dc>
 80005aa:	4c61      	ldr	r4, [pc, #388]	; (8000730 <_vfiprintf_r+0x274>)
 80005ac:	2203      	movs	r2, #3
 80005ae:	4620      	mov	r0, r4
 80005b0:	f001 f93e 	bl	8001830 <memchr>
 80005b4:	b138      	cbz	r0, 80005c6 <_vfiprintf_r+0x10a>
 80005b6:	9b06      	ldr	r3, [sp, #24]
 80005b8:	1b00      	subs	r0, r0, r4
 80005ba:	2440      	movs	r4, #64	; 0x40
 80005bc:	fa04 f000 	lsl.w	r0, r4, r0
 80005c0:	4303      	orrs	r3, r0
 80005c2:	9306      	str	r3, [sp, #24]
 80005c4:	3501      	adds	r5, #1
 80005c6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80005ca:	485a      	ldr	r0, [pc, #360]	; (8000734 <_vfiprintf_r+0x278>)
 80005cc:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 80005d0:	2206      	movs	r2, #6
 80005d2:	f001 f92d 	bl	8001830 <memchr>
 80005d6:	2800      	cmp	r0, #0
 80005d8:	f000 8083 	beq.w	80006e2 <_vfiprintf_r+0x226>
 80005dc:	4b56      	ldr	r3, [pc, #344]	; (8000738 <_vfiprintf_r+0x27c>)
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d06d      	beq.n	80006be <_vfiprintf_r+0x202>
 80005e2:	aa05      	add	r2, sp, #20
 80005e4:	9200      	str	r2, [sp, #0]
 80005e6:	4b55      	ldr	r3, [pc, #340]	; (800073c <_vfiprintf_r+0x280>)
 80005e8:	4642      	mov	r2, r8
 80005ea:	a906      	add	r1, sp, #24
 80005ec:	4648      	mov	r0, r9
 80005ee:	f3af 8000 	nop.w
 80005f2:	9003      	str	r0, [sp, #12]
 80005f4:	9b03      	ldr	r3, [sp, #12]
 80005f6:	3301      	adds	r3, #1
 80005f8:	d006      	beq.n	8000608 <_vfiprintf_r+0x14c>
 80005fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80005fc:	9a03      	ldr	r2, [sp, #12]
 80005fe:	7829      	ldrb	r1, [r5, #0]
 8000600:	4413      	add	r3, r2
 8000602:	930b      	str	r3, [sp, #44]	; 0x2c
 8000604:	2900      	cmp	r1, #0
 8000606:	d18a      	bne.n	800051e <_vfiprintf_r+0x62>
 8000608:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800060c:	065b      	lsls	r3, r3, #25
 800060e:	d417      	bmi.n	8000640 <_vfiprintf_r+0x184>
 8000610:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000612:	b01f      	add	sp, #124	; 0x7c
 8000614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000618:	f000 fe76 	bl	8001308 <__sinit>
 800061c:	4b40      	ldr	r3, [pc, #256]	; (8000720 <_vfiprintf_r+0x264>)
 800061e:	4598      	cmp	r8, r3
 8000620:	f47f af5c 	bne.w	80004dc <_vfiprintf_r+0x20>
 8000624:	f8d9 8004 	ldr.w	r8, [r9, #4]
 8000628:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800062c:	0718      	lsls	r0, r3, #28
 800062e:	f53f af63 	bmi.w	80004f8 <_vfiprintf_r+0x3c>
 8000632:	4641      	mov	r1, r8
 8000634:	4648      	mov	r0, r9
 8000636:	f000 fbed 	bl	8000e14 <__swsetup_r>
 800063a:	2800      	cmp	r0, #0
 800063c:	f43f af61 	beq.w	8000502 <_vfiprintf_r+0x46>
 8000640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000644:	e7e5      	b.n	8000612 <_vfiprintf_r+0x156>
 8000646:	f8d9 8008 	ldr.w	r8, [r9, #8]
 800064a:	e750      	b.n	80004ee <_vfiprintf_r+0x32>
 800064c:	ebb4 0b05 	subs.w	fp, r4, r5
 8000650:	d0da      	beq.n	8000608 <_vfiprintf_r+0x14c>
 8000652:	46aa      	mov	sl, r5
 8000654:	f1c5 0501 	rsb	r5, r5, #1
 8000658:	e003      	b.n	8000662 <_vfiprintf_r+0x1a6>
 800065a:	4593      	cmp	fp, r2
 800065c:	d936      	bls.n	80006cc <_vfiprintf_r+0x210>
 800065e:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8000662:	4642      	mov	r2, r8
 8000664:	4648      	mov	r0, r9
 8000666:	f7ff fee5 	bl	8000434 <__sfputc_r>
 800066a:	3001      	adds	r0, #1
 800066c:	eb05 020a 	add.w	r2, r5, sl
 8000670:	d1f3      	bne.n	800065a <_vfiprintf_r+0x19e>
 8000672:	e7c9      	b.n	8000608 <_vfiprintf_r+0x14c>
 8000674:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000678:	2a09      	cmp	r2, #9
 800067a:	d894      	bhi.n	80005a6 <_vfiprintf_r+0xea>
 800067c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800067e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8000682:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000686:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800068a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800068e:	2a09      	cmp	r2, #9
 8000690:	d9f5      	bls.n	800067e <_vfiprintf_r+0x1c2>
 8000692:	292e      	cmp	r1, #46	; 0x2e
 8000694:	9309      	str	r3, [sp, #36]	; 0x24
 8000696:	d188      	bne.n	80005aa <_vfiprintf_r+0xee>
 8000698:	7869      	ldrb	r1, [r5, #1]
 800069a:	292a      	cmp	r1, #42	; 0x2a
 800069c:	d12b      	bne.n	80006f6 <_vfiprintf_r+0x23a>
 800069e:	9b05      	ldr	r3, [sp, #20]
 80006a0:	78a9      	ldrb	r1, [r5, #2]
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	9207      	str	r2, [sp, #28]
 80006a6:	3304      	adds	r3, #4
 80006a8:	2a00      	cmp	r2, #0
 80006aa:	f105 0002 	add.w	r0, r5, #2
 80006ae:	9305      	str	r3, [sp, #20]
 80006b0:	bfb8      	it	lt
 80006b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80006b6:	4605      	mov	r5, r0
 80006b8:	bfb8      	it	lt
 80006ba:	9307      	strlt	r3, [sp, #28]
 80006bc:	e775      	b.n	80005aa <_vfiprintf_r+0xee>
 80006be:	9b05      	ldr	r3, [sp, #20]
 80006c0:	3307      	adds	r3, #7
 80006c2:	f023 0307 	bic.w	r3, r3, #7
 80006c6:	3308      	adds	r3, #8
 80006c8:	9305      	str	r3, [sp, #20]
 80006ca:	e796      	b.n	80005fa <_vfiprintf_r+0x13e>
 80006cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80006ce:	7823      	ldrb	r3, [r4, #0]
 80006d0:	445a      	add	r2, fp
 80006d2:	920b      	str	r2, [sp, #44]	; 0x2c
 80006d4:	e732      	b.n	800053c <_vfiprintf_r+0x80>
 80006d6:	4249      	negs	r1, r1
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	9109      	str	r1, [sp, #36]	; 0x24
 80006de:	9306      	str	r3, [sp, #24]
 80006e0:	e75f      	b.n	80005a2 <_vfiprintf_r+0xe6>
 80006e2:	aa05      	add	r2, sp, #20
 80006e4:	9200      	str	r2, [sp, #0]
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <_vfiprintf_r+0x280>)
 80006e8:	4642      	mov	r2, r8
 80006ea:	a906      	add	r1, sp, #24
 80006ec:	4648      	mov	r0, r9
 80006ee:	f000 f8cb 	bl	8000888 <_printf_i>
 80006f2:	9003      	str	r0, [sp, #12]
 80006f4:	e77e      	b.n	80005f4 <_vfiprintf_r+0x138>
 80006f6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80006fa:	2300      	movs	r3, #0
 80006fc:	2a09      	cmp	r2, #9
 80006fe:	9307      	str	r3, [sp, #28]
 8000700:	f105 0501 	add.w	r5, r5, #1
 8000704:	f63f af51 	bhi.w	80005aa <_vfiprintf_r+0xee>
 8000708:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800070c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000710:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000714:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000718:	2a09      	cmp	r2, #9
 800071a:	d9f5      	bls.n	8000708 <_vfiprintf_r+0x24c>
 800071c:	9307      	str	r3, [sp, #28]
 800071e:	e744      	b.n	80005aa <_vfiprintf_r+0xee>
 8000720:	080060c8 	.word	0x080060c8
 8000724:	080060a8 	.word	0x080060a8
 8000728:	08006088 	.word	0x08006088
 800072c:	080062b4 	.word	0x080062b4
 8000730:	080062bc 	.word	0x080062bc
 8000734:	080062c0 	.word	0x080062c0
 8000738:	00000000 	.word	0x00000000
 800073c:	08000471 	.word	0x08000471

08000740 <vfiprintf>:
 8000740:	b410      	push	{r4}
 8000742:	4c05      	ldr	r4, [pc, #20]	; (8000758 <vfiprintf+0x18>)
 8000744:	4684      	mov	ip, r0
 8000746:	4613      	mov	r3, r2
 8000748:	6820      	ldr	r0, [r4, #0]
 800074a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800074e:	460a      	mov	r2, r1
 8000750:	4661      	mov	r1, ip
 8000752:	f7ff beb3 	b.w	80004bc <_vfiprintf_r>
 8000756:	bf00      	nop
 8000758:	20000000 	.word	0x20000000

0800075c <_printf_common>:
 800075c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000760:	4692      	mov	sl, r2
 8000762:	461f      	mov	r7, r3
 8000764:	690a      	ldr	r2, [r1, #16]
 8000766:	688b      	ldr	r3, [r1, #8]
 8000768:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800076c:	429a      	cmp	r2, r3
 800076e:	bfb8      	it	lt
 8000770:	461a      	movlt	r2, r3
 8000772:	f8ca 2000 	str.w	r2, [sl]
 8000776:	f891 3043 	ldrb.w	r3, [r1, #67]	; 0x43
 800077a:	460c      	mov	r4, r1
 800077c:	4606      	mov	r6, r0
 800077e:	b113      	cbz	r3, 8000786 <_printf_common+0x2a>
 8000780:	3201      	adds	r2, #1
 8000782:	f8ca 2000 	str.w	r2, [sl]
 8000786:	6822      	ldr	r2, [r4, #0]
 8000788:	0691      	lsls	r1, r2, #26
 800078a:	d55d      	bpl.n	8000848 <_printf_common+0xec>
 800078c:	f8da 3000 	ldr.w	r3, [sl]
 8000790:	3302      	adds	r3, #2
 8000792:	f8ca 3000 	str.w	r3, [sl]
 8000796:	6822      	ldr	r2, [r4, #0]
 8000798:	f012 0f06 	tst.w	r2, #6
 800079c:	4611      	mov	r1, r2
 800079e:	d11e      	bne.n	80007de <_printf_common+0x82>
 80007a0:	68e1      	ldr	r1, [r4, #12]
 80007a2:	1acb      	subs	r3, r1, r3
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	bfd8      	it	le
 80007a8:	4611      	movle	r1, r2
 80007aa:	dd18      	ble.n	80007de <_printf_common+0x82>
 80007ac:	f104 0b19 	add.w	fp, r4, #25
 80007b0:	f04f 0800 	mov.w	r8, #0
 80007b4:	e005      	b.n	80007c2 <_printf_common+0x66>
 80007b6:	68e5      	ldr	r5, [r4, #12]
 80007b8:	f8da 3000 	ldr.w	r3, [sl]
 80007bc:	1aed      	subs	r5, r5, r3
 80007be:	4545      	cmp	r5, r8
 80007c0:	dd0c      	ble.n	80007dc <_printf_common+0x80>
 80007c2:	2301      	movs	r3, #1
 80007c4:	465a      	mov	r2, fp
 80007c6:	4639      	mov	r1, r7
 80007c8:	4630      	mov	r0, r6
 80007ca:	47c8      	blx	r9
 80007cc:	3001      	adds	r0, #1
 80007ce:	f108 0801 	add.w	r8, r8, #1
 80007d2:	d1f0      	bne.n	80007b6 <_printf_common+0x5a>
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007dc:	6821      	ldr	r1, [r4, #0]
 80007de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80007e2:	3b00      	subs	r3, #0
 80007e4:	bf18      	it	ne
 80007e6:	2301      	movne	r3, #1
 80007e8:	068a      	lsls	r2, r1, #26
 80007ea:	d50a      	bpl.n	8000802 <_printf_common+0xa6>
 80007ec:	18e1      	adds	r1, r4, r3
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	2030      	movs	r0, #48	; 0x30
 80007f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80007f6:	4422      	add	r2, r4
 80007f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80007fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000800:	3302      	adds	r3, #2
 8000802:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000806:	4639      	mov	r1, r7
 8000808:	4630      	mov	r0, r6
 800080a:	47c8      	blx	r9
 800080c:	3001      	adds	r0, #1
 800080e:	d0e1      	beq.n	80007d4 <_printf_common+0x78>
 8000810:	6823      	ldr	r3, [r4, #0]
 8000812:	f003 0306 	and.w	r3, r3, #6
 8000816:	2b04      	cmp	r3, #4
 8000818:	d01d      	beq.n	8000856 <_printf_common+0xfa>
 800081a:	68a3      	ldr	r3, [r4, #8]
 800081c:	6922      	ldr	r2, [r4, #16]
 800081e:	4293      	cmp	r3, r2
 8000820:	dd25      	ble.n	800086e <_printf_common+0x112>
 8000822:	f04f 0800 	mov.w	r8, #0
 8000826:	1a9b      	subs	r3, r3, r2
 8000828:	4498      	add	r8, r3
 800082a:	341a      	adds	r4, #26
 800082c:	2500      	movs	r5, #0
 800082e:	e001      	b.n	8000834 <_printf_common+0xd8>
 8000830:	4545      	cmp	r5, r8
 8000832:	da1c      	bge.n	800086e <_printf_common+0x112>
 8000834:	2301      	movs	r3, #1
 8000836:	4622      	mov	r2, r4
 8000838:	4639      	mov	r1, r7
 800083a:	4630      	mov	r0, r6
 800083c:	47c8      	blx	r9
 800083e:	3001      	adds	r0, #1
 8000840:	f105 0501 	add.w	r5, r5, #1
 8000844:	d1f4      	bne.n	8000830 <_printf_common+0xd4>
 8000846:	e7c5      	b.n	80007d4 <_printf_common+0x78>
 8000848:	f012 0f06 	tst.w	r2, #6
 800084c:	d012      	beq.n	8000874 <_printf_common+0x118>
 800084e:	3b00      	subs	r3, #0
 8000850:	bf18      	it	ne
 8000852:	2301      	movne	r3, #1
 8000854:	e7d5      	b.n	8000802 <_printf_common+0xa6>
 8000856:	f8da 3000 	ldr.w	r3, [sl]
 800085a:	68e1      	ldr	r1, [r4, #12]
 800085c:	6922      	ldr	r2, [r4, #16]
 800085e:	1ac9      	subs	r1, r1, r3
 8000860:	68a3      	ldr	r3, [r4, #8]
 8000862:	4293      	cmp	r3, r2
 8000864:	ea21 78e1 	bic.w	r8, r1, r1, asr #31
 8000868:	dcdd      	bgt.n	8000826 <_printf_common+0xca>
 800086a:	2900      	cmp	r1, #0
 800086c:	dcdd      	bgt.n	800082a <_printf_common+0xce>
 800086e:	2000      	movs	r0, #0
 8000870:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000874:	68e1      	ldr	r1, [r4, #12]
 8000876:	f8da 3000 	ldr.w	r3, [sl]
 800087a:	1acb      	subs	r3, r1, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	bfd8      	it	le
 8000880:	4611      	movle	r1, r2
 8000882:	dc93      	bgt.n	80007ac <_printf_common+0x50>
 8000884:	e7ab      	b.n	80007de <_printf_common+0x82>
 8000886:	bf00      	nop

08000888 <_printf_i>:
 8000888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800088c:	460c      	mov	r4, r1
 800088e:	b084      	sub	sp, #16
 8000890:	4690      	mov	r8, r2
 8000892:	7e22      	ldrb	r2, [r4, #24]
 8000894:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000896:	4607      	mov	r7, r0
 8000898:	4699      	mov	r9, r3
 800089a:	f104 0043 	add.w	r0, r4, #67	; 0x43
 800089e:	2a00      	cmp	r2, #0
 80008a0:	d033      	beq.n	800090a <_printf_i+0x82>
 80008a2:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 80008a6:	b2dd      	uxtb	r5, r3
 80008a8:	2d20      	cmp	r5, #32
 80008aa:	d867      	bhi.n	800097c <_printf_i+0xf4>
 80008ac:	2b20      	cmp	r3, #32
 80008ae:	d865      	bhi.n	800097c <_printf_i+0xf4>
 80008b0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80008b4:	006400de 	.word	0x006400de
 80008b8:	00640064 	.word	0x00640064
 80008bc:	00640064 	.word	0x00640064
 80008c0:	00640064 	.word	0x00640064
 80008c4:	00640064 	.word	0x00640064
 80008c8:	00a30064 	.word	0x00a30064
 80008cc:	0064006e 	.word	0x0064006e
 80008d0:	00640064 	.word	0x00640064
 80008d4:	006e0064 	.word	0x006e0064
 80008d8:	00640064 	.word	0x00640064
 80008dc:	00640064 	.word	0x00640064
 80008e0:	007f0021 	.word	0x007f0021
 80008e4:	006400c0 	.word	0x006400c0
 80008e8:	00ae0064 	.word	0x00ae0064
 80008ec:	007f0064 	.word	0x007f0064
 80008f0:	00640064 	.word	0x00640064
 80008f4:	00e5      	.short	0x00e5
 80008f6:	6823      	ldr	r3, [r4, #0]
 80008f8:	061a      	lsls	r2, r3, #24
 80008fa:	f140 8104 	bpl.w	8000b06 <_printf_i+0x27e>
 80008fe:	680b      	ldr	r3, [r1, #0]
 8000900:	6962      	ldr	r2, [r4, #20]
 8000902:	1d1d      	adds	r5, r3, #4
 8000904:	600d      	str	r5, [r1, #0]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	2300      	movs	r3, #0
 800090c:	4682      	mov	sl, r0
 800090e:	6123      	str	r3, [r4, #16]
 8000910:	f8cd 9000 	str.w	r9, [sp]
 8000914:	4643      	mov	r3, r8
 8000916:	aa03      	add	r2, sp, #12
 8000918:	4621      	mov	r1, r4
 800091a:	4638      	mov	r0, r7
 800091c:	f7ff ff1e 	bl	800075c <_printf_common>
 8000920:	3001      	adds	r0, #1
 8000922:	d020      	beq.n	8000966 <_printf_i+0xde>
 8000924:	6923      	ldr	r3, [r4, #16]
 8000926:	4652      	mov	r2, sl
 8000928:	4641      	mov	r1, r8
 800092a:	4638      	mov	r0, r7
 800092c:	47c8      	blx	r9
 800092e:	3001      	adds	r0, #1
 8000930:	d019      	beq.n	8000966 <_printf_i+0xde>
 8000932:	6823      	ldr	r3, [r4, #0]
 8000934:	68e0      	ldr	r0, [r4, #12]
 8000936:	9e03      	ldr	r6, [sp, #12]
 8000938:	079b      	lsls	r3, r3, #30
 800093a:	d519      	bpl.n	8000970 <_printf_i+0xe8>
 800093c:	1b83      	subs	r3, r0, r6
 800093e:	2b00      	cmp	r3, #0
 8000940:	dd16      	ble.n	8000970 <_printf_i+0xe8>
 8000942:	f104 0a19 	add.w	sl, r4, #25
 8000946:	2500      	movs	r5, #0
 8000948:	e004      	b.n	8000954 <_printf_i+0xcc>
 800094a:	68e0      	ldr	r0, [r4, #12]
 800094c:	9e03      	ldr	r6, [sp, #12]
 800094e:	1b83      	subs	r3, r0, r6
 8000950:	42ab      	cmp	r3, r5
 8000952:	dd0d      	ble.n	8000970 <_printf_i+0xe8>
 8000954:	2301      	movs	r3, #1
 8000956:	4652      	mov	r2, sl
 8000958:	4641      	mov	r1, r8
 800095a:	4638      	mov	r0, r7
 800095c:	47c8      	blx	r9
 800095e:	3001      	adds	r0, #1
 8000960:	f105 0501 	add.w	r5, r5, #1
 8000964:	d1f1      	bne.n	800094a <_printf_i+0xc2>
 8000966:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800096a:	b004      	add	sp, #16
 800096c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000970:	42b0      	cmp	r0, r6
 8000972:	bfb8      	it	lt
 8000974:	4630      	movlt	r0, r6
 8000976:	b004      	add	sp, #16
 8000978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800097c:	2301      	movs	r3, #1
 800097e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8000982:	6123      	str	r3, [r4, #16]
 8000984:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 8000988:	2300      	movs	r3, #0
 800098a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800098e:	e7bf      	b.n	8000910 <_printf_i+0x88>
 8000990:	6823      	ldr	r3, [r4, #0]
 8000992:	061a      	lsls	r2, r3, #24
 8000994:	d402      	bmi.n	800099c <_printf_i+0x114>
 8000996:	065e      	lsls	r6, r3, #25
 8000998:	f100 80c1 	bmi.w	8000b1e <_printf_i+0x296>
 800099c:	680d      	ldr	r5, [r1, #0]
 800099e:	682a      	ldr	r2, [r5, #0]
 80009a0:	3504      	adds	r5, #4
 80009a2:	600d      	str	r5, [r1, #0]
 80009a4:	4615      	mov	r5, r2
 80009a6:	2a00      	cmp	r2, #0
 80009a8:	db6b      	blt.n	8000a82 <_printf_i+0x1fa>
 80009aa:	f8df c184 	ldr.w	ip, [pc, #388]	; 8000b30 <_printf_i+0x2a8>
 80009ae:	260a      	movs	r6, #10
 80009b0:	e010      	b.n	80009d4 <_printf_i+0x14c>
 80009b2:	6823      	ldr	r3, [r4, #0]
 80009b4:	061d      	lsls	r5, r3, #24
 80009b6:	f140 809c 	bpl.w	8000af2 <_printf_i+0x26a>
 80009ba:	680b      	ldr	r3, [r1, #0]
 80009bc:	1d1d      	adds	r5, r3, #4
 80009be:	600d      	str	r5, [r1, #0]
 80009c0:	681d      	ldr	r5, [r3, #0]
 80009c2:	f8df c16c 	ldr.w	ip, [pc, #364]	; 8000b30 <_printf_i+0x2a8>
 80009c6:	2a6f      	cmp	r2, #111	; 0x6f
 80009c8:	bf0c      	ite	eq
 80009ca:	2608      	moveq	r6, #8
 80009cc:	260a      	movne	r6, #10
 80009ce:	2300      	movs	r3, #0
 80009d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80009d4:	6862      	ldr	r2, [r4, #4]
 80009d6:	60a2      	str	r2, [r4, #8]
 80009d8:	2a00      	cmp	r2, #0
 80009da:	db7f      	blt.n	8000adc <_printf_i+0x254>
 80009dc:	6823      	ldr	r3, [r4, #0]
 80009de:	f023 0304 	bic.w	r3, r3, #4
 80009e2:	6023      	str	r3, [r4, #0]
 80009e4:	2d00      	cmp	r5, #0
 80009e6:	d15b      	bne.n	8000aa0 <_printf_i+0x218>
 80009e8:	2a00      	cmp	r2, #0
 80009ea:	d179      	bne.n	8000ae0 <_printf_i+0x258>
 80009ec:	4682      	mov	sl, r0
 80009ee:	2e08      	cmp	r6, #8
 80009f0:	d065      	beq.n	8000abe <_printf_i+0x236>
 80009f2:	eba0 000a 	sub.w	r0, r0, sl
 80009f6:	6120      	str	r0, [r4, #16]
 80009f8:	e78a      	b.n	8000910 <_printf_i+0x88>
 80009fa:	680b      	ldr	r3, [r1, #0]
 80009fc:	2201      	movs	r2, #1
 80009fe:	6818      	ldr	r0, [r3, #0]
 8000a00:	3304      	adds	r3, #4
 8000a02:	600b      	str	r3, [r1, #0]
 8000a04:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 8000a08:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
 8000a0c:	6122      	str	r2, [r4, #16]
 8000a0e:	e7bb      	b.n	8000988 <_printf_i+0x100>
 8000a10:	680b      	ldr	r3, [r1, #0]
 8000a12:	6862      	ldr	r2, [r4, #4]
 8000a14:	1d18      	adds	r0, r3, #4
 8000a16:	6008      	str	r0, [r1, #0]
 8000a18:	f8d3 a000 	ldr.w	sl, [r3]
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4650      	mov	r0, sl
 8000a20:	f000 ff06 	bl	8001830 <memchr>
 8000a24:	2800      	cmp	r0, #0
 8000a26:	f000 8081 	beq.w	8000b2c <_printf_i+0x2a4>
 8000a2a:	eba0 000a 	sub.w	r0, r0, sl
 8000a2e:	6060      	str	r0, [r4, #4]
 8000a30:	6120      	str	r0, [r4, #16]
 8000a32:	e7a9      	b.n	8000988 <_printf_i+0x100>
 8000a34:	6823      	ldr	r3, [r4, #0]
 8000a36:	f043 0320 	orr.w	r3, r3, #32
 8000a3a:	6023      	str	r3, [r4, #0]
 8000a3c:	2278      	movs	r2, #120	; 0x78
 8000a3e:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8000b34 <_printf_i+0x2ac>
 8000a42:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8000a46:	680a      	ldr	r2, [r1, #0]
 8000a48:	1d15      	adds	r5, r2, #4
 8000a4a:	600d      	str	r5, [r1, #0]
 8000a4c:	061d      	lsls	r5, r3, #24
 8000a4e:	d443      	bmi.n	8000ad8 <_printf_i+0x250>
 8000a50:	0659      	lsls	r1, r3, #25
 8000a52:	d541      	bpl.n	8000ad8 <_printf_i+0x250>
 8000a54:	8815      	ldrh	r5, [r2, #0]
 8000a56:	07de      	lsls	r6, r3, #31
 8000a58:	bf44      	itt	mi
 8000a5a:	f043 0320 	orrmi.w	r3, r3, #32
 8000a5e:	6023      	strmi	r3, [r4, #0]
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d144      	bne.n	8000aee <_printf_i+0x266>
 8000a64:	6823      	ldr	r3, [r4, #0]
 8000a66:	f023 0320 	bic.w	r3, r3, #32
 8000a6a:	6023      	str	r3, [r4, #0]
 8000a6c:	2610      	movs	r6, #16
 8000a6e:	e7ae      	b.n	80009ce <_printf_i+0x146>
 8000a70:	2358      	movs	r3, #88	; 0x58
 8000a72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000a76:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8000b30 <_printf_i+0x2a8>
 8000a7a:	6823      	ldr	r3, [r4, #0]
 8000a7c:	e7e3      	b.n	8000a46 <_printf_i+0x1be>
 8000a7e:	6823      	ldr	r3, [r4, #0]
 8000a80:	e7dc      	b.n	8000a3c <_printf_i+0x1b4>
 8000a82:	6862      	ldr	r2, [r4, #4]
 8000a84:	60a2      	str	r2, [r4, #8]
 8000a86:	212d      	movs	r1, #45	; 0x2d
 8000a88:	2a00      	cmp	r2, #0
 8000a8a:	f1c5 0500 	rsb	r5, r5, #0
 8000a8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000a92:	db02      	blt.n	8000a9a <_printf_i+0x212>
 8000a94:	f023 0304 	bic.w	r3, r3, #4
 8000a98:	6023      	str	r3, [r4, #0]
 8000a9a:	f8df c094 	ldr.w	ip, [pc, #148]	; 8000b30 <_printf_i+0x2a8>
 8000a9e:	260a      	movs	r6, #10
 8000aa0:	4682      	mov	sl, r0
 8000aa2:	fbb5 f3f6 	udiv	r3, r5, r6
 8000aa6:	fb06 5113 	mls	r1, r6, r3, r5
 8000aaa:	462a      	mov	r2, r5
 8000aac:	f81c 1001 	ldrb.w	r1, [ip, r1]
 8000ab0:	f80a 1d01 	strb.w	r1, [sl, #-1]!
 8000ab4:	42b2      	cmp	r2, r6
 8000ab6:	461d      	mov	r5, r3
 8000ab8:	d2f3      	bcs.n	8000aa2 <_printf_i+0x21a>
 8000aba:	2e08      	cmp	r6, #8
 8000abc:	d199      	bne.n	80009f2 <_printf_i+0x16a>
 8000abe:	6823      	ldr	r3, [r4, #0]
 8000ac0:	07d9      	lsls	r1, r3, #31
 8000ac2:	d596      	bpl.n	80009f2 <_printf_i+0x16a>
 8000ac4:	6862      	ldr	r2, [r4, #4]
 8000ac6:	6923      	ldr	r3, [r4, #16]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	dc92      	bgt.n	80009f2 <_printf_i+0x16a>
 8000acc:	2330      	movs	r3, #48	; 0x30
 8000ace:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8000ad2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8000ad6:	e78c      	b.n	80009f2 <_printf_i+0x16a>
 8000ad8:	6815      	ldr	r5, [r2, #0]
 8000ada:	e7bc      	b.n	8000a56 <_printf_i+0x1ce>
 8000adc:	2d00      	cmp	r5, #0
 8000ade:	d1df      	bne.n	8000aa0 <_printf_i+0x218>
 8000ae0:	f89c 3000 	ldrb.w	r3, [ip]
 8000ae4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000ae8:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 8000aec:	e77f      	b.n	80009ee <_printf_i+0x166>
 8000aee:	2610      	movs	r6, #16
 8000af0:	e76d      	b.n	80009ce <_printf_i+0x146>
 8000af2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000af6:	680b      	ldr	r3, [r1, #0]
 8000af8:	f103 0504 	add.w	r5, r3, #4
 8000afc:	600d      	str	r5, [r1, #0]
 8000afe:	bf0c      	ite	eq
 8000b00:	681d      	ldreq	r5, [r3, #0]
 8000b02:	881d      	ldrhne	r5, [r3, #0]
 8000b04:	e75d      	b.n	80009c2 <_printf_i+0x13a>
 8000b06:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000b0a:	680b      	ldr	r3, [r1, #0]
 8000b0c:	6962      	ldr	r2, [r4, #20]
 8000b0e:	f103 0504 	add.w	r5, r3, #4
 8000b12:	600d      	str	r5, [r1, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	bf14      	ite	ne
 8000b18:	801a      	strhne	r2, [r3, #0]
 8000b1a:	601a      	streq	r2, [r3, #0]
 8000b1c:	e6f5      	b.n	800090a <_printf_i+0x82>
 8000b1e:	680a      	ldr	r2, [r1, #0]
 8000b20:	f9b2 5000 	ldrsh.w	r5, [r2]
 8000b24:	3204      	adds	r2, #4
 8000b26:	600a      	str	r2, [r1, #0]
 8000b28:	462a      	mov	r2, r5
 8000b2a:	e73c      	b.n	80009a6 <_printf_i+0x11e>
 8000b2c:	6860      	ldr	r0, [r4, #4]
 8000b2e:	e77f      	b.n	8000a30 <_printf_i+0x1a8>
 8000b30:	080062c8 	.word	0x080062c8
 8000b34:	080062dc 	.word	0x080062dc

08000b38 <srand>:
 8000b38:	b538      	push	{r3, r4, r5, lr}
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <srand+0x4c>)
 8000b3c:	681d      	ldr	r5, [r3, #0]
 8000b3e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000b40:	4604      	mov	r4, r0
 8000b42:	b11a      	cbz	r2, 8000b4c <srand+0x14>
 8000b44:	2300      	movs	r3, #0
 8000b46:	e9c2 4304 	strd	r4, r3, [r2, #16]
 8000b4a:	bd38      	pop	{r3, r4, r5, pc}
 8000b4c:	2018      	movs	r0, #24
 8000b4e:	f000 fe5b 	bl	8001808 <malloc>
 8000b52:	4602      	mov	r2, r0
 8000b54:	63a8      	str	r0, [r5, #56]	; 0x38
 8000b56:	b178      	cbz	r0, 8000b78 <srand+0x40>
 8000b58:	2001      	movs	r0, #1
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <srand+0x50>)
 8000b62:	480a      	ldr	r0, [pc, #40]	; (8000b8c <srand+0x54>)
 8000b64:	490a      	ldr	r1, [pc, #40]	; (8000b90 <srand+0x58>)
 8000b66:	6091      	str	r1, [r2, #8]
 8000b68:	e9c2 0300 	strd	r0, r3, [r2]
 8000b6c:	230b      	movs	r3, #11
 8000b6e:	8193      	strh	r3, [r2, #12]
 8000b70:	2300      	movs	r3, #0
 8000b72:	e9c2 4304 	strd	r4, r3, [r2, #16]
 8000b76:	bd38      	pop	{r3, r4, r5, pc}
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <srand+0x5c>)
 8000b7a:	4807      	ldr	r0, [pc, #28]	; (8000b98 <srand+0x60>)
 8000b7c:	2142      	movs	r1, #66	; 0x42
 8000b7e:	f7ff fb63 	bl	8000248 <__assert_func>
 8000b82:	bf00      	nop
 8000b84:	20000000 	.word	0x20000000
 8000b88:	e66d1234 	.word	0xe66d1234
 8000b8c:	abcd330e 	.word	0xabcd330e
 8000b90:	0005deec 	.word	0x0005deec
 8000b94:	080062f0 	.word	0x080062f0
 8000b98:	08006308 	.word	0x08006308

08000b9c <rand>:
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <rand+0x74>)
 8000b9e:	b510      	push	{r4, lr}
 8000ba0:	681c      	ldr	r4, [r3, #0]
 8000ba2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000ba4:	b18a      	cbz	r2, 8000bca <rand+0x2e>
 8000ba6:	6913      	ldr	r3, [r2, #16]
 8000ba8:	491a      	ldr	r1, [pc, #104]	; (8000c14 <rand+0x78>)
 8000baa:	6954      	ldr	r4, [r2, #20]
 8000bac:	481a      	ldr	r0, [pc, #104]	; (8000c18 <rand+0x7c>)
 8000bae:	fb03 f101 	mul.w	r1, r3, r1
 8000bb2:	fb00 1104 	mla	r1, r0, r4, r1
 8000bb6:	fba3 3000 	umull	r3, r0, r3, r0
 8000bba:	3301      	adds	r3, #1
 8000bbc:	eb41 0100 	adc.w	r1, r1, r0
 8000bc0:	e9c2 3104 	strd	r3, r1, [r2, #16]
 8000bc4:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bd10      	pop	{r4, pc}
 8000bca:	2018      	movs	r0, #24
 8000bcc:	f000 fe1c 	bl	8001808 <malloc>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	63a0      	str	r0, [r4, #56]	; 0x38
 8000bd4:	b188      	cbz	r0, 8000bfa <rand+0x5e>
 8000bd6:	4c11      	ldr	r4, [pc, #68]	; (8000c1c <rand+0x80>)
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <rand+0x84>)
 8000bda:	480e      	ldr	r0, [pc, #56]	; (8000c14 <rand+0x78>)
 8000bdc:	4911      	ldr	r1, [pc, #68]	; (8000c24 <rand+0x88>)
 8000bde:	6091      	str	r1, [r2, #8]
 8000be0:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8000c08 <rand+0x6c>
 8000be4:	e9c2 4300 	strd	r4, r3, [r2]
 8000be8:	230b      	movs	r3, #11
 8000bea:	8193      	strh	r3, [r2, #12]
 8000bec:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <rand+0x8c>)
 8000bee:	4601      	mov	r1, r0
 8000bf0:	ed82 7b04 	vstr	d7, [r2, #16]
 8000bf4:	e9c2 3104 	strd	r3, r1, [r2, #16]
 8000bf8:	bd10      	pop	{r4, pc}
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <rand+0x90>)
 8000bfc:	480c      	ldr	r0, [pc, #48]	; (8000c30 <rand+0x94>)
 8000bfe:	214e      	movs	r1, #78	; 0x4e
 8000c00:	f7ff fb22 	bl	8000248 <__assert_func>
 8000c04:	f3af 8000 	nop.w
 8000c08:	00000001 	.word	0x00000001
 8000c0c:	00000000 	.word	0x00000000
 8000c10:	20000000 	.word	0x20000000
 8000c14:	5851f42d 	.word	0x5851f42d
 8000c18:	4c957f2d 	.word	0x4c957f2d
 8000c1c:	abcd330e 	.word	0xabcd330e
 8000c20:	e66d1234 	.word	0xe66d1234
 8000c24:	0005deec 	.word	0x0005deec
 8000c28:	4c957f2e 	.word	0x4c957f2e
 8000c2c:	080062f0 	.word	0x080062f0
 8000c30:	08006308 	.word	0x08006308
	...

08000c40 <strlen>:
 8000c40:	f890 f000 	pld	[r0]
 8000c44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000c48:	f020 0107 	bic.w	r1, r0, #7
 8000c4c:	f06f 0c00 	mvn.w	ip, #0
 8000c50:	f010 0407 	ands.w	r4, r0, #7
 8000c54:	f891 f020 	pld	[r1, #32]
 8000c58:	f040 8049 	bne.w	8000cee <strlen+0xae>
 8000c5c:	f04f 0400 	mov.w	r4, #0
 8000c60:	f06f 0007 	mvn.w	r0, #7
 8000c64:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000c68:	f891 f040 	pld	[r1, #64]	; 0x40
 8000c6c:	f100 0008 	add.w	r0, r0, #8
 8000c70:	fa82 f24c 	uadd8	r2, r2, ip
 8000c74:	faa4 f28c 	sel	r2, r4, ip
 8000c78:	fa83 f34c 	uadd8	r3, r3, ip
 8000c7c:	faa2 f38c 	sel	r3, r2, ip
 8000c80:	bb4b      	cbnz	r3, 8000cd6 <strlen+0x96>
 8000c82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000c86:	fa82 f24c 	uadd8	r2, r2, ip
 8000c8a:	f100 0008 	add.w	r0, r0, #8
 8000c8e:	faa4 f28c 	sel	r2, r4, ip
 8000c92:	fa83 f34c 	uadd8	r3, r3, ip
 8000c96:	faa2 f38c 	sel	r3, r2, ip
 8000c9a:	b9e3      	cbnz	r3, 8000cd6 <strlen+0x96>
 8000c9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8000ca0:	fa82 f24c 	uadd8	r2, r2, ip
 8000ca4:	f100 0008 	add.w	r0, r0, #8
 8000ca8:	faa4 f28c 	sel	r2, r4, ip
 8000cac:	fa83 f34c 	uadd8	r3, r3, ip
 8000cb0:	faa2 f38c 	sel	r3, r2, ip
 8000cb4:	b97b      	cbnz	r3, 8000cd6 <strlen+0x96>
 8000cb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8000cba:	f101 0120 	add.w	r1, r1, #32
 8000cbe:	fa82 f24c 	uadd8	r2, r2, ip
 8000cc2:	f100 0008 	add.w	r0, r0, #8
 8000cc6:	faa4 f28c 	sel	r2, r4, ip
 8000cca:	fa83 f34c 	uadd8	r3, r3, ip
 8000cce:	faa2 f38c 	sel	r3, r2, ip
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d0c6      	beq.n	8000c64 <strlen+0x24>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	bf04      	itt	eq
 8000cda:	3004      	addeq	r0, #4
 8000cdc:	461a      	moveq	r2, r3
 8000cde:	ba12      	rev	r2, r2
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8000ce8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8000cec:	4770      	bx	lr
 8000cee:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000cf2:	f004 0503 	and.w	r5, r4, #3
 8000cf6:	f1c4 0000 	rsb	r0, r4, #0
 8000cfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000cfe:	f014 0f04 	tst.w	r4, #4
 8000d02:	f891 f040 	pld	[r1, #64]	; 0x40
 8000d06:	fa0c f505 	lsl.w	r5, ip, r5
 8000d0a:	ea62 0205 	orn	r2, r2, r5
 8000d0e:	bf1c      	itt	ne
 8000d10:	ea63 0305 	ornne	r3, r3, r5
 8000d14:	4662      	movne	r2, ip
 8000d16:	f04f 0400 	mov.w	r4, #0
 8000d1a:	e7a9      	b.n	8000c70 <strlen+0x30>

08000d1c <time>:
 8000d1c:	b510      	push	{r4, lr}
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <time+0x2c>)
 8000d20:	b084      	sub	sp, #16
 8000d22:	4669      	mov	r1, sp
 8000d24:	4604      	mov	r4, r0
 8000d26:	2200      	movs	r2, #0
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	f000 fcc9 	bl	80016c0 <_gettimeofday_r>
 8000d2e:	2800      	cmp	r0, #0
 8000d30:	bfae      	itee	ge
 8000d32:	e9dd 0100 	ldrdge	r0, r1, [sp]
 8000d36:	f04f 30ff 	movlt.w	r0, #4294967295	; 0xffffffff
 8000d3a:	f04f 31ff 	movlt.w	r1, #4294967295	; 0xffffffff
 8000d3e:	b10c      	cbz	r4, 8000d44 <time+0x28>
 8000d40:	e9c4 0100 	strd	r0, r1, [r4]
 8000d44:	b004      	add	sp, #16
 8000d46:	bd10      	pop	{r4, pc}
 8000d48:	20000000 	.word	0x20000000

08000d4c <__swbuf_r>:
 8000d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d4e:	460d      	mov	r5, r1
 8000d50:	4614      	mov	r4, r2
 8000d52:	4606      	mov	r6, r0
 8000d54:	b108      	cbz	r0, 8000d5a <__swbuf_r+0xe>
 8000d56:	6983      	ldr	r3, [r0, #24]
 8000d58:	b343      	cbz	r3, 8000dac <__swbuf_r+0x60>
 8000d5a:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <__swbuf_r+0xa4>)
 8000d5c:	429c      	cmp	r4, r3
 8000d5e:	d02a      	beq.n	8000db6 <__swbuf_r+0x6a>
 8000d60:	4b24      	ldr	r3, [pc, #144]	; (8000df4 <__swbuf_r+0xa8>)
 8000d62:	429c      	cmp	r4, r3
 8000d64:	d029      	beq.n	8000dba <__swbuf_r+0x6e>
 8000d66:	4b24      	ldr	r3, [pc, #144]	; (8000df8 <__swbuf_r+0xac>)
 8000d68:	429c      	cmp	r4, r3
 8000d6a:	bf08      	it	eq
 8000d6c:	68f4      	ldreq	r4, [r6, #12]
 8000d6e:	89a3      	ldrh	r3, [r4, #12]
 8000d70:	69a2      	ldr	r2, [r4, #24]
 8000d72:	60a2      	str	r2, [r4, #8]
 8000d74:	071a      	lsls	r2, r3, #28
 8000d76:	d522      	bpl.n	8000dbe <__swbuf_r+0x72>
 8000d78:	6923      	ldr	r3, [r4, #16]
 8000d7a:	b303      	cbz	r3, 8000dbe <__swbuf_r+0x72>
 8000d7c:	6822      	ldr	r2, [r4, #0]
 8000d7e:	6961      	ldr	r1, [r4, #20]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	b2ed      	uxtb	r5, r5
 8000d84:	4299      	cmp	r1, r3
 8000d86:	462f      	mov	r7, r5
 8000d88:	dd29      	ble.n	8000dde <__swbuf_r+0x92>
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	68a1      	ldr	r1, [r4, #8]
 8000d8e:	3901      	subs	r1, #1
 8000d90:	60a1      	str	r1, [r4, #8]
 8000d92:	1c51      	adds	r1, r2, #1
 8000d94:	6021      	str	r1, [r4, #0]
 8000d96:	7015      	strb	r5, [r2, #0]
 8000d98:	6962      	ldr	r2, [r4, #20]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d016      	beq.n	8000dcc <__swbuf_r+0x80>
 8000d9e:	89a3      	ldrh	r3, [r4, #12]
 8000da0:	07db      	lsls	r3, r3, #31
 8000da2:	d501      	bpl.n	8000da8 <__swbuf_r+0x5c>
 8000da4:	2d0a      	cmp	r5, #10
 8000da6:	d011      	beq.n	8000dcc <__swbuf_r+0x80>
 8000da8:	4638      	mov	r0, r7
 8000daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dac:	f000 faac 	bl	8001308 <__sinit>
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <__swbuf_r+0xa4>)
 8000db2:	429c      	cmp	r4, r3
 8000db4:	d1d4      	bne.n	8000d60 <__swbuf_r+0x14>
 8000db6:	6874      	ldr	r4, [r6, #4]
 8000db8:	e7d9      	b.n	8000d6e <__swbuf_r+0x22>
 8000dba:	68b4      	ldr	r4, [r6, #8]
 8000dbc:	e7d7      	b.n	8000d6e <__swbuf_r+0x22>
 8000dbe:	4621      	mov	r1, r4
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	f000 f827 	bl	8000e14 <__swsetup_r>
 8000dc6:	b938      	cbnz	r0, 8000dd8 <__swbuf_r+0x8c>
 8000dc8:	6923      	ldr	r3, [r4, #16]
 8000dca:	e7d7      	b.n	8000d7c <__swbuf_r+0x30>
 8000dcc:	4621      	mov	r1, r4
 8000dce:	4630      	mov	r0, r6
 8000dd0:	f000 f934 	bl	800103c <_fflush_r>
 8000dd4:	2800      	cmp	r0, #0
 8000dd6:	d0e7      	beq.n	8000da8 <__swbuf_r+0x5c>
 8000dd8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000ddc:	e7e4      	b.n	8000da8 <__swbuf_r+0x5c>
 8000dde:	4621      	mov	r1, r4
 8000de0:	4630      	mov	r0, r6
 8000de2:	f000 f92b 	bl	800103c <_fflush_r>
 8000de6:	2800      	cmp	r0, #0
 8000de8:	d1f6      	bne.n	8000dd8 <__swbuf_r+0x8c>
 8000dea:	6822      	ldr	r2, [r4, #0]
 8000dec:	2301      	movs	r3, #1
 8000dee:	e7cd      	b.n	8000d8c <__swbuf_r+0x40>
 8000df0:	080060c8 	.word	0x080060c8
 8000df4:	080060a8 	.word	0x080060a8
 8000df8:	08006088 	.word	0x08006088

08000dfc <__swbuf>:
 8000dfc:	b410      	push	{r4}
 8000dfe:	4c04      	ldr	r4, [pc, #16]	; (8000e10 <__swbuf+0x14>)
 8000e00:	4603      	mov	r3, r0
 8000e02:	460a      	mov	r2, r1
 8000e04:	6820      	ldr	r0, [r4, #0]
 8000e06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	f7ff bf9e 	b.w	8000d4c <__swbuf_r>
 8000e10:	20000000 	.word	0x20000000

08000e14 <__swsetup_r>:
 8000e14:	4b3c      	ldr	r3, [pc, #240]	; (8000f08 <__swsetup_r+0xf4>)
 8000e16:	b570      	push	{r4, r5, r6, lr}
 8000e18:	681d      	ldr	r5, [r3, #0]
 8000e1a:	4606      	mov	r6, r0
 8000e1c:	460c      	mov	r4, r1
 8000e1e:	b10d      	cbz	r5, 8000e24 <__swsetup_r+0x10>
 8000e20:	69ab      	ldr	r3, [r5, #24]
 8000e22:	b1e3      	cbz	r3, 8000e5e <__swsetup_r+0x4a>
 8000e24:	4b39      	ldr	r3, [pc, #228]	; (8000f0c <__swsetup_r+0xf8>)
 8000e26:	429c      	cmp	r4, r3
 8000e28:	d01f      	beq.n	8000e6a <__swsetup_r+0x56>
 8000e2a:	4b39      	ldr	r3, [pc, #228]	; (8000f10 <__swsetup_r+0xfc>)
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	d04d      	beq.n	8000ecc <__swsetup_r+0xb8>
 8000e30:	4b38      	ldr	r3, [pc, #224]	; (8000f14 <__swsetup_r+0x100>)
 8000e32:	429c      	cmp	r4, r3
 8000e34:	bf08      	it	eq
 8000e36:	68ec      	ldreq	r4, [r5, #12]
 8000e38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e3c:	0718      	lsls	r0, r3, #28
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	d519      	bpl.n	8000e76 <__swsetup_r+0x62>
 8000e42:	6921      	ldr	r1, [r4, #16]
 8000e44:	b311      	cbz	r1, 8000e8c <__swsetup_r+0x78>
 8000e46:	f012 0001 	ands.w	r0, r2, #1
 8000e4a:	d02f      	beq.n	8000eac <__swsetup_r+0x98>
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	60a0      	str	r0, [r4, #8]
 8000e50:	6960      	ldr	r0, [r4, #20]
 8000e52:	4240      	negs	r0, r0
 8000e54:	61a0      	str	r0, [r4, #24]
 8000e56:	2900      	cmp	r1, #0
 8000e58:	d02e      	beq.n	8000eb8 <__swsetup_r+0xa4>
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	bd70      	pop	{r4, r5, r6, pc}
 8000e5e:	4628      	mov	r0, r5
 8000e60:	f000 fa52 	bl	8001308 <__sinit>
 8000e64:	4b29      	ldr	r3, [pc, #164]	; (8000f0c <__swsetup_r+0xf8>)
 8000e66:	429c      	cmp	r4, r3
 8000e68:	d1df      	bne.n	8000e2a <__swsetup_r+0x16>
 8000e6a:	686c      	ldr	r4, [r5, #4]
 8000e6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e70:	0718      	lsls	r0, r3, #28
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	d4e5      	bmi.n	8000e42 <__swsetup_r+0x2e>
 8000e76:	06d1      	lsls	r1, r2, #27
 8000e78:	d53e      	bpl.n	8000ef8 <__swsetup_r+0xe4>
 8000e7a:	0752      	lsls	r2, r2, #29
 8000e7c:	d428      	bmi.n	8000ed0 <__swsetup_r+0xbc>
 8000e7e:	6921      	ldr	r1, [r4, #16]
 8000e80:	f043 0308 	orr.w	r3, r3, #8
 8000e84:	81a3      	strh	r3, [r4, #12]
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	2900      	cmp	r1, #0
 8000e8a:	d1dc      	bne.n	8000e46 <__swsetup_r+0x32>
 8000e8c:	f402 7020 	and.w	r0, r2, #640	; 0x280
 8000e90:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000e94:	d0d7      	beq.n	8000e46 <__swsetup_r+0x32>
 8000e96:	4621      	mov	r1, r4
 8000e98:	4630      	mov	r0, r6
 8000e9a:	f000 fc27 	bl	80016ec <__smakebuf_r>
 8000e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ea2:	6921      	ldr	r1, [r4, #16]
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	f012 0001 	ands.w	r0, r2, #1
 8000eaa:	d1cf      	bne.n	8000e4c <__swsetup_r+0x38>
 8000eac:	0795      	lsls	r5, r2, #30
 8000eae:	bf58      	it	pl
 8000eb0:	6960      	ldrpl	r0, [r4, #20]
 8000eb2:	60a0      	str	r0, [r4, #8]
 8000eb4:	2900      	cmp	r1, #0
 8000eb6:	d1d0      	bne.n	8000e5a <__swsetup_r+0x46>
 8000eb8:	0612      	lsls	r2, r2, #24
 8000eba:	bf58      	it	pl
 8000ebc:	4608      	movpl	r0, r1
 8000ebe:	d5cd      	bpl.n	8000e5c <__swsetup_r+0x48>
 8000ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ec4:	81a3      	strh	r3, [r4, #12]
 8000ec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eca:	bd70      	pop	{r4, r5, r6, pc}
 8000ecc:	68ac      	ldr	r4, [r5, #8]
 8000ece:	e7b3      	b.n	8000e38 <__swsetup_r+0x24>
 8000ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ed2:	b151      	cbz	r1, 8000eea <__swsetup_r+0xd6>
 8000ed4:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8000ed8:	4291      	cmp	r1, r2
 8000eda:	d004      	beq.n	8000ee6 <__swsetup_r+0xd2>
 8000edc:	4630      	mov	r0, r6
 8000ede:	f000 fe0d 	bl	8001afc <_free_r>
 8000ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	6362      	str	r2, [r4, #52]	; 0x34
 8000eea:	6921      	ldr	r1, [r4, #16]
 8000eec:	2200      	movs	r2, #0
 8000eee:	e9c4 1200 	strd	r1, r2, [r4]
 8000ef2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000ef6:	e7c3      	b.n	8000e80 <__swsetup_r+0x6c>
 8000ef8:	2209      	movs	r2, #9
 8000efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000efe:	6032      	str	r2, [r6, #0]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f04:	81a3      	strh	r3, [r4, #12]
 8000f06:	bd70      	pop	{r4, r5, r6, pc}
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	080060c8 	.word	0x080060c8
 8000f10:	080060a8 	.word	0x080060a8
 8000f14:	08006088 	.word	0x08006088

08000f18 <abort>:
 8000f18:	b508      	push	{r3, lr}
 8000f1a:	2006      	movs	r0, #6
 8000f1c:	f000 ff78 	bl	8001e10 <raise>
 8000f20:	2001      	movs	r0, #1
 8000f22:	f004 ff7f 	bl	8005e24 <_exit>
 8000f26:	bf00      	nop

08000f28 <__sflush_r>:
 8000f28:	898b      	ldrh	r3, [r1, #12]
 8000f2a:	071a      	lsls	r2, r3, #28
 8000f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f30:	460c      	mov	r4, r1
 8000f32:	4680      	mov	r8, r0
 8000f34:	d43f      	bmi.n	8000fb6 <__sflush_r+0x8e>
 8000f36:	684a      	ldr	r2, [r1, #4]
 8000f38:	2a00      	cmp	r2, #0
 8000f3a:	dd58      	ble.n	8000fee <__sflush_r+0xc6>
 8000f3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000f3e:	2e00      	cmp	r6, #0
 8000f40:	d052      	beq.n	8000fe8 <__sflush_r+0xc0>
 8000f42:	2200      	movs	r2, #0
 8000f44:	f8d8 5000 	ldr.w	r5, [r8]
 8000f48:	f8c8 2000 	str.w	r2, [r8]
 8000f4c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 8000f50:	d151      	bne.n	8000ff6 <__sflush_r+0xce>
 8000f52:	2301      	movs	r3, #1
 8000f54:	6a21      	ldr	r1, [r4, #32]
 8000f56:	4640      	mov	r0, r8
 8000f58:	47b0      	blx	r6
 8000f5a:	1c43      	adds	r3, r0, #1
 8000f5c:	d05e      	beq.n	800101c <__sflush_r+0xf4>
 8000f5e:	89a3      	ldrh	r3, [r4, #12]
 8000f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000f62:	075f      	lsls	r7, r3, #29
 8000f64:	d505      	bpl.n	8000f72 <__sflush_r+0x4a>
 8000f66:	6863      	ldr	r3, [r4, #4]
 8000f68:	1ac0      	subs	r0, r0, r3
 8000f6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000f6c:	b10b      	cbz	r3, 8000f72 <__sflush_r+0x4a>
 8000f6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f70:	1ac0      	subs	r0, r0, r3
 8000f72:	6a21      	ldr	r1, [r4, #32]
 8000f74:	4602      	mov	r2, r0
 8000f76:	2300      	movs	r3, #0
 8000f78:	4640      	mov	r0, r8
 8000f7a:	47b0      	blx	r6
 8000f7c:	1c41      	adds	r1, r0, #1
 8000f7e:	d13c      	bne.n	8000ffa <__sflush_r+0xd2>
 8000f80:	f8d8 3000 	ldr.w	r3, [r8]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d038      	beq.n	8000ffa <__sflush_r+0xd2>
 8000f88:	2b1d      	cmp	r3, #29
 8000f8a:	d001      	beq.n	8000f90 <__sflush_r+0x68>
 8000f8c:	2b16      	cmp	r3, #22
 8000f8e:	d14d      	bne.n	800102c <__sflush_r+0x104>
 8000f90:	6923      	ldr	r3, [r4, #16]
 8000f92:	2200      	movs	r2, #0
 8000f94:	e9c4 3200 	strd	r3, r2, [r4]
 8000f98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f9a:	f8c8 5000 	str.w	r5, [r8]
 8000f9e:	b319      	cbz	r1, 8000fe8 <__sflush_r+0xc0>
 8000fa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000fa4:	4299      	cmp	r1, r3
 8000fa6:	d002      	beq.n	8000fae <__sflush_r+0x86>
 8000fa8:	4640      	mov	r0, r8
 8000faa:	f000 fda7 	bl	8001afc <_free_r>
 8000fae:	2000      	movs	r0, #0
 8000fb0:	6360      	str	r0, [r4, #52]	; 0x34
 8000fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fb6:	690e      	ldr	r6, [r1, #16]
 8000fb8:	b1b6      	cbz	r6, 8000fe8 <__sflush_r+0xc0>
 8000fba:	680d      	ldr	r5, [r1, #0]
 8000fbc:	600e      	str	r6, [r1, #0]
 8000fbe:	079a      	lsls	r2, r3, #30
 8000fc0:	bf0c      	ite	eq
 8000fc2:	694b      	ldreq	r3, [r1, #20]
 8000fc4:	2300      	movne	r3, #0
 8000fc6:	1bad      	subs	r5, r5, r6
 8000fc8:	608b      	str	r3, [r1, #8]
 8000fca:	e00b      	b.n	8000fe4 <__sflush_r+0xbc>
 8000fcc:	462b      	mov	r3, r5
 8000fce:	4632      	mov	r2, r6
 8000fd0:	6a21      	ldr	r1, [r4, #32]
 8000fd2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	47b8      	blx	r7
 8000fd8:	f1b0 0c00 	subs.w	ip, r0, #0
 8000fdc:	eba5 050c 	sub.w	r5, r5, ip
 8000fe0:	4466      	add	r6, ip
 8000fe2:	dd13      	ble.n	800100c <__sflush_r+0xe4>
 8000fe4:	2d00      	cmp	r5, #0
 8000fe6:	dcf1      	bgt.n	8000fcc <__sflush_r+0xa4>
 8000fe8:	2000      	movs	r0, #0
 8000fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fee:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8000ff0:	2a00      	cmp	r2, #0
 8000ff2:	dca3      	bgt.n	8000f3c <__sflush_r+0x14>
 8000ff4:	e7f8      	b.n	8000fe8 <__sflush_r+0xc0>
 8000ff6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000ff8:	e7b3      	b.n	8000f62 <__sflush_r+0x3a>
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	6063      	str	r3, [r4, #4]
 8000ffe:	6923      	ldr	r3, [r4, #16]
 8001000:	6023      	str	r3, [r4, #0]
 8001002:	89a3      	ldrh	r3, [r4, #12]
 8001004:	04db      	lsls	r3, r3, #19
 8001006:	d5c7      	bpl.n	8000f98 <__sflush_r+0x70>
 8001008:	6560      	str	r0, [r4, #84]	; 0x54
 800100a:	e7c5      	b.n	8000f98 <__sflush_r+0x70>
 800100c:	89a3      	ldrh	r3, [r4, #12]
 800100e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001012:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001016:	81a3      	strh	r3, [r4, #12]
 8001018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800101c:	f8d8 3000 	ldr.w	r3, [r8]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d09c      	beq.n	8000f5e <__sflush_r+0x36>
 8001024:	2b1d      	cmp	r3, #29
 8001026:	d006      	beq.n	8001036 <__sflush_r+0x10e>
 8001028:	2b16      	cmp	r3, #22
 800102a:	d004      	beq.n	8001036 <__sflush_r+0x10e>
 800102c:	89a3      	ldrh	r3, [r4, #12]
 800102e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001032:	81a3      	strh	r3, [r4, #12]
 8001034:	e7d9      	b.n	8000fea <__sflush_r+0xc2>
 8001036:	f8c8 5000 	str.w	r5, [r8]
 800103a:	e7d5      	b.n	8000fe8 <__sflush_r+0xc0>

0800103c <_fflush_r>:
 800103c:	b538      	push	{r3, r4, r5, lr}
 800103e:	690b      	ldr	r3, [r1, #16]
 8001040:	b1bb      	cbz	r3, 8001072 <_fflush_r+0x36>
 8001042:	460d      	mov	r5, r1
 8001044:	4604      	mov	r4, r0
 8001046:	b108      	cbz	r0, 800104c <_fflush_r+0x10>
 8001048:	6983      	ldr	r3, [r0, #24]
 800104a:	b1b3      	cbz	r3, 800107a <_fflush_r+0x3e>
 800104c:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <_fflush_r+0x48>)
 800104e:	429d      	cmp	r5, r3
 8001050:	d011      	beq.n	8001076 <_fflush_r+0x3a>
 8001052:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <_fflush_r+0x4c>)
 8001054:	429d      	cmp	r5, r3
 8001056:	d013      	beq.n	8001080 <_fflush_r+0x44>
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <_fflush_r+0x50>)
 800105a:	429d      	cmp	r5, r3
 800105c:	bf08      	it	eq
 800105e:	68e5      	ldreq	r5, [r4, #12]
 8001060:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8001064:	b12b      	cbz	r3, 8001072 <_fflush_r+0x36>
 8001066:	4629      	mov	r1, r5
 8001068:	4620      	mov	r0, r4
 800106a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800106e:	f7ff bf5b 	b.w	8000f28 <__sflush_r>
 8001072:	2000      	movs	r0, #0
 8001074:	bd38      	pop	{r3, r4, r5, pc}
 8001076:	6865      	ldr	r5, [r4, #4]
 8001078:	e7f2      	b.n	8001060 <_fflush_r+0x24>
 800107a:	f000 f945 	bl	8001308 <__sinit>
 800107e:	e7e5      	b.n	800104c <_fflush_r+0x10>
 8001080:	68a5      	ldr	r5, [r4, #8]
 8001082:	e7ed      	b.n	8001060 <_fflush_r+0x24>
 8001084:	080060c8 	.word	0x080060c8
 8001088:	080060a8 	.word	0x080060a8
 800108c:	08006088 	.word	0x08006088

08001090 <fflush>:
 8001090:	b538      	push	{r3, r4, r5, lr}
 8001092:	b340      	cbz	r0, 80010e6 <fflush+0x56>
 8001094:	6903      	ldr	r3, [r0, #16]
 8001096:	4604      	mov	r4, r0
 8001098:	b1e3      	cbz	r3, 80010d4 <fflush+0x44>
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <fflush+0x68>)
 800109c:	681d      	ldr	r5, [r3, #0]
 800109e:	b10d      	cbz	r5, 80010a4 <fflush+0x14>
 80010a0:	69ab      	ldr	r3, [r5, #24]
 80010a2:	b1cb      	cbz	r3, 80010d8 <fflush+0x48>
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <fflush+0x6c>)
 80010a6:	429c      	cmp	r4, r3
 80010a8:	d00f      	beq.n	80010ca <fflush+0x3a>
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <fflush+0x70>)
 80010ac:	429c      	cmp	r4, r3
 80010ae:	d021      	beq.n	80010f4 <fflush+0x64>
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <fflush+0x74>)
 80010b2:	429c      	cmp	r4, r3
 80010b4:	bf08      	it	eq
 80010b6:	68ec      	ldreq	r4, [r5, #12]
 80010b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010bc:	b153      	cbz	r3, 80010d4 <fflush+0x44>
 80010be:	4621      	mov	r1, r4
 80010c0:	4628      	mov	r0, r5
 80010c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010c6:	f7ff bf2f 	b.w	8000f28 <__sflush_r>
 80010ca:	686c      	ldr	r4, [r5, #4]
 80010cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1f4      	bne.n	80010be <fflush+0x2e>
 80010d4:	2000      	movs	r0, #0
 80010d6:	bd38      	pop	{r3, r4, r5, pc}
 80010d8:	4628      	mov	r0, r5
 80010da:	f000 f915 	bl	8001308 <__sinit>
 80010de:	4b07      	ldr	r3, [pc, #28]	; (80010fc <fflush+0x6c>)
 80010e0:	429c      	cmp	r4, r3
 80010e2:	d1e2      	bne.n	80010aa <fflush+0x1a>
 80010e4:	e7f1      	b.n	80010ca <fflush+0x3a>
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <fflush+0x78>)
 80010e8:	4908      	ldr	r1, [pc, #32]	; (800110c <fflush+0x7c>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010f0:	f000 bac2 	b.w	8001678 <_fwalk_reent>
 80010f4:	68ac      	ldr	r4, [r5, #8]
 80010f6:	e7df      	b.n	80010b8 <fflush+0x28>
 80010f8:	20000000 	.word	0x20000000
 80010fc:	080060c8 	.word	0x080060c8
 8001100:	080060a8 	.word	0x080060a8
 8001104:	08006088 	.word	0x08006088
 8001108:	08006084 	.word	0x08006084
 800110c:	0800103d 	.word	0x0800103d

08001110 <__fp_lock>:
 8001110:	2000      	movs	r0, #0
 8001112:	4770      	bx	lr

08001114 <_cleanup_r>:
 8001114:	4901      	ldr	r1, [pc, #4]	; (800111c <_cleanup_r+0x8>)
 8001116:	f000 baaf 	b.w	8001678 <_fwalk_reent>
 800111a:	bf00      	nop
 800111c:	0800103d 	.word	0x0800103d

08001120 <__fp_unlock>:
 8001120:	2000      	movs	r0, #0
 8001122:	4770      	bx	lr

08001124 <__sfmoreglue>:
 8001124:	b570      	push	{r4, r5, r6, lr}
 8001126:	2268      	movs	r2, #104	; 0x68
 8001128:	1e4d      	subs	r5, r1, #1
 800112a:	fb02 f505 	mul.w	r5, r2, r5
 800112e:	460e      	mov	r6, r1
 8001130:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001134:	f000 fd44 	bl	8001bc0 <_malloc_r>
 8001138:	4604      	mov	r4, r0
 800113a:	b140      	cbz	r0, 800114e <__sfmoreglue+0x2a>
 800113c:	2100      	movs	r1, #0
 800113e:	300c      	adds	r0, #12
 8001140:	e9c4 1600 	strd	r1, r6, [r4]
 8001144:	60a0      	str	r0, [r4, #8]
 8001146:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800114a:	f7ff f921 	bl	8000390 <memset>
 800114e:	4620      	mov	r0, r4
 8001150:	bd70      	pop	{r4, r5, r6, pc}
 8001152:	bf00      	nop

08001154 <__sfp>:
 8001154:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <__sfp+0xa0>)
 8001156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800115a:	681e      	ldr	r6, [r3, #0]
 800115c:	69b3      	ldr	r3, [r6, #24]
 800115e:	4607      	mov	r7, r0
 8001160:	b353      	cbz	r3, 80011b8 <__sfp+0x64>
 8001162:	3648      	adds	r6, #72	; 0x48
 8001164:	f04f 0804 	mov.w	r8, #4
 8001168:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800116c:	3b01      	subs	r3, #1
 800116e:	d504      	bpl.n	800117a <__sfp+0x26>
 8001170:	e01e      	b.n	80011b0 <__sfp+0x5c>
 8001172:	1c5a      	adds	r2, r3, #1
 8001174:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8001178:	d01a      	beq.n	80011b0 <__sfp+0x5c>
 800117a:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800117e:	3b01      	subs	r3, #1
 8001180:	2d00      	cmp	r5, #0
 8001182:	d1f6      	bne.n	8001172 <__sfp+0x1e>
 8001184:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <__sfp+0xa4>)
 8001186:	6665      	str	r5, [r4, #100]	; 0x64
 8001188:	e9c4 5500 	strd	r5, r5, [r4]
 800118c:	e9c4 5302 	strd	r5, r3, [r4, #8]
 8001190:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001194:	61a5      	str	r5, [r4, #24]
 8001196:	2208      	movs	r2, #8
 8001198:	4629      	mov	r1, r5
 800119a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800119e:	f7ff f8f7 	bl	8000390 <memset>
 80011a2:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80011a6:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80011aa:	4620      	mov	r0, r4
 80011ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011b0:	6835      	ldr	r5, [r6, #0]
 80011b2:	b12d      	cbz	r5, 80011c0 <__sfp+0x6c>
 80011b4:	462e      	mov	r6, r5
 80011b6:	e7d7      	b.n	8001168 <__sfp+0x14>
 80011b8:	4630      	mov	r0, r6
 80011ba:	f000 f81f 	bl	80011fc <__sinit.part.0>
 80011be:	e7d0      	b.n	8001162 <__sfp+0xe>
 80011c0:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80011c4:	4638      	mov	r0, r7
 80011c6:	f000 fcfb 	bl	8001bc0 <_malloc_r>
 80011ca:	4604      	mov	r4, r0
 80011cc:	b168      	cbz	r0, 80011ea <__sfp+0x96>
 80011ce:	6005      	str	r5, [r0, #0]
 80011d0:	f8c0 8004 	str.w	r8, [r0, #4]
 80011d4:	300c      	adds	r0, #12
 80011d6:	4629      	mov	r1, r5
 80011d8:	60a0      	str	r0, [r4, #8]
 80011da:	4625      	mov	r5, r4
 80011dc:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80011e0:	f7ff f8d6 	bl	8000390 <memset>
 80011e4:	6034      	str	r4, [r6, #0]
 80011e6:	462e      	mov	r6, r5
 80011e8:	e7be      	b.n	8001168 <__sfp+0x14>
 80011ea:	230c      	movs	r3, #12
 80011ec:	6030      	str	r0, [r6, #0]
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	e7db      	b.n	80011aa <__sfp+0x56>
 80011f2:	bf00      	nop
 80011f4:	08006084 	.word	0x08006084
 80011f8:	ffff0001 	.word	0xffff0001

080011fc <__sinit.part.0>:
 80011fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001200:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <__sinit.part.0+0xd8>)
 8001202:	4935      	ldr	r1, [pc, #212]	; (80012d8 <__sinit.part.0+0xdc>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	6281      	str	r1, [r0, #40]	; 0x28
 8001208:	4290      	cmp	r0, r2
 800120a:	f04f 0300 	mov.w	r3, #0
 800120e:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001212:	6503      	str	r3, [r0, #80]	; 0x50
 8001214:	bf04      	itt	eq
 8001216:	2301      	moveq	r3, #1
 8001218:	6183      	streq	r3, [r0, #24]
 800121a:	4605      	mov	r5, r0
 800121c:	f7ff ff9a 	bl	8001154 <__sfp>
 8001220:	6068      	str	r0, [r5, #4]
 8001222:	4628      	mov	r0, r5
 8001224:	f7ff ff96 	bl	8001154 <__sfp>
 8001228:	60a8      	str	r0, [r5, #8]
 800122a:	4628      	mov	r0, r5
 800122c:	f7ff ff92 	bl	8001154 <__sfp>
 8001230:	686f      	ldr	r7, [r5, #4]
 8001232:	60e8      	str	r0, [r5, #12]
 8001234:	2400      	movs	r4, #0
 8001236:	2304      	movs	r3, #4
 8001238:	e9c7 4302 	strd	r4, r3, [r7, #8]
 800123c:	2208      	movs	r2, #8
 800123e:	4621      	mov	r1, r4
 8001240:	e9c7 4400 	strd	r4, r4, [r7]
 8001244:	e9c7 4404 	strd	r4, r4, [r7, #16]
 8001248:	667c      	str	r4, [r7, #100]	; 0x64
 800124a:	61bc      	str	r4, [r7, #24]
 800124c:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8001250:	f7ff f89e 	bl	8000390 <memset>
 8001254:	f8df b08c 	ldr.w	fp, [pc, #140]	; 80012e4 <__sinit.part.0+0xe8>
 8001258:	68ae      	ldr	r6, [r5, #8]
 800125a:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80012e8 <__sinit.part.0+0xec>
 800125e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80012ec <__sinit.part.0+0xf0>
 8001262:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80012f0 <__sinit.part.0+0xf4>
 8001266:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <__sinit.part.0+0xe0>)
 8001268:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
 800126c:	e9c7 7b08 	strd	r7, fp, [r7, #32]
 8001270:	f8c7 902c 	str.w	r9, [r7, #44]	; 0x2c
 8001274:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
 8001278:	2208      	movs	r2, #8
 800127a:	60f3      	str	r3, [r6, #12]
 800127c:	e9c6 4400 	strd	r4, r4, [r6]
 8001280:	e9c6 4404 	strd	r4, r4, [r6, #16]
 8001284:	6674      	str	r4, [r6, #100]	; 0x64
 8001286:	60b4      	str	r4, [r6, #8]
 8001288:	61b4      	str	r4, [r6, #24]
 800128a:	4621      	mov	r1, r4
 800128c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8001290:	f7ff f87e 	bl	8000390 <memset>
 8001294:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 8001298:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
 800129c:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
 80012a0:	68ee      	ldr	r6, [r5, #12]
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <__sinit.part.0+0xe4>)
 80012a4:	60f3      	str	r3, [r6, #12]
 80012a6:	e9c6 4400 	strd	r4, r4, [r6]
 80012aa:	e9c6 4404 	strd	r4, r4, [r6, #16]
 80012ae:	6674      	str	r4, [r6, #100]	; 0x64
 80012b0:	60b4      	str	r4, [r6, #8]
 80012b2:	61b4      	str	r4, [r6, #24]
 80012b4:	4621      	mov	r1, r4
 80012b6:	2208      	movs	r2, #8
 80012b8:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80012bc:	f7ff f868 	bl	8000390 <memset>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 80012c6:	e9c6 980b 	strd	r9, r8, [r6, #44]	; 0x2c
 80012ca:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
 80012ce:	61ab      	str	r3, [r5, #24]
 80012d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012d4:	08006084 	.word	0x08006084
 80012d8:	08001115 	.word	0x08001115
 80012dc:	00010009 	.word	0x00010009
 80012e0:	00020012 	.word	0x00020012
 80012e4:	08001f81 	.word	0x08001f81
 80012e8:	08001fa9 	.word	0x08001fa9
 80012ec:	08001fe9 	.word	0x08001fe9
 80012f0:	08002009 	.word	0x08002009

080012f4 <_cleanup>:
 80012f4:	4b02      	ldr	r3, [pc, #8]	; (8001300 <_cleanup+0xc>)
 80012f6:	4903      	ldr	r1, [pc, #12]	; (8001304 <_cleanup+0x10>)
 80012f8:	6818      	ldr	r0, [r3, #0]
 80012fa:	f000 b9bd 	b.w	8001678 <_fwalk_reent>
 80012fe:	bf00      	nop
 8001300:	08006084 	.word	0x08006084
 8001304:	0800103d 	.word	0x0800103d

08001308 <__sinit>:
 8001308:	6983      	ldr	r3, [r0, #24]
 800130a:	b903      	cbnz	r3, 800130e <__sinit+0x6>
 800130c:	e776      	b.n	80011fc <__sinit.part.0>
 800130e:	4770      	bx	lr

08001310 <__sfp_lock_acquire>:
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop

08001314 <__sfp_lock_release>:
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop

08001318 <__sinit_lock_acquire>:
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop

0800131c <__sinit_lock_release>:
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop

08001320 <__fp_lock_all>:
 8001320:	4b02      	ldr	r3, [pc, #8]	; (800132c <__fp_lock_all+0xc>)
 8001322:	4903      	ldr	r1, [pc, #12]	; (8001330 <__fp_lock_all+0x10>)
 8001324:	6818      	ldr	r0, [r3, #0]
 8001326:	f000 b987 	b.w	8001638 <_fwalk>
 800132a:	bf00      	nop
 800132c:	20000000 	.word	0x20000000
 8001330:	08001111 	.word	0x08001111

08001334 <__fp_unlock_all>:
 8001334:	4b02      	ldr	r3, [pc, #8]	; (8001340 <__fp_unlock_all+0xc>)
 8001336:	4903      	ldr	r1, [pc, #12]	; (8001344 <__fp_unlock_all+0x10>)
 8001338:	6818      	ldr	r0, [r3, #0]
 800133a:	f000 b97d 	b.w	8001638 <_fwalk>
 800133e:	bf00      	nop
 8001340:	20000000 	.word	0x20000000
 8001344:	08001121 	.word	0x08001121

08001348 <__sfvwrite_r>:
 8001348:	6893      	ldr	r3, [r2, #8]
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 8085 	beq.w	800145a <__sfvwrite_r+0x112>
 8001350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001354:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8001358:	460c      	mov	r4, r1
 800135a:	0719      	lsls	r1, r3, #28
 800135c:	4680      	mov	r8, r0
 800135e:	b083      	sub	sp, #12
 8001360:	4617      	mov	r7, r2
 8001362:	b298      	uxth	r0, r3
 8001364:	d525      	bpl.n	80013b2 <__sfvwrite_r+0x6a>
 8001366:	6923      	ldr	r3, [r4, #16]
 8001368:	b31b      	cbz	r3, 80013b2 <__sfvwrite_r+0x6a>
 800136a:	f010 0302 	ands.w	r3, r0, #2
 800136e:	683d      	ldr	r5, [r7, #0]
 8001370:	d02d      	beq.n	80013ce <__sfvwrite_r+0x86>
 8001372:	f04f 0a00 	mov.w	sl, #0
 8001376:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 8001634 <__sfvwrite_r+0x2ec>
 800137a:	4656      	mov	r6, sl
 800137c:	46b9      	mov	r9, r7
 800137e:	455e      	cmp	r6, fp
 8001380:	4633      	mov	r3, r6
 8001382:	4652      	mov	r2, sl
 8001384:	bf28      	it	cs
 8001386:	465b      	movcs	r3, fp
 8001388:	4640      	mov	r0, r8
 800138a:	2e00      	cmp	r6, #0
 800138c:	d052      	beq.n	8001434 <__sfvwrite_r+0xec>
 800138e:	6a21      	ldr	r1, [r4, #32]
 8001390:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001392:	47b8      	blx	r7
 8001394:	2800      	cmp	r0, #0
 8001396:	dd56      	ble.n	8001446 <__sfvwrite_r+0xfe>
 8001398:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800139c:	1a1b      	subs	r3, r3, r0
 800139e:	4482      	add	sl, r0
 80013a0:	1a36      	subs	r6, r6, r0
 80013a2:	f8c9 3008 	str.w	r3, [r9, #8]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1e9      	bne.n	800137e <__sfvwrite_r+0x36>
 80013aa:	2000      	movs	r0, #0
 80013ac:	b003      	add	sp, #12
 80013ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013b2:	4621      	mov	r1, r4
 80013b4:	4640      	mov	r0, r8
 80013b6:	f7ff fd2d 	bl	8000e14 <__swsetup_r>
 80013ba:	2800      	cmp	r0, #0
 80013bc:	f040 8136 	bne.w	800162c <__sfvwrite_r+0x2e4>
 80013c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013c4:	683d      	ldr	r5, [r7, #0]
 80013c6:	b298      	uxth	r0, r3
 80013c8:	f010 0302 	ands.w	r3, r0, #2
 80013cc:	d1d1      	bne.n	8001372 <__sfvwrite_r+0x2a>
 80013ce:	f010 0901 	ands.w	r9, r0, #1
 80013d2:	d144      	bne.n	800145e <__sfvwrite_r+0x116>
 80013d4:	464e      	mov	r6, r9
 80013d6:	9700      	str	r7, [sp, #0]
 80013d8:	b346      	cbz	r6, 800142c <__sfvwrite_r+0xe4>
 80013da:	0582      	lsls	r2, r0, #22
 80013dc:	f8d4 b008 	ldr.w	fp, [r4, #8]
 80013e0:	f140 8083 	bpl.w	80014ea <__sfvwrite_r+0x1a2>
 80013e4:	45b3      	cmp	fp, r6
 80013e6:	465a      	mov	r2, fp
 80013e8:	f200 80b2 	bhi.w	8001550 <__sfvwrite_r+0x208>
 80013ec:	f410 6f90 	tst.w	r0, #1152	; 0x480
 80013f0:	f040 80bf 	bne.w	8001572 <__sfvwrite_r+0x22a>
 80013f4:	6820      	ldr	r0, [r4, #0]
 80013f6:	9201      	str	r2, [sp, #4]
 80013f8:	4649      	mov	r1, r9
 80013fa:	f000 fb03 	bl	8001a04 <memmove>
 80013fe:	68a3      	ldr	r3, [r4, #8]
 8001400:	9a01      	ldr	r2, [sp, #4]
 8001402:	eba3 010b 	sub.w	r1, r3, fp
 8001406:	6823      	ldr	r3, [r4, #0]
 8001408:	60a1      	str	r1, [r4, #8]
 800140a:	4413      	add	r3, r2
 800140c:	46b2      	mov	sl, r6
 800140e:	6023      	str	r3, [r4, #0]
 8001410:	2600      	movs	r6, #0
 8001412:	9b00      	ldr	r3, [sp, #0]
 8001414:	6898      	ldr	r0, [r3, #8]
 8001416:	eba0 000a 	sub.w	r0, r0, sl
 800141a:	44d1      	add	r9, sl
 800141c:	6098      	str	r0, [r3, #8]
 800141e:	2800      	cmp	r0, #0
 8001420:	d0c3      	beq.n	80013aa <__sfvwrite_r+0x62>
 8001422:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8001426:	b280      	uxth	r0, r0
 8001428:	2e00      	cmp	r6, #0
 800142a:	d1d6      	bne.n	80013da <__sfvwrite_r+0x92>
 800142c:	e9d5 9600 	ldrd	r9, r6, [r5]
 8001430:	3508      	adds	r5, #8
 8001432:	e7d1      	b.n	80013d8 <__sfvwrite_r+0x90>
 8001434:	e9d5 a600 	ldrd	sl, r6, [r5]
 8001438:	3508      	adds	r5, #8
 800143a:	e7a0      	b.n	800137e <__sfvwrite_r+0x36>
 800143c:	4621      	mov	r1, r4
 800143e:	4640      	mov	r0, r8
 8001440:	f7ff fdfc 	bl	800103c <_fflush_r>
 8001444:	b380      	cbz	r0, 80014a8 <__sfvwrite_r+0x160>
 8001446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800144a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800144e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001452:	81a3      	strh	r3, [r4, #12]
 8001454:	b003      	add	sp, #12
 8001456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800145a:	2000      	movs	r0, #0
 800145c:	4770      	bx	lr
 800145e:	461e      	mov	r6, r3
 8001460:	46aa      	mov	sl, r5
 8001462:	4699      	mov	r9, r3
 8001464:	4618      	mov	r0, r3
 8001466:	461d      	mov	r5, r3
 8001468:	9700      	str	r7, [sp, #0]
 800146a:	b356      	cbz	r6, 80014c2 <__sfvwrite_r+0x17a>
 800146c:	b388      	cbz	r0, 80014d2 <__sfvwrite_r+0x18a>
 800146e:	464a      	mov	r2, r9
 8001470:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
 8001474:	6820      	ldr	r0, [r4, #0]
 8001476:	42b2      	cmp	r2, r6
 8001478:	bf28      	it	cs
 800147a:	4632      	movcs	r2, r6
 800147c:	4288      	cmp	r0, r1
 800147e:	d905      	bls.n	800148c <__sfvwrite_r+0x144>
 8001480:	68a1      	ldr	r1, [r4, #8]
 8001482:	eb03 0b01 	add.w	fp, r3, r1
 8001486:	455a      	cmp	r2, fp
 8001488:	f300 80a6 	bgt.w	80015d8 <__sfvwrite_r+0x290>
 800148c:	4293      	cmp	r3, r2
 800148e:	dc63      	bgt.n	8001558 <__sfvwrite_r+0x210>
 8001490:	6a21      	ldr	r1, [r4, #32]
 8001492:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001494:	462a      	mov	r2, r5
 8001496:	4640      	mov	r0, r8
 8001498:	47b8      	blx	r7
 800149a:	f1b0 0b00 	subs.w	fp, r0, #0
 800149e:	ddd2      	ble.n	8001446 <__sfvwrite_r+0xfe>
 80014a0:	ebb9 090b 	subs.w	r9, r9, fp
 80014a4:	d0ca      	beq.n	800143c <__sfvwrite_r+0xf4>
 80014a6:	2001      	movs	r0, #1
 80014a8:	9a00      	ldr	r2, [sp, #0]
 80014aa:	6893      	ldr	r3, [r2, #8]
 80014ac:	eba3 030b 	sub.w	r3, r3, fp
 80014b0:	445d      	add	r5, fp
 80014b2:	eba6 060b 	sub.w	r6, r6, fp
 80014b6:	6093      	str	r3, [r2, #8]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f43f af76 	beq.w	80013aa <__sfvwrite_r+0x62>
 80014be:	2e00      	cmp	r6, #0
 80014c0:	d1d4      	bne.n	800146c <__sfvwrite_r+0x124>
 80014c2:	f10a 0308 	add.w	r3, sl, #8
 80014c6:	e953 5602 	ldrd	r5, r6, [r3, #-8]
 80014ca:	469a      	mov	sl, r3
 80014cc:	3308      	adds	r3, #8
 80014ce:	2e00      	cmp	r6, #0
 80014d0:	d0f9      	beq.n	80014c6 <__sfvwrite_r+0x17e>
 80014d2:	4632      	mov	r2, r6
 80014d4:	210a      	movs	r1, #10
 80014d6:	4628      	mov	r0, r5
 80014d8:	f000 f9aa 	bl	8001830 <memchr>
 80014dc:	2800      	cmp	r0, #0
 80014de:	f000 809c 	beq.w	800161a <__sfvwrite_r+0x2d2>
 80014e2:	3001      	adds	r0, #1
 80014e4:	eba0 0905 	sub.w	r9, r0, r5
 80014e8:	e7c1      	b.n	800146e <__sfvwrite_r+0x126>
 80014ea:	6820      	ldr	r0, [r4, #0]
 80014ec:	6923      	ldr	r3, [r4, #16]
 80014ee:	4298      	cmp	r0, r3
 80014f0:	d816      	bhi.n	8001520 <__sfvwrite_r+0x1d8>
 80014f2:	6963      	ldr	r3, [r4, #20]
 80014f4:	42b3      	cmp	r3, r6
 80014f6:	d813      	bhi.n	8001520 <__sfvwrite_r+0x1d8>
 80014f8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80014fc:	42b2      	cmp	r2, r6
 80014fe:	bf28      	it	cs
 8001500:	4632      	movcs	r2, r6
 8001502:	6a21      	ldr	r1, [r4, #32]
 8001504:	fb92 f2f3 	sdiv	r2, r2, r3
 8001508:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800150a:	fb02 f303 	mul.w	r3, r2, r3
 800150e:	4640      	mov	r0, r8
 8001510:	464a      	mov	r2, r9
 8001512:	47b8      	blx	r7
 8001514:	f1b0 0a00 	subs.w	sl, r0, #0
 8001518:	dd95      	ble.n	8001446 <__sfvwrite_r+0xfe>
 800151a:	eba6 060a 	sub.w	r6, r6, sl
 800151e:	e778      	b.n	8001412 <__sfvwrite_r+0xca>
 8001520:	45b3      	cmp	fp, r6
 8001522:	46da      	mov	sl, fp
 8001524:	bf28      	it	cs
 8001526:	46b2      	movcs	sl, r6
 8001528:	4652      	mov	r2, sl
 800152a:	4649      	mov	r1, r9
 800152c:	f000 fa6a 	bl	8001a04 <memmove>
 8001530:	68a3      	ldr	r3, [r4, #8]
 8001532:	6822      	ldr	r2, [r4, #0]
 8001534:	eba3 030a 	sub.w	r3, r3, sl
 8001538:	4452      	add	r2, sl
 800153a:	60a3      	str	r3, [r4, #8]
 800153c:	6022      	str	r2, [r4, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1eb      	bne.n	800151a <__sfvwrite_r+0x1d2>
 8001542:	4621      	mov	r1, r4
 8001544:	4640      	mov	r0, r8
 8001546:	f7ff fd79 	bl	800103c <_fflush_r>
 800154a:	2800      	cmp	r0, #0
 800154c:	d0e5      	beq.n	800151a <__sfvwrite_r+0x1d2>
 800154e:	e77a      	b.n	8001446 <__sfvwrite_r+0xfe>
 8001550:	6820      	ldr	r0, [r4, #0]
 8001552:	46b3      	mov	fp, r6
 8001554:	4632      	mov	r2, r6
 8001556:	e74e      	b.n	80013f6 <__sfvwrite_r+0xae>
 8001558:	4629      	mov	r1, r5
 800155a:	9201      	str	r2, [sp, #4]
 800155c:	f000 fa52 	bl	8001a04 <memmove>
 8001560:	9a01      	ldr	r2, [sp, #4]
 8001562:	68a3      	ldr	r3, [r4, #8]
 8001564:	1a9b      	subs	r3, r3, r2
 8001566:	60a3      	str	r3, [r4, #8]
 8001568:	6823      	ldr	r3, [r4, #0]
 800156a:	4413      	add	r3, r2
 800156c:	6023      	str	r3, [r4, #0]
 800156e:	4693      	mov	fp, r2
 8001570:	e796      	b.n	80014a0 <__sfvwrite_r+0x158>
 8001572:	6823      	ldr	r3, [r4, #0]
 8001574:	6921      	ldr	r1, [r4, #16]
 8001576:	eba3 0b01 	sub.w	fp, r3, r1
 800157a:	6963      	ldr	r3, [r4, #20]
 800157c:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 8001580:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 8001584:	f10b 0301 	add.w	r3, fp, #1
 8001588:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 800158c:	4433      	add	r3, r6
 800158e:	4553      	cmp	r3, sl
 8001590:	4652      	mov	r2, sl
 8001592:	bf84      	itt	hi
 8001594:	469a      	movhi	sl, r3
 8001596:	4652      	movhi	r2, sl
 8001598:	0543      	lsls	r3, r0, #21
 800159a:	d52c      	bpl.n	80015f6 <__sfvwrite_r+0x2ae>
 800159c:	4611      	mov	r1, r2
 800159e:	4640      	mov	r0, r8
 80015a0:	f000 fb0e 	bl	8001bc0 <_malloc_r>
 80015a4:	2800      	cmp	r0, #0
 80015a6:	d03b      	beq.n	8001620 <__sfvwrite_r+0x2d8>
 80015a8:	465a      	mov	r2, fp
 80015aa:	6921      	ldr	r1, [r4, #16]
 80015ac:	9001      	str	r0, [sp, #4]
 80015ae:	f000 f98f 	bl	80018d0 <memcpy>
 80015b2:	89a2      	ldrh	r2, [r4, #12]
 80015b4:	9b01      	ldr	r3, [sp, #4]
 80015b6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80015ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015be:	81a2      	strh	r2, [r4, #12]
 80015c0:	eb03 000b 	add.w	r0, r3, fp
 80015c4:	6123      	str	r3, [r4, #16]
 80015c6:	ebaa 030b 	sub.w	r3, sl, fp
 80015ca:	f8c4 a014 	str.w	sl, [r4, #20]
 80015ce:	60a3      	str	r3, [r4, #8]
 80015d0:	6020      	str	r0, [r4, #0]
 80015d2:	46b3      	mov	fp, r6
 80015d4:	4632      	mov	r2, r6
 80015d6:	e70e      	b.n	80013f6 <__sfvwrite_r+0xae>
 80015d8:	4629      	mov	r1, r5
 80015da:	465a      	mov	r2, fp
 80015dc:	f000 fa12 	bl	8001a04 <memmove>
 80015e0:	6823      	ldr	r3, [r4, #0]
 80015e2:	445b      	add	r3, fp
 80015e4:	6023      	str	r3, [r4, #0]
 80015e6:	4621      	mov	r1, r4
 80015e8:	4640      	mov	r0, r8
 80015ea:	f7ff fd27 	bl	800103c <_fflush_r>
 80015ee:	2800      	cmp	r0, #0
 80015f0:	f43f af56 	beq.w	80014a0 <__sfvwrite_r+0x158>
 80015f4:	e727      	b.n	8001446 <__sfvwrite_r+0xfe>
 80015f6:	4640      	mov	r0, r8
 80015f8:	f000 fb3c 	bl	8001c74 <_realloc_r>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2800      	cmp	r0, #0
 8001600:	d1de      	bne.n	80015c0 <__sfvwrite_r+0x278>
 8001602:	6921      	ldr	r1, [r4, #16]
 8001604:	4640      	mov	r0, r8
 8001606:	f000 fa79 	bl	8001afc <_free_r>
 800160a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800160e:	220c      	movs	r2, #12
 8001610:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001614:	f8c8 2000 	str.w	r2, [r8]
 8001618:	e717      	b.n	800144a <__sfvwrite_r+0x102>
 800161a:	1c72      	adds	r2, r6, #1
 800161c:	4691      	mov	r9, r2
 800161e:	e727      	b.n	8001470 <__sfvwrite_r+0x128>
 8001620:	220c      	movs	r2, #12
 8001622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001626:	f8c8 2000 	str.w	r2, [r8]
 800162a:	e70e      	b.n	800144a <__sfvwrite_r+0x102>
 800162c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001630:	e6bc      	b.n	80013ac <__sfvwrite_r+0x64>
 8001632:	bf00      	nop
 8001634:	7ffffc00 	.word	0x7ffffc00

08001638 <_fwalk>:
 8001638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800163c:	4688      	mov	r8, r1
 800163e:	f100 0748 	add.w	r7, r0, #72	; 0x48
 8001642:	2600      	movs	r6, #0
 8001644:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 8001648:	3d01      	subs	r5, #1
 800164a:	d40f      	bmi.n	800166c <_fwalk+0x34>
 800164c:	89a3      	ldrh	r3, [r4, #12]
 800164e:	2b01      	cmp	r3, #1
 8001650:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8001654:	d906      	bls.n	8001664 <_fwalk+0x2c>
 8001656:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800165a:	3301      	adds	r3, #1
 800165c:	4620      	mov	r0, r4
 800165e:	d001      	beq.n	8001664 <_fwalk+0x2c>
 8001660:	47c0      	blx	r8
 8001662:	4306      	orrs	r6, r0
 8001664:	1c6b      	adds	r3, r5, #1
 8001666:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800166a:	d1ef      	bne.n	800164c <_fwalk+0x14>
 800166c:	683f      	ldr	r7, [r7, #0]
 800166e:	2f00      	cmp	r7, #0
 8001670:	d1e8      	bne.n	8001644 <_fwalk+0xc>
 8001672:	4630      	mov	r0, r6
 8001674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001678 <_fwalk_reent>:
 8001678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800167c:	4607      	mov	r7, r0
 800167e:	4688      	mov	r8, r1
 8001680:	f100 0648 	add.w	r6, r0, #72	; 0x48
 8001684:	f04f 0900 	mov.w	r9, #0
 8001688:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 800168c:	3d01      	subs	r5, #1
 800168e:	d411      	bmi.n	80016b4 <_fwalk_reent+0x3c>
 8001690:	89a3      	ldrh	r3, [r4, #12]
 8001692:	2b01      	cmp	r3, #1
 8001694:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8001698:	d908      	bls.n	80016ac <_fwalk_reent+0x34>
 800169a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800169e:	3301      	adds	r3, #1
 80016a0:	4621      	mov	r1, r4
 80016a2:	d003      	beq.n	80016ac <_fwalk_reent+0x34>
 80016a4:	4638      	mov	r0, r7
 80016a6:	47c0      	blx	r8
 80016a8:	ea49 0900 	orr.w	r9, r9, r0
 80016ac:	1c6b      	adds	r3, r5, #1
 80016ae:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80016b2:	d1ed      	bne.n	8001690 <_fwalk_reent+0x18>
 80016b4:	6836      	ldr	r6, [r6, #0]
 80016b6:	2e00      	cmp	r6, #0
 80016b8:	d1e6      	bne.n	8001688 <_fwalk_reent+0x10>
 80016ba:	4648      	mov	r0, r9
 80016bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080016c0 <_gettimeofday_r>:
 80016c0:	b570      	push	{r4, r5, r6, lr}
 80016c2:	460c      	mov	r4, r1
 80016c4:	4d08      	ldr	r5, [pc, #32]	; (80016e8 <_gettimeofday_r+0x28>)
 80016c6:	4603      	mov	r3, r0
 80016c8:	2600      	movs	r6, #0
 80016ca:	4620      	mov	r0, r4
 80016cc:	4611      	mov	r1, r2
 80016ce:	461c      	mov	r4, r3
 80016d0:	602e      	str	r6, [r5, #0]
 80016d2:	f000 fd27 	bl	8002124 <_gettimeofday>
 80016d6:	1c43      	adds	r3, r0, #1
 80016d8:	d000      	beq.n	80016dc <_gettimeofday_r+0x1c>
 80016da:	bd70      	pop	{r4, r5, r6, pc}
 80016dc:	682b      	ldr	r3, [r5, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0fb      	beq.n	80016da <_gettimeofday_r+0x1a>
 80016e2:	6023      	str	r3, [r4, #0]
 80016e4:	bd70      	pop	{r4, r5, r6, pc}
 80016e6:	bf00      	nop
 80016e8:	20000114 	.word	0x20000114

080016ec <__smakebuf_r>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	898b      	ldrh	r3, [r1, #12]
 80016f0:	460c      	mov	r4, r1
 80016f2:	0799      	lsls	r1, r3, #30
 80016f4:	b097      	sub	sp, #92	; 0x5c
 80016f6:	d507      	bpl.n	8001708 <__smakebuf_r+0x1c>
 80016f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80016fc:	2201      	movs	r2, #1
 80016fe:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8001702:	6023      	str	r3, [r4, #0]
 8001704:	b017      	add	sp, #92	; 0x5c
 8001706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001708:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800170c:	2900      	cmp	r1, #0
 800170e:	4605      	mov	r5, r0
 8001710:	db2d      	blt.n	800176e <__smakebuf_r+0x82>
 8001712:	466a      	mov	r2, sp
 8001714:	f000 fca4 	bl	8002060 <_fstat_r>
 8001718:	2800      	cmp	r0, #0
 800171a:	db27      	blt.n	800176c <__smakebuf_r+0x80>
 800171c:	9e01      	ldr	r6, [sp, #4]
 800171e:	f406 4670 	and.w	r6, r6, #61440	; 0xf000
 8001722:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8001726:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
 800172a:	fab6 f686 	clz	r6, r6
 800172e:	4639      	mov	r1, r7
 8001730:	4628      	mov	r0, r5
 8001732:	0976      	lsrs	r6, r6, #5
 8001734:	f000 fa44 	bl	8001bc0 <_malloc_r>
 8001738:	b330      	cbz	r0, 8001788 <__smakebuf_r+0x9c>
 800173a:	89a3      	ldrh	r3, [r4, #12]
 800173c:	4a1a      	ldr	r2, [pc, #104]	; (80017a8 <__smakebuf_r+0xbc>)
 800173e:	62aa      	str	r2, [r5, #40]	; 0x28
 8001740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001744:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001748:	81a3      	strh	r3, [r4, #12]
 800174a:	6020      	str	r0, [r4, #0]
 800174c:	2e00      	cmp	r6, #0
 800174e:	d0d9      	beq.n	8001704 <__smakebuf_r+0x18>
 8001750:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001754:	4628      	mov	r0, r5
 8001756:	f000 fc99 	bl	800208c <_isatty_r>
 800175a:	2800      	cmp	r0, #0
 800175c:	d0d2      	beq.n	8001704 <__smakebuf_r+0x18>
 800175e:	89a3      	ldrh	r3, [r4, #12]
 8001760:	f023 0303 	bic.w	r3, r3, #3
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	81a3      	strh	r3, [r4, #12]
 800176a:	e7cb      	b.n	8001704 <__smakebuf_r+0x18>
 800176c:	89a3      	ldrh	r3, [r4, #12]
 800176e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001772:	bf14      	ite	ne
 8001774:	2740      	movne	r7, #64	; 0x40
 8001776:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 800177a:	4639      	mov	r1, r7
 800177c:	4628      	mov	r0, r5
 800177e:	2600      	movs	r6, #0
 8001780:	f000 fa1e 	bl	8001bc0 <_malloc_r>
 8001784:	2800      	cmp	r0, #0
 8001786:	d1d8      	bne.n	800173a <__smakebuf_r+0x4e>
 8001788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800178c:	059a      	lsls	r2, r3, #22
 800178e:	d4b9      	bmi.n	8001704 <__smakebuf_r+0x18>
 8001790:	f023 0303 	bic.w	r3, r3, #3
 8001794:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	2101      	movs	r1, #1
 800179e:	e9c4 2104 	strd	r2, r1, [r4, #16]
 80017a2:	81a3      	strh	r3, [r4, #12]
 80017a4:	6022      	str	r2, [r4, #0]
 80017a6:	e7ad      	b.n	8001704 <__smakebuf_r+0x18>
 80017a8:	08001115 	.word	0x08001115

080017ac <__swhatbuf_r>:
 80017ac:	b570      	push	{r4, r5, r6, lr}
 80017ae:	460c      	mov	r4, r1
 80017b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017b4:	2900      	cmp	r1, #0
 80017b6:	b096      	sub	sp, #88	; 0x58
 80017b8:	4616      	mov	r6, r2
 80017ba:	461d      	mov	r5, r3
 80017bc:	db13      	blt.n	80017e6 <__swhatbuf_r+0x3a>
 80017be:	466a      	mov	r2, sp
 80017c0:	f000 fc4e 	bl	8002060 <_fstat_r>
 80017c4:	2800      	cmp	r0, #0
 80017c6:	db0e      	blt.n	80017e6 <__swhatbuf_r+0x3a>
 80017c8:	9901      	ldr	r1, [sp, #4]
 80017ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80017ce:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
 80017d2:	fab1 f181 	clz	r1, r1
 80017d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017da:	0949      	lsrs	r1, r1, #5
 80017dc:	2000      	movs	r0, #0
 80017de:	6029      	str	r1, [r5, #0]
 80017e0:	6033      	str	r3, [r6, #0]
 80017e2:	b016      	add	sp, #88	; 0x58
 80017e4:	bd70      	pop	{r4, r5, r6, pc}
 80017e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017ea:	2200      	movs	r2, #0
 80017ec:	061b      	lsls	r3, r3, #24
 80017ee:	602a      	str	r2, [r5, #0]
 80017f0:	d504      	bpl.n	80017fc <__swhatbuf_r+0x50>
 80017f2:	2340      	movs	r3, #64	; 0x40
 80017f4:	2000      	movs	r0, #0
 80017f6:	6033      	str	r3, [r6, #0]
 80017f8:	b016      	add	sp, #88	; 0x58
 80017fa:	bd70      	pop	{r4, r5, r6, pc}
 80017fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001800:	2000      	movs	r0, #0
 8001802:	6033      	str	r3, [r6, #0]
 8001804:	b016      	add	sp, #88	; 0x58
 8001806:	bd70      	pop	{r4, r5, r6, pc}

08001808 <malloc>:
 8001808:	4b02      	ldr	r3, [pc, #8]	; (8001814 <malloc+0xc>)
 800180a:	4601      	mov	r1, r0
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	f000 b9d7 	b.w	8001bc0 <_malloc_r>
 8001812:	bf00      	nop
 8001814:	20000000 	.word	0x20000000

08001818 <free>:
 8001818:	4b02      	ldr	r3, [pc, #8]	; (8001824 <free+0xc>)
 800181a:	4601      	mov	r1, r0
 800181c:	6818      	ldr	r0, [r3, #0]
 800181e:	f000 b96d 	b.w	8001afc <_free_r>
 8001822:	bf00      	nop
 8001824:	20000000 	.word	0x20000000
	...

08001830 <memchr>:
 8001830:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001834:	2a10      	cmp	r2, #16
 8001836:	db2b      	blt.n	8001890 <memchr+0x60>
 8001838:	f010 0f07 	tst.w	r0, #7
 800183c:	d008      	beq.n	8001850 <memchr+0x20>
 800183e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001842:	3a01      	subs	r2, #1
 8001844:	428b      	cmp	r3, r1
 8001846:	d02d      	beq.n	80018a4 <memchr+0x74>
 8001848:	f010 0f07 	tst.w	r0, #7
 800184c:	b342      	cbz	r2, 80018a0 <memchr+0x70>
 800184e:	d1f6      	bne.n	800183e <memchr+0xe>
 8001850:	b4f0      	push	{r4, r5, r6, r7}
 8001852:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001856:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800185a:	f022 0407 	bic.w	r4, r2, #7
 800185e:	f07f 0700 	mvns.w	r7, #0
 8001862:	2300      	movs	r3, #0
 8001864:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001868:	3c08      	subs	r4, #8
 800186a:	ea85 0501 	eor.w	r5, r5, r1
 800186e:	ea86 0601 	eor.w	r6, r6, r1
 8001872:	fa85 f547 	uadd8	r5, r5, r7
 8001876:	faa3 f587 	sel	r5, r3, r7
 800187a:	fa86 f647 	uadd8	r6, r6, r7
 800187e:	faa5 f687 	sel	r6, r5, r7
 8001882:	b98e      	cbnz	r6, 80018a8 <memchr+0x78>
 8001884:	d1ee      	bne.n	8001864 <memchr+0x34>
 8001886:	bcf0      	pop	{r4, r5, r6, r7}
 8001888:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800188c:	f002 0207 	and.w	r2, r2, #7
 8001890:	b132      	cbz	r2, 80018a0 <memchr+0x70>
 8001892:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001896:	3a01      	subs	r2, #1
 8001898:	ea83 0301 	eor.w	r3, r3, r1
 800189c:	b113      	cbz	r3, 80018a4 <memchr+0x74>
 800189e:	d1f8      	bne.n	8001892 <memchr+0x62>
 80018a0:	2000      	movs	r0, #0
 80018a2:	4770      	bx	lr
 80018a4:	3801      	subs	r0, #1
 80018a6:	4770      	bx	lr
 80018a8:	2d00      	cmp	r5, #0
 80018aa:	bf06      	itte	eq
 80018ac:	4635      	moveq	r5, r6
 80018ae:	3803      	subeq	r0, #3
 80018b0:	3807      	subne	r0, #7
 80018b2:	f015 0f01 	tst.w	r5, #1
 80018b6:	d107      	bne.n	80018c8 <memchr+0x98>
 80018b8:	3001      	adds	r0, #1
 80018ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80018be:	bf02      	ittt	eq
 80018c0:	3001      	addeq	r0, #1
 80018c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80018c6:	3001      	addeq	r0, #1
 80018c8:	bcf0      	pop	{r4, r5, r6, r7}
 80018ca:	3801      	subs	r0, #1
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop

080018d0 <memcpy>:
 80018d0:	4684      	mov	ip, r0
 80018d2:	ea41 0300 	orr.w	r3, r1, r0
 80018d6:	f013 0303 	ands.w	r3, r3, #3
 80018da:	d16d      	bne.n	80019b8 <memcpy+0xe8>
 80018dc:	3a40      	subs	r2, #64	; 0x40
 80018de:	d341      	bcc.n	8001964 <memcpy+0x94>
 80018e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80018e4:	f840 3b04 	str.w	r3, [r0], #4
 80018e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80018ec:	f840 3b04 	str.w	r3, [r0], #4
 80018f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80018f4:	f840 3b04 	str.w	r3, [r0], #4
 80018f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80018fc:	f840 3b04 	str.w	r3, [r0], #4
 8001900:	f851 3b04 	ldr.w	r3, [r1], #4
 8001904:	f840 3b04 	str.w	r3, [r0], #4
 8001908:	f851 3b04 	ldr.w	r3, [r1], #4
 800190c:	f840 3b04 	str.w	r3, [r0], #4
 8001910:	f851 3b04 	ldr.w	r3, [r1], #4
 8001914:	f840 3b04 	str.w	r3, [r0], #4
 8001918:	f851 3b04 	ldr.w	r3, [r1], #4
 800191c:	f840 3b04 	str.w	r3, [r0], #4
 8001920:	f851 3b04 	ldr.w	r3, [r1], #4
 8001924:	f840 3b04 	str.w	r3, [r0], #4
 8001928:	f851 3b04 	ldr.w	r3, [r1], #4
 800192c:	f840 3b04 	str.w	r3, [r0], #4
 8001930:	f851 3b04 	ldr.w	r3, [r1], #4
 8001934:	f840 3b04 	str.w	r3, [r0], #4
 8001938:	f851 3b04 	ldr.w	r3, [r1], #4
 800193c:	f840 3b04 	str.w	r3, [r0], #4
 8001940:	f851 3b04 	ldr.w	r3, [r1], #4
 8001944:	f840 3b04 	str.w	r3, [r0], #4
 8001948:	f851 3b04 	ldr.w	r3, [r1], #4
 800194c:	f840 3b04 	str.w	r3, [r0], #4
 8001950:	f851 3b04 	ldr.w	r3, [r1], #4
 8001954:	f840 3b04 	str.w	r3, [r0], #4
 8001958:	f851 3b04 	ldr.w	r3, [r1], #4
 800195c:	f840 3b04 	str.w	r3, [r0], #4
 8001960:	3a40      	subs	r2, #64	; 0x40
 8001962:	d2bd      	bcs.n	80018e0 <memcpy+0x10>
 8001964:	3230      	adds	r2, #48	; 0x30
 8001966:	d311      	bcc.n	800198c <memcpy+0xbc>
 8001968:	f851 3b04 	ldr.w	r3, [r1], #4
 800196c:	f840 3b04 	str.w	r3, [r0], #4
 8001970:	f851 3b04 	ldr.w	r3, [r1], #4
 8001974:	f840 3b04 	str.w	r3, [r0], #4
 8001978:	f851 3b04 	ldr.w	r3, [r1], #4
 800197c:	f840 3b04 	str.w	r3, [r0], #4
 8001980:	f851 3b04 	ldr.w	r3, [r1], #4
 8001984:	f840 3b04 	str.w	r3, [r0], #4
 8001988:	3a10      	subs	r2, #16
 800198a:	d2ed      	bcs.n	8001968 <memcpy+0x98>
 800198c:	320c      	adds	r2, #12
 800198e:	d305      	bcc.n	800199c <memcpy+0xcc>
 8001990:	f851 3b04 	ldr.w	r3, [r1], #4
 8001994:	f840 3b04 	str.w	r3, [r0], #4
 8001998:	3a04      	subs	r2, #4
 800199a:	d2f9      	bcs.n	8001990 <memcpy+0xc0>
 800199c:	3204      	adds	r2, #4
 800199e:	d008      	beq.n	80019b2 <memcpy+0xe2>
 80019a0:	07d2      	lsls	r2, r2, #31
 80019a2:	bf1c      	itt	ne
 80019a4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80019a8:	f800 3b01 	strbne.w	r3, [r0], #1
 80019ac:	d301      	bcc.n	80019b2 <memcpy+0xe2>
 80019ae:	880b      	ldrh	r3, [r1, #0]
 80019b0:	8003      	strh	r3, [r0, #0]
 80019b2:	4660      	mov	r0, ip
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	2a08      	cmp	r2, #8
 80019ba:	d313      	bcc.n	80019e4 <memcpy+0x114>
 80019bc:	078b      	lsls	r3, r1, #30
 80019be:	d08d      	beq.n	80018dc <memcpy+0xc>
 80019c0:	f010 0303 	ands.w	r3, r0, #3
 80019c4:	d08a      	beq.n	80018dc <memcpy+0xc>
 80019c6:	f1c3 0304 	rsb	r3, r3, #4
 80019ca:	1ad2      	subs	r2, r2, r3
 80019cc:	07db      	lsls	r3, r3, #31
 80019ce:	bf1c      	itt	ne
 80019d0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80019d4:	f800 3b01 	strbne.w	r3, [r0], #1
 80019d8:	d380      	bcc.n	80018dc <memcpy+0xc>
 80019da:	f831 3b02 	ldrh.w	r3, [r1], #2
 80019de:	f820 3b02 	strh.w	r3, [r0], #2
 80019e2:	e77b      	b.n	80018dc <memcpy+0xc>
 80019e4:	3a04      	subs	r2, #4
 80019e6:	d3d9      	bcc.n	800199c <memcpy+0xcc>
 80019e8:	3a01      	subs	r2, #1
 80019ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80019ee:	f800 3b01 	strb.w	r3, [r0], #1
 80019f2:	d2f9      	bcs.n	80019e8 <memcpy+0x118>
 80019f4:	780b      	ldrb	r3, [r1, #0]
 80019f6:	7003      	strb	r3, [r0, #0]
 80019f8:	784b      	ldrb	r3, [r1, #1]
 80019fa:	7043      	strb	r3, [r0, #1]
 80019fc:	788b      	ldrb	r3, [r1, #2]
 80019fe:	7083      	strb	r3, [r0, #2]
 8001a00:	4660      	mov	r0, ip
 8001a02:	4770      	bx	lr

08001a04 <memmove>:
 8001a04:	4288      	cmp	r0, r1
 8001a06:	d90d      	bls.n	8001a24 <memmove+0x20>
 8001a08:	188b      	adds	r3, r1, r2
 8001a0a:	4283      	cmp	r3, r0
 8001a0c:	d90a      	bls.n	8001a24 <memmove+0x20>
 8001a0e:	eb00 0c02 	add.w	ip, r0, r2
 8001a12:	b1ba      	cbz	r2, 8001a44 <memmove+0x40>
 8001a14:	4662      	mov	r2, ip
 8001a16:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 8001a1a:	f802 cd01 	strb.w	ip, [r2, #-1]!
 8001a1e:	4299      	cmp	r1, r3
 8001a20:	d1f9      	bne.n	8001a16 <memmove+0x12>
 8001a22:	4770      	bx	lr
 8001a24:	2a0f      	cmp	r2, #15
 8001a26:	d80e      	bhi.n	8001a46 <memmove+0x42>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8001a2e:	b14a      	cbz	r2, 8001a44 <memmove+0x40>
 8001a30:	f10c 0c01 	add.w	ip, ip, #1
 8001a34:	3b01      	subs	r3, #1
 8001a36:	448c      	add	ip, r1
 8001a38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001a3c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001a40:	4561      	cmp	r1, ip
 8001a42:	d1f9      	bne.n	8001a38 <memmove+0x34>
 8001a44:	4770      	bx	lr
 8001a46:	ea40 0301 	orr.w	r3, r0, r1
 8001a4a:	079b      	lsls	r3, r3, #30
 8001a4c:	d150      	bne.n	8001af0 <memmove+0xec>
 8001a4e:	f1a2 0310 	sub.w	r3, r2, #16
 8001a52:	b570      	push	{r4, r5, r6, lr}
 8001a54:	f101 0c20 	add.w	ip, r1, #32
 8001a58:	f023 050f 	bic.w	r5, r3, #15
 8001a5c:	f101 0e10 	add.w	lr, r1, #16
 8001a60:	f100 0410 	add.w	r4, r0, #16
 8001a64:	44ac      	add	ip, r5
 8001a66:	091b      	lsrs	r3, r3, #4
 8001a68:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 8001a6c:	f844 5c10 	str.w	r5, [r4, #-16]
 8001a70:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 8001a74:	f844 5c0c 	str.w	r5, [r4, #-12]
 8001a78:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 8001a7c:	f844 5c08 	str.w	r5, [r4, #-8]
 8001a80:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 8001a84:	f844 5c04 	str.w	r5, [r4, #-4]
 8001a88:	f10e 0e10 	add.w	lr, lr, #16
 8001a8c:	45e6      	cmp	lr, ip
 8001a8e:	f104 0410 	add.w	r4, r4, #16
 8001a92:	d1e9      	bne.n	8001a68 <memmove+0x64>
 8001a94:	3301      	adds	r3, #1
 8001a96:	f012 0f0c 	tst.w	r2, #12
 8001a9a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8001a9e:	f002 040f 	and.w	r4, r2, #15
 8001aa2:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8001aa6:	d027      	beq.n	8001af8 <memmove+0xf4>
 8001aa8:	3c04      	subs	r4, #4
 8001aaa:	f024 0603 	bic.w	r6, r4, #3
 8001aae:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 8001ab2:	441e      	add	r6, r3
 8001ab4:	1f1c      	subs	r4, r3, #4
 8001ab6:	468e      	mov	lr, r1
 8001ab8:	f85e 5b04 	ldr.w	r5, [lr], #4
 8001abc:	f844 5f04 	str.w	r5, [r4, #4]!
 8001ac0:	42b4      	cmp	r4, r6
 8001ac2:	d1f9      	bne.n	8001ab8 <memmove+0xb4>
 8001ac4:	f10c 0401 	add.w	r4, ip, #1
 8001ac8:	f002 0203 	and.w	r2, r2, #3
 8001acc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001ad0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8001ad4:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8001ad8:	b14a      	cbz	r2, 8001aee <memmove+0xea>
 8001ada:	f10c 0c01 	add.w	ip, ip, #1
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	448c      	add	ip, r1
 8001ae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001ae6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001aea:	4561      	cmp	r1, ip
 8001aec:	d1f9      	bne.n	8001ae2 <memmove+0xde>
 8001aee:	bd70      	pop	{r4, r5, r6, pc}
 8001af0:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8001af4:	4603      	mov	r3, r0
 8001af6:	e79b      	b.n	8001a30 <memmove+0x2c>
 8001af8:	4622      	mov	r2, r4
 8001afa:	e7eb      	b.n	8001ad4 <memmove+0xd0>

08001afc <_free_r>:
 8001afc:	2900      	cmp	r1, #0
 8001afe:	d058      	beq.n	8001bb2 <_free_r+0xb6>
 8001b00:	b530      	push	{r4, r5, lr}
 8001b02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b06:	b083      	sub	sp, #12
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f1a1 0404 	sub.w	r4, r1, #4
 8001b0e:	bfb8      	it	lt
 8001b10:	18e4      	addlt	r4, r4, r3
 8001b12:	9001      	str	r0, [sp, #4]
 8001b14:	f000 fae2 	bl	80020dc <__malloc_lock>
 8001b18:	4a28      	ldr	r2, [pc, #160]	; (8001bbc <_free_r+0xc0>)
 8001b1a:	9801      	ldr	r0, [sp, #4]
 8001b1c:	6813      	ldr	r3, [r2, #0]
 8001b1e:	b133      	cbz	r3, 8001b2e <_free_r+0x32>
 8001b20:	42a3      	cmp	r3, r4
 8001b22:	d90d      	bls.n	8001b40 <_free_r+0x44>
 8001b24:	6821      	ldr	r1, [r4, #0]
 8001b26:	eb04 0c01 	add.w	ip, r4, r1
 8001b2a:	4563      	cmp	r3, ip
 8001b2c:	d02f      	beq.n	8001b8e <_free_r+0x92>
 8001b2e:	6063      	str	r3, [r4, #4]
 8001b30:	6014      	str	r4, [r2, #0]
 8001b32:	b003      	add	sp, #12
 8001b34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001b38:	f000 bad2 	b.w	80020e0 <__malloc_unlock>
 8001b3c:	42a3      	cmp	r3, r4
 8001b3e:	d810      	bhi.n	8001b62 <_free_r+0x66>
 8001b40:	461a      	mov	r2, r3
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f9      	bne.n	8001b3c <_free_r+0x40>
 8001b48:	6811      	ldr	r1, [r2, #0]
 8001b4a:	eb02 0c01 	add.w	ip, r2, r1
 8001b4e:	4564      	cmp	r4, ip
 8001b50:	d019      	beq.n	8001b86 <_free_r+0x8a>
 8001b52:	d32f      	bcc.n	8001bb4 <_free_r+0xb8>
 8001b54:	6063      	str	r3, [r4, #4]
 8001b56:	6054      	str	r4, [r2, #4]
 8001b58:	b003      	add	sp, #12
 8001b5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001b5e:	f000 babf 	b.w	80020e0 <__malloc_unlock>
 8001b62:	6811      	ldr	r1, [r2, #0]
 8001b64:	eb02 0c01 	add.w	ip, r2, r1
 8001b68:	45a4      	cmp	ip, r4
 8001b6a:	d016      	beq.n	8001b9a <_free_r+0x9e>
 8001b6c:	d822      	bhi.n	8001bb4 <_free_r+0xb8>
 8001b6e:	6821      	ldr	r1, [r4, #0]
 8001b70:	eb04 0c01 	add.w	ip, r4, r1
 8001b74:	4563      	cmp	r3, ip
 8001b76:	d1ed      	bne.n	8001b54 <_free_r+0x58>
 8001b78:	681d      	ldr	r5, [r3, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	4429      	add	r1, r5
 8001b7e:	e9c4 1300 	strd	r1, r3, [r4]
 8001b82:	6054      	str	r4, [r2, #4]
 8001b84:	e7d5      	b.n	8001b32 <_free_r+0x36>
 8001b86:	6823      	ldr	r3, [r4, #0]
 8001b88:	4419      	add	r1, r3
 8001b8a:	6011      	str	r1, [r2, #0]
 8001b8c:	e7d1      	b.n	8001b32 <_free_r+0x36>
 8001b8e:	681d      	ldr	r5, [r3, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	4429      	add	r1, r5
 8001b94:	e9c4 1300 	strd	r1, r3, [r4]
 8001b98:	e7ca      	b.n	8001b30 <_free_r+0x34>
 8001b9a:	6824      	ldr	r4, [r4, #0]
 8001b9c:	4421      	add	r1, r4
 8001b9e:	1854      	adds	r4, r2, r1
 8001ba0:	42a3      	cmp	r3, r4
 8001ba2:	6011      	str	r1, [r2, #0]
 8001ba4:	d1c5      	bne.n	8001b32 <_free_r+0x36>
 8001ba6:	e9d3 4300 	ldrd	r4, r3, [r3]
 8001baa:	4421      	add	r1, r4
 8001bac:	e9c2 1300 	strd	r1, r3, [r2]
 8001bb0:	e7bf      	b.n	8001b32 <_free_r+0x36>
 8001bb2:	4770      	bx	lr
 8001bb4:	230c      	movs	r3, #12
 8001bb6:	6003      	str	r3, [r0, #0]
 8001bb8:	e7bb      	b.n	8001b32 <_free_r+0x36>
 8001bba:	bf00      	nop
 8001bbc:	2000010c 	.word	0x2000010c

08001bc0 <_malloc_r>:
 8001bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc2:	1ccd      	adds	r5, r1, #3
 8001bc4:	f025 0503 	bic.w	r5, r5, #3
 8001bc8:	3508      	adds	r5, #8
 8001bca:	2d0c      	cmp	r5, #12
 8001bcc:	bf38      	it	cc
 8001bce:	250c      	movcc	r5, #12
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	4606      	mov	r6, r0
 8001bd4:	db23      	blt.n	8001c1e <_malloc_r+0x5e>
 8001bd6:	42a9      	cmp	r1, r5
 8001bd8:	d821      	bhi.n	8001c1e <_malloc_r+0x5e>
 8001bda:	4f25      	ldr	r7, [pc, #148]	; (8001c70 <_malloc_r+0xb0>)
 8001bdc:	f000 fa7e 	bl	80020dc <__malloc_lock>
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	b322      	cbz	r2, 8001c2e <_malloc_r+0x6e>
 8001be4:	4614      	mov	r4, r2
 8001be6:	e003      	b.n	8001bf0 <_malloc_r+0x30>
 8001be8:	6863      	ldr	r3, [r4, #4]
 8001bea:	4622      	mov	r2, r4
 8001bec:	b1fb      	cbz	r3, 8001c2e <_malloc_r+0x6e>
 8001bee:	461c      	mov	r4, r3
 8001bf0:	6823      	ldr	r3, [r4, #0]
 8001bf2:	1b5b      	subs	r3, r3, r5
 8001bf4:	d4f8      	bmi.n	8001be8 <_malloc_r+0x28>
 8001bf6:	2b0b      	cmp	r3, #11
 8001bf8:	d815      	bhi.n	8001c26 <_malloc_r+0x66>
 8001bfa:	6863      	ldr	r3, [r4, #4]
 8001bfc:	4294      	cmp	r4, r2
 8001bfe:	bf0c      	ite	eq
 8001c00:	603b      	streq	r3, [r7, #0]
 8001c02:	6053      	strne	r3, [r2, #4]
 8001c04:	4630      	mov	r0, r6
 8001c06:	f000 fa6b 	bl	80020e0 <__malloc_unlock>
 8001c0a:	f104 000b 	add.w	r0, r4, #11
 8001c0e:	1d23      	adds	r3, r4, #4
 8001c10:	f020 0007 	bic.w	r0, r0, #7
 8001c14:	1ac2      	subs	r2, r0, r3
 8001c16:	d001      	beq.n	8001c1c <_malloc_r+0x5c>
 8001c18:	1a1b      	subs	r3, r3, r0
 8001c1a:	50a3      	str	r3, [r4, r2]
 8001c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c1e:	230c      	movs	r3, #12
 8001c20:	6033      	str	r3, [r6, #0]
 8001c22:	2000      	movs	r0, #0
 8001c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c26:	6023      	str	r3, [r4, #0]
 8001c28:	441c      	add	r4, r3
 8001c2a:	6025      	str	r5, [r4, #0]
 8001c2c:	e7ea      	b.n	8001c04 <_malloc_r+0x44>
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	b1c9      	cbz	r1, 8001c66 <_malloc_r+0xa6>
 8001c32:	4629      	mov	r1, r5
 8001c34:	4630      	mov	r0, r6
 8001c36:	f000 f845 	bl	8001cc4 <_sbrk_r>
 8001c3a:	1c43      	adds	r3, r0, #1
 8001c3c:	d00c      	beq.n	8001c58 <_malloc_r+0x98>
 8001c3e:	1cc4      	adds	r4, r0, #3
 8001c40:	f024 0403 	bic.w	r4, r4, #3
 8001c44:	42a0      	cmp	r0, r4
 8001c46:	d005      	beq.n	8001c54 <_malloc_r+0x94>
 8001c48:	1a21      	subs	r1, r4, r0
 8001c4a:	4630      	mov	r0, r6
 8001c4c:	f000 f83a 	bl	8001cc4 <_sbrk_r>
 8001c50:	3001      	adds	r0, #1
 8001c52:	d001      	beq.n	8001c58 <_malloc_r+0x98>
 8001c54:	6025      	str	r5, [r4, #0]
 8001c56:	e7d5      	b.n	8001c04 <_malloc_r+0x44>
 8001c58:	230c      	movs	r3, #12
 8001c5a:	4630      	mov	r0, r6
 8001c5c:	6033      	str	r3, [r6, #0]
 8001c5e:	f000 fa3f 	bl	80020e0 <__malloc_unlock>
 8001c62:	2000      	movs	r0, #0
 8001c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c66:	4630      	mov	r0, r6
 8001c68:	f000 f82c 	bl	8001cc4 <_sbrk_r>
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	e7e0      	b.n	8001c32 <_malloc_r+0x72>
 8001c70:	2000010c 	.word	0x2000010c

08001c74 <_realloc_r>:
 8001c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c76:	4614      	mov	r4, r2
 8001c78:	b1f9      	cbz	r1, 8001cba <_realloc_r+0x46>
 8001c7a:	b1ca      	cbz	r2, 8001cb0 <_realloc_r+0x3c>
 8001c7c:	4606      	mov	r6, r0
 8001c7e:	460d      	mov	r5, r1
 8001c80:	f000 fa30 	bl	80020e4 <_malloc_usable_size_r>
 8001c84:	42a0      	cmp	r0, r4
 8001c86:	d302      	bcc.n	8001c8e <_realloc_r+0x1a>
 8001c88:	462f      	mov	r7, r5
 8001c8a:	4638      	mov	r0, r7
 8001c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c8e:	4621      	mov	r1, r4
 8001c90:	4630      	mov	r0, r6
 8001c92:	f7ff ff95 	bl	8001bc0 <_malloc_r>
 8001c96:	4607      	mov	r7, r0
 8001c98:	2800      	cmp	r0, #0
 8001c9a:	d0f6      	beq.n	8001c8a <_realloc_r+0x16>
 8001c9c:	4622      	mov	r2, r4
 8001c9e:	4629      	mov	r1, r5
 8001ca0:	f7ff fe16 	bl	80018d0 <memcpy>
 8001ca4:	4630      	mov	r0, r6
 8001ca6:	4629      	mov	r1, r5
 8001ca8:	f7ff ff28 	bl	8001afc <_free_r>
 8001cac:	4638      	mov	r0, r7
 8001cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cb0:	4627      	mov	r7, r4
 8001cb2:	f7ff ff23 	bl	8001afc <_free_r>
 8001cb6:	4638      	mov	r0, r7
 8001cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	f7ff bf7e 	b.w	8001bc0 <_malloc_r>

08001cc4 <_sbrk_r>:
 8001cc4:	b538      	push	{r3, r4, r5, lr}
 8001cc6:	4d07      	ldr	r5, [pc, #28]	; (8001ce4 <_sbrk_r+0x20>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	4604      	mov	r4, r0
 8001ccc:	4608      	mov	r0, r1
 8001cce:	602a      	str	r2, [r5, #0]
 8001cd0:	f004 f8d8 	bl	8005e84 <_sbrk>
 8001cd4:	1c43      	adds	r3, r0, #1
 8001cd6:	d000      	beq.n	8001cda <_sbrk_r+0x16>
 8001cd8:	bd38      	pop	{r3, r4, r5, pc}
 8001cda:	682b      	ldr	r3, [r5, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0fb      	beq.n	8001cd8 <_sbrk_r+0x14>
 8001ce0:	6023      	str	r3, [r4, #0]
 8001ce2:	bd38      	pop	{r3, r4, r5, pc}
 8001ce4:	20000114 	.word	0x20000114

08001ce8 <_init_signal_r>:
 8001ce8:	b538      	push	{r3, r4, r5, lr}
 8001cea:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001cec:	b10c      	cbz	r4, 8001cf2 <_init_signal_r+0xa>
 8001cee:	2000      	movs	r0, #0
 8001cf0:	bd38      	pop	{r3, r4, r5, pc}
 8001cf2:	2180      	movs	r1, #128	; 0x80
 8001cf4:	4605      	mov	r5, r0
 8001cf6:	f7ff ff63 	bl	8001bc0 <_malloc_r>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	6468      	str	r0, [r5, #68]	; 0x44
 8001cfe:	b130      	cbz	r0, 8001d0e <_init_signal_r+0x26>
 8001d00:	1f03      	subs	r3, r0, #4
 8001d02:	327c      	adds	r2, #124	; 0x7c
 8001d04:	f843 4f04 	str.w	r4, [r3, #4]!
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d1fb      	bne.n	8001d04 <_init_signal_r+0x1c>
 8001d0c:	e7ef      	b.n	8001cee <_init_signal_r+0x6>
 8001d0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d12:	bd38      	pop	{r3, r4, r5, pc}

08001d14 <_signal_r>:
 8001d14:	291f      	cmp	r1, #31
 8001d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d18:	4605      	mov	r5, r0
 8001d1a:	d808      	bhi.n	8001d2e <_signal_r+0x1a>
 8001d1c:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8001d1e:	460c      	mov	r4, r1
 8001d20:	4617      	mov	r7, r2
 8001d22:	b14e      	cbz	r6, 8001d38 <_signal_r+0x24>
 8001d24:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001d28:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 8001d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d2e:	2316      	movs	r3, #22
 8001d30:	6003      	str	r3, [r0, #0]
 8001d32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d38:	2180      	movs	r1, #128	; 0x80
 8001d3a:	f7ff ff41 	bl	8001bc0 <_malloc_r>
 8001d3e:	4606      	mov	r6, r0
 8001d40:	6468      	str	r0, [r5, #68]	; 0x44
 8001d42:	b140      	cbz	r0, 8001d56 <_signal_r+0x42>
 8001d44:	1f03      	subs	r3, r0, #4
 8001d46:	f100 057c 	add.w	r5, r0, #124	; 0x7c
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	f843 1f04 	str.w	r1, [r3, #4]!
 8001d50:	429d      	cmp	r5, r3
 8001d52:	d1fb      	bne.n	8001d4c <_signal_r+0x38>
 8001d54:	e7e6      	b.n	8001d24 <_signal_r+0x10>
 8001d56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001d5c <_raise_r>:
 8001d5c:	291f      	cmp	r1, #31
 8001d5e:	b538      	push	{r3, r4, r5, lr}
 8001d60:	4605      	mov	r5, r0
 8001d62:	d820      	bhi.n	8001da6 <_raise_r+0x4a>
 8001d64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001d66:	460c      	mov	r4, r1
 8001d68:	b16a      	cbz	r2, 8001d86 <_raise_r+0x2a>
 8001d6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001d6e:	b153      	cbz	r3, 8001d86 <_raise_r+0x2a>
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d016      	beq.n	8001da2 <_raise_r+0x46>
 8001d74:	1c59      	adds	r1, r3, #1
 8001d76:	d010      	beq.n	8001d9a <_raise_r+0x3e>
 8001d78:	2500      	movs	r5, #0
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8001d80:	4798      	blx	r3
 8001d82:	4628      	mov	r0, r5
 8001d84:	bd38      	pop	{r3, r4, r5, pc}
 8001d86:	4628      	mov	r0, r5
 8001d88:	f000 f8f8 	bl	8001f7c <_getpid_r>
 8001d8c:	4622      	mov	r2, r4
 8001d8e:	4601      	mov	r1, r0
 8001d90:	4628      	mov	r0, r5
 8001d92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d96:	f000 b8db 	b.w	8001f50 <_kill_r>
 8001d9a:	2316      	movs	r3, #22
 8001d9c:	6003      	str	r3, [r0, #0]
 8001d9e:	2001      	movs	r0, #1
 8001da0:	bd38      	pop	{r3, r4, r5, pc}
 8001da2:	2000      	movs	r0, #0
 8001da4:	bd38      	pop	{r3, r4, r5, pc}
 8001da6:	2316      	movs	r3, #22
 8001da8:	6003      	str	r3, [r0, #0]
 8001daa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dae:	bd38      	pop	{r3, r4, r5, pc}

08001db0 <__sigtramp_r>:
 8001db0:	291f      	cmp	r1, #31
 8001db2:	d82a      	bhi.n	8001e0a <__sigtramp_r+0x5a>
 8001db4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001db6:	b538      	push	{r3, r4, r5, lr}
 8001db8:	460c      	mov	r4, r1
 8001dba:	4605      	mov	r5, r0
 8001dbc:	b182      	cbz	r2, 8001de0 <__sigtramp_r+0x30>
 8001dbe:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8001dc2:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8001dc6:	b14b      	cbz	r3, 8001ddc <__sigtramp_r+0x2c>
 8001dc8:	1c59      	adds	r1, r3, #1
 8001dca:	d019      	beq.n	8001e00 <__sigtramp_r+0x50>
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d015      	beq.n	8001dfc <__sigtramp_r+0x4c>
 8001dd0:	2500      	movs	r5, #0
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	6015      	str	r5, [r2, #0]
 8001dd6:	4798      	blx	r3
 8001dd8:	4628      	mov	r0, r5
 8001dda:	bd38      	pop	{r3, r4, r5, pc}
 8001ddc:	2001      	movs	r0, #1
 8001dde:	bd38      	pop	{r3, r4, r5, pc}
 8001de0:	2180      	movs	r1, #128	; 0x80
 8001de2:	f7ff feed 	bl	8001bc0 <_malloc_r>
 8001de6:	4602      	mov	r2, r0
 8001de8:	6468      	str	r0, [r5, #68]	; 0x44
 8001dea:	b158      	cbz	r0, 8001e04 <__sigtramp_r+0x54>
 8001dec:	1f03      	subs	r3, r0, #4
 8001dee:	2100      	movs	r1, #0
 8001df0:	307c      	adds	r0, #124	; 0x7c
 8001df2:	f843 1f04 	str.w	r1, [r3, #4]!
 8001df6:	4298      	cmp	r0, r3
 8001df8:	d1fb      	bne.n	8001df2 <__sigtramp_r+0x42>
 8001dfa:	e7e0      	b.n	8001dbe <__sigtramp_r+0xe>
 8001dfc:	2003      	movs	r0, #3
 8001dfe:	bd38      	pop	{r3, r4, r5, pc}
 8001e00:	2002      	movs	r0, #2
 8001e02:	bd38      	pop	{r3, r4, r5, pc}
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e08:	bd38      	pop	{r3, r4, r5, pc}
 8001e0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e0e:	4770      	bx	lr

08001e10 <raise>:
 8001e10:	b538      	push	{r3, r4, r5, lr}
 8001e12:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <raise+0x54>)
 8001e14:	281f      	cmp	r0, #31
 8001e16:	681d      	ldr	r5, [r3, #0]
 8001e18:	d81f      	bhi.n	8001e5a <raise+0x4a>
 8001e1a:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8001e1c:	4604      	mov	r4, r0
 8001e1e:	b162      	cbz	r2, 8001e3a <raise+0x2a>
 8001e20:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8001e24:	b14b      	cbz	r3, 8001e3a <raise+0x2a>
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d015      	beq.n	8001e56 <raise+0x46>
 8001e2a:	1c59      	adds	r1, r3, #1
 8001e2c:	d00f      	beq.n	8001e4e <raise+0x3e>
 8001e2e:	2500      	movs	r5, #0
 8001e30:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8001e34:	4798      	blx	r3
 8001e36:	4628      	mov	r0, r5
 8001e38:	bd38      	pop	{r3, r4, r5, pc}
 8001e3a:	4628      	mov	r0, r5
 8001e3c:	f000 f89e 	bl	8001f7c <_getpid_r>
 8001e40:	4622      	mov	r2, r4
 8001e42:	4601      	mov	r1, r0
 8001e44:	4628      	mov	r0, r5
 8001e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e4a:	f000 b881 	b.w	8001f50 <_kill_r>
 8001e4e:	2316      	movs	r3, #22
 8001e50:	602b      	str	r3, [r5, #0]
 8001e52:	2001      	movs	r0, #1
 8001e54:	bd38      	pop	{r3, r4, r5, pc}
 8001e56:	2000      	movs	r0, #0
 8001e58:	bd38      	pop	{r3, r4, r5, pc}
 8001e5a:	2316      	movs	r3, #22
 8001e5c:	602b      	str	r3, [r5, #0]
 8001e5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e62:	bd38      	pop	{r3, r4, r5, pc}
 8001e64:	20000000 	.word	0x20000000

08001e68 <signal>:
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <signal+0x4c>)
 8001e6a:	281f      	cmp	r0, #31
 8001e6c:	b570      	push	{r4, r5, r6, lr}
 8001e6e:	681e      	ldr	r6, [r3, #0]
 8001e70:	d808      	bhi.n	8001e84 <signal+0x1c>
 8001e72:	460d      	mov	r5, r1
 8001e74:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8001e76:	4604      	mov	r4, r0
 8001e78:	b149      	cbz	r1, 8001e8e <signal+0x26>
 8001e7a:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8001e7e:	f841 5024 	str.w	r5, [r1, r4, lsl #2]
 8001e82:	bd70      	pop	{r4, r5, r6, pc}
 8001e84:	2316      	movs	r3, #22
 8001e86:	6033      	str	r3, [r6, #0]
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e8c:	bd70      	pop	{r4, r5, r6, pc}
 8001e8e:	2180      	movs	r1, #128	; 0x80
 8001e90:	4630      	mov	r0, r6
 8001e92:	f7ff fe95 	bl	8001bc0 <_malloc_r>
 8001e96:	4601      	mov	r1, r0
 8001e98:	6470      	str	r0, [r6, #68]	; 0x44
 8001e9a:	b140      	cbz	r0, 8001eae <signal+0x46>
 8001e9c:	1f03      	subs	r3, r0, #4
 8001e9e:	f100 0c7c 	add.w	ip, r0, #124	; 0x7c
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f843 2f04 	str.w	r2, [r3, #4]!
 8001ea8:	4563      	cmp	r3, ip
 8001eaa:	d1fb      	bne.n	8001ea4 <signal+0x3c>
 8001eac:	e7e5      	b.n	8001e7a <signal+0x12>
 8001eae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001eb2:	bd70      	pop	{r4, r5, r6, pc}
 8001eb4:	20000000 	.word	0x20000000

08001eb8 <_init_signal>:
 8001eb8:	b538      	push	{r3, r4, r5, lr}
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <_init_signal+0x30>)
 8001ebc:	681d      	ldr	r5, [r3, #0]
 8001ebe:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8001ec0:	b10c      	cbz	r4, 8001ec6 <_init_signal+0xe>
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	bd38      	pop	{r3, r4, r5, pc}
 8001ec6:	2180      	movs	r1, #128	; 0x80
 8001ec8:	4628      	mov	r0, r5
 8001eca:	f7ff fe79 	bl	8001bc0 <_malloc_r>
 8001ece:	6468      	str	r0, [r5, #68]	; 0x44
 8001ed0:	b138      	cbz	r0, 8001ee2 <_init_signal+0x2a>
 8001ed2:	1f03      	subs	r3, r0, #4
 8001ed4:	f100 027c 	add.w	r2, r0, #124	; 0x7c
 8001ed8:	f843 4f04 	str.w	r4, [r3, #4]!
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d1fb      	bne.n	8001ed8 <_init_signal+0x20>
 8001ee0:	e7ef      	b.n	8001ec2 <_init_signal+0xa>
 8001ee2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ee6:	bd38      	pop	{r3, r4, r5, pc}
 8001ee8:	20000000 	.word	0x20000000

08001eec <__sigtramp>:
 8001eec:	b538      	push	{r3, r4, r5, lr}
 8001eee:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <__sigtramp+0x60>)
 8001ef0:	281f      	cmp	r0, #31
 8001ef2:	681d      	ldr	r5, [r3, #0]
 8001ef4:	d826      	bhi.n	8001f44 <__sigtramp+0x58>
 8001ef6:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8001ef8:	4604      	mov	r4, r0
 8001efa:	b182      	cbz	r2, 8001f1e <__sigtramp+0x32>
 8001efc:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8001f00:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8001f04:	b14b      	cbz	r3, 8001f1a <__sigtramp+0x2e>
 8001f06:	1c59      	adds	r1, r3, #1
 8001f08:	d01a      	beq.n	8001f40 <__sigtramp+0x54>
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d016      	beq.n	8001f3c <__sigtramp+0x50>
 8001f0e:	2500      	movs	r5, #0
 8001f10:	4620      	mov	r0, r4
 8001f12:	6015      	str	r5, [r2, #0]
 8001f14:	4798      	blx	r3
 8001f16:	4628      	mov	r0, r5
 8001f18:	bd38      	pop	{r3, r4, r5, pc}
 8001f1a:	2001      	movs	r0, #1
 8001f1c:	bd38      	pop	{r3, r4, r5, pc}
 8001f1e:	2180      	movs	r1, #128	; 0x80
 8001f20:	4628      	mov	r0, r5
 8001f22:	f7ff fe4d 	bl	8001bc0 <_malloc_r>
 8001f26:	4602      	mov	r2, r0
 8001f28:	6468      	str	r0, [r5, #68]	; 0x44
 8001f2a:	b158      	cbz	r0, 8001f44 <__sigtramp+0x58>
 8001f2c:	1f03      	subs	r3, r0, #4
 8001f2e:	2100      	movs	r1, #0
 8001f30:	307c      	adds	r0, #124	; 0x7c
 8001f32:	f843 1f04 	str.w	r1, [r3, #4]!
 8001f36:	4283      	cmp	r3, r0
 8001f38:	d1fb      	bne.n	8001f32 <__sigtramp+0x46>
 8001f3a:	e7df      	b.n	8001efc <__sigtramp+0x10>
 8001f3c:	2003      	movs	r0, #3
 8001f3e:	bd38      	pop	{r3, r4, r5, pc}
 8001f40:	2002      	movs	r0, #2
 8001f42:	bd38      	pop	{r3, r4, r5, pc}
 8001f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f48:	bd38      	pop	{r3, r4, r5, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000000 	.word	0x20000000

08001f50 <_kill_r>:
 8001f50:	b570      	push	{r4, r5, r6, lr}
 8001f52:	460c      	mov	r4, r1
 8001f54:	4d08      	ldr	r5, [pc, #32]	; (8001f78 <_kill_r+0x28>)
 8001f56:	4603      	mov	r3, r0
 8001f58:	2600      	movs	r6, #0
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	461c      	mov	r4, r3
 8001f60:	602e      	str	r6, [r5, #0]
 8001f62:	f003 ff57 	bl	8005e14 <_kill>
 8001f66:	1c43      	adds	r3, r0, #1
 8001f68:	d000      	beq.n	8001f6c <_kill_r+0x1c>
 8001f6a:	bd70      	pop	{r4, r5, r6, pc}
 8001f6c:	682b      	ldr	r3, [r5, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0fb      	beq.n	8001f6a <_kill_r+0x1a>
 8001f72:	6023      	str	r3, [r4, #0]
 8001f74:	bd70      	pop	{r4, r5, r6, pc}
 8001f76:	bf00      	nop
 8001f78:	20000114 	.word	0x20000114

08001f7c <_getpid_r>:
 8001f7c:	f003 bf48 	b.w	8005e10 <_getpid>

08001f80 <__sread>:
 8001f80:	b510      	push	{r4, lr}
 8001f82:	460c      	mov	r4, r1
 8001f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f88:	f000 f8b6 	bl	80020f8 <_read_r>
 8001f8c:	2800      	cmp	r0, #0
 8001f8e:	db03      	blt.n	8001f98 <__sread+0x18>
 8001f90:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f92:	4403      	add	r3, r0
 8001f94:	6563      	str	r3, [r4, #84]	; 0x54
 8001f96:	bd10      	pop	{r4, pc}
 8001f98:	89a3      	ldrh	r3, [r4, #12]
 8001f9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f9e:	81a3      	strh	r3, [r4, #12]
 8001fa0:	bd10      	pop	{r4, pc}
 8001fa2:	bf00      	nop

08001fa4 <__seofread>:
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	4770      	bx	lr

08001fa8 <__swrite>:
 8001fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fac:	460c      	mov	r4, r1
 8001fae:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 8001fb2:	461f      	mov	r7, r3
 8001fb4:	05cb      	lsls	r3, r1, #23
 8001fb6:	4605      	mov	r5, r0
 8001fb8:	4616      	mov	r6, r2
 8001fba:	d40b      	bmi.n	8001fd4 <__swrite+0x2c>
 8001fbc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8001fc0:	81a1      	strh	r1, [r4, #12]
 8001fc2:	463b      	mov	r3, r7
 8001fc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001fc8:	4632      	mov	r2, r6
 8001fca:	4628      	mov	r0, r5
 8001fcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001fd0:	f000 b81e 	b.w	8002010 <_write_r>
 8001fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001fd8:	2302      	movs	r3, #2
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f000 f868 	bl	80020b0 <_lseek_r>
 8001fe0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8001fe4:	e7ea      	b.n	8001fbc <__swrite+0x14>
 8001fe6:	bf00      	nop

08001fe8 <__sseek>:
 8001fe8:	b510      	push	{r4, lr}
 8001fea:	460c      	mov	r4, r1
 8001fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ff0:	f000 f85e 	bl	80020b0 <_lseek_r>
 8001ff4:	89a3      	ldrh	r3, [r4, #12]
 8001ff6:	1c42      	adds	r2, r0, #1
 8001ff8:	bf0e      	itee	eq
 8001ffa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001ffe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002002:	6560      	strne	r0, [r4, #84]	; 0x54
 8002004:	81a3      	strh	r3, [r4, #12]
 8002006:	bd10      	pop	{r4, pc}

08002008 <__sclose>:
 8002008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800200c:	f000 b816 	b.w	800203c <_close_r>

08002010 <_write_r>:
 8002010:	b538      	push	{r3, r4, r5, lr}
 8002012:	460c      	mov	r4, r1
 8002014:	4d08      	ldr	r5, [pc, #32]	; (8002038 <_write_r+0x28>)
 8002016:	4684      	mov	ip, r0
 8002018:	4611      	mov	r1, r2
 800201a:	4620      	mov	r0, r4
 800201c:	461a      	mov	r2, r3
 800201e:	2300      	movs	r3, #0
 8002020:	602b      	str	r3, [r5, #0]
 8002022:	4664      	mov	r4, ip
 8002024:	f003 ff14 	bl	8005e50 <_write>
 8002028:	1c43      	adds	r3, r0, #1
 800202a:	d000      	beq.n	800202e <_write_r+0x1e>
 800202c:	bd38      	pop	{r3, r4, r5, pc}
 800202e:	682b      	ldr	r3, [r5, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0fb      	beq.n	800202c <_write_r+0x1c>
 8002034:	6023      	str	r3, [r4, #0]
 8002036:	bd38      	pop	{r3, r4, r5, pc}
 8002038:	20000114 	.word	0x20000114

0800203c <_close_r>:
 800203c:	b538      	push	{r3, r4, r5, lr}
 800203e:	4d07      	ldr	r5, [pc, #28]	; (800205c <_close_r+0x20>)
 8002040:	2200      	movs	r2, #0
 8002042:	4604      	mov	r4, r0
 8002044:	4608      	mov	r0, r1
 8002046:	602a      	str	r2, [r5, #0]
 8002048:	f003 ff10 	bl	8005e6c <_close>
 800204c:	1c43      	adds	r3, r0, #1
 800204e:	d000      	beq.n	8002052 <_close_r+0x16>
 8002050:	bd38      	pop	{r3, r4, r5, pc}
 8002052:	682b      	ldr	r3, [r5, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0fb      	beq.n	8002050 <_close_r+0x14>
 8002058:	6023      	str	r3, [r4, #0]
 800205a:	bd38      	pop	{r3, r4, r5, pc}
 800205c:	20000114 	.word	0x20000114

08002060 <_fstat_r>:
 8002060:	b570      	push	{r4, r5, r6, lr}
 8002062:	460c      	mov	r4, r1
 8002064:	4d08      	ldr	r5, [pc, #32]	; (8002088 <_fstat_r+0x28>)
 8002066:	4603      	mov	r3, r0
 8002068:	2600      	movs	r6, #0
 800206a:	4620      	mov	r0, r4
 800206c:	4611      	mov	r1, r2
 800206e:	461c      	mov	r4, r3
 8002070:	602e      	str	r6, [r5, #0]
 8002072:	f003 fefe 	bl	8005e72 <_fstat>
 8002076:	1c43      	adds	r3, r0, #1
 8002078:	d000      	beq.n	800207c <_fstat_r+0x1c>
 800207a:	bd70      	pop	{r4, r5, r6, pc}
 800207c:	682b      	ldr	r3, [r5, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0fb      	beq.n	800207a <_fstat_r+0x1a>
 8002082:	6023      	str	r3, [r4, #0]
 8002084:	bd70      	pop	{r4, r5, r6, pc}
 8002086:	bf00      	nop
 8002088:	20000114 	.word	0x20000114

0800208c <_isatty_r>:
 800208c:	b538      	push	{r3, r4, r5, lr}
 800208e:	4d07      	ldr	r5, [pc, #28]	; (80020ac <_isatty_r+0x20>)
 8002090:	2200      	movs	r2, #0
 8002092:	4604      	mov	r4, r0
 8002094:	4608      	mov	r0, r1
 8002096:	602a      	str	r2, [r5, #0]
 8002098:	f003 fef0 	bl	8005e7c <_isatty>
 800209c:	1c43      	adds	r3, r0, #1
 800209e:	d000      	beq.n	80020a2 <_isatty_r+0x16>
 80020a0:	bd38      	pop	{r3, r4, r5, pc}
 80020a2:	682b      	ldr	r3, [r5, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0fb      	beq.n	80020a0 <_isatty_r+0x14>
 80020a8:	6023      	str	r3, [r4, #0]
 80020aa:	bd38      	pop	{r3, r4, r5, pc}
 80020ac:	20000114 	.word	0x20000114

080020b0 <_lseek_r>:
 80020b0:	b538      	push	{r3, r4, r5, lr}
 80020b2:	460c      	mov	r4, r1
 80020b4:	4d08      	ldr	r5, [pc, #32]	; (80020d8 <_lseek_r+0x28>)
 80020b6:	4684      	mov	ip, r0
 80020b8:	4611      	mov	r1, r2
 80020ba:	4620      	mov	r0, r4
 80020bc:	461a      	mov	r2, r3
 80020be:	2300      	movs	r3, #0
 80020c0:	602b      	str	r3, [r5, #0]
 80020c2:	4664      	mov	r4, ip
 80020c4:	f003 fedc 	bl	8005e80 <_lseek>
 80020c8:	1c43      	adds	r3, r0, #1
 80020ca:	d000      	beq.n	80020ce <_lseek_r+0x1e>
 80020cc:	bd38      	pop	{r3, r4, r5, pc}
 80020ce:	682b      	ldr	r3, [r5, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0fb      	beq.n	80020cc <_lseek_r+0x1c>
 80020d4:	6023      	str	r3, [r4, #0]
 80020d6:	bd38      	pop	{r3, r4, r5, pc}
 80020d8:	20000114 	.word	0x20000114

080020dc <__malloc_lock>:
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop

080020e0 <__malloc_unlock>:
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop

080020e4 <_malloc_usable_size_r>:
 80020e4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80020e8:	2800      	cmp	r0, #0
 80020ea:	f1a0 0004 	sub.w	r0, r0, #4
 80020ee:	bfbc      	itt	lt
 80020f0:	580b      	ldrlt	r3, [r1, r0]
 80020f2:	18c0      	addlt	r0, r0, r3
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop

080020f8 <_read_r>:
 80020f8:	b538      	push	{r3, r4, r5, lr}
 80020fa:	460c      	mov	r4, r1
 80020fc:	4d08      	ldr	r5, [pc, #32]	; (8002120 <_read_r+0x28>)
 80020fe:	4684      	mov	ip, r0
 8002100:	4611      	mov	r1, r2
 8002102:	4620      	mov	r0, r4
 8002104:	461a      	mov	r2, r3
 8002106:	2300      	movs	r3, #0
 8002108:	602b      	str	r3, [r5, #0]
 800210a:	4664      	mov	r4, ip
 800210c:	f003 fe90 	bl	8005e30 <_read>
 8002110:	1c43      	adds	r3, r0, #1
 8002112:	d000      	beq.n	8002116 <_read_r+0x1e>
 8002114:	bd38      	pop	{r3, r4, r5, pc}
 8002116:	682b      	ldr	r3, [r5, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0fb      	beq.n	8002114 <_read_r+0x1c>
 800211c:	6023      	str	r3, [r4, #0]
 800211e:	bd38      	pop	{r3, r4, r5, pc}
 8002120:	20000114 	.word	0x20000114

08002124 <_gettimeofday>:
 8002124:	4b02      	ldr	r3, [pc, #8]	; (8002130 <_gettimeofday+0xc>)
 8002126:	2258      	movs	r2, #88	; 0x58
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800212e:	4770      	bx	lr
 8002130:	20000114 	.word	0x20000114

08002134 <get_sts_mnth>:
uint16_t get_sts_mnth (uint16_t cipher, uint8_t threshold, uint8_t shift_val)
{
    uint32_t  value;
    uint16_t  mod_val;

    value = cipher* (uint32_t)threshold;
 8002134:	fb01 f000 	mul.w	r0, r1, r0
    if (shift_val == 3)
 8002138:	2a03      	cmp	r2, #3
 800213a:	d00a      	beq.n	8002152 <get_sts_mnth+0x1e>
    {
        value *= SQRT_FACTOR;//Factor to sqrt(2)
        value >>= SQRT_SHIFT_VAL;
    }

    mod_val = value % MOD_VALUE+ HALF_MOD;
 800213c:	f3c0 030a 	ubfx	r3, r0, #0, #11
 8002140:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    value >>= SHIFT_VALUE;
 8002144:	0ac0      	lsrs	r0, r0, #11
    /* Check if modulo greater than MOD_VALUE, if yes add 1 */
    if (mod_val >= MOD_VALUE)
 8002146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800214a:	d300      	bcc.n	800214e <get_sts_mnth+0x1a>
        value += 1;
 800214c:	3001      	adds	r0, #1

    return (uint16_t)value;
}
 800214e:	b280      	uxth	r0, r0
 8002150:	4770      	bx	lr
        value *= SQRT_FACTOR;//Factor to sqrt(2)
 8002152:	21b5      	movs	r1, #181	; 0xb5
 8002154:	fb01 f000 	mul.w	r0, r1, r0
        value >>= SQRT_SHIFT_VAL;
 8002158:	09c0      	lsrs	r0, r0, #7
 800215a:	e7ef      	b.n	800213c <get_sts_mnth+0x8>

0800215c <dwt_generatecrc8>:
{
 800215c:	b500      	push	{lr}
 800215e:	4686      	mov	lr, r0
 8002160:	4610      	mov	r0, r2
    for (byte = 0; byte < len; ++byte)
 8002162:	2300      	movs	r3, #0
 8002164:	e007      	b.n	8002176 <dwt_generatecrc8+0x1a>
        data = byteArray[byte] ^ crcRemainderInit;
 8002166:	f81e c003 	ldrb.w	ip, [lr, r3]
 800216a:	ea8c 0c00 	eor.w	ip, ip, r0
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 800216e:	4a04      	ldr	r2, [pc, #16]	; (8002180 <dwt_generatecrc8+0x24>)
 8002170:	f812 000c 	ldrb.w	r0, [r2, ip]
    for (byte = 0; byte < len; ++byte)
 8002174:	3301      	adds	r3, #1
 8002176:	428b      	cmp	r3, r1
 8002178:	dbf5      	blt.n	8002166 <dwt_generatecrc8+0xa>
}
 800217a:	f85d fb04 	ldr.w	pc, [sp], #4
 800217e:	bf00      	nop
 8002180:	20000158 	.word	0x20000158

08002184 <dwt_xfer3000>:
{
 8002184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002186:	b085      	sub	sp, #20
 8002188:	4606      	mov	r6, r0
 800218a:	4614      	mov	r4, r2
 800218c:	461d      	mov	r5, r3
 800218e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    uint16_t reg_file     = 0x1F & ((regFileID + indx) >> 16);
 8002192:	1808      	adds	r0, r1, r0
 8002194:	f3c0 4004 	ubfx	r0, r0, #16, #5
    uint16_t reg_offset   = 0x7F &  (regFileID + indx);
 8002198:	198b      	adds	r3, r1, r6
    assert(length       < 0x3100);
 800219a:	f5b4 5f44 	cmp.w	r4, #12544	; 0x3100
 800219e:	d246      	bcs.n	800222e <dwt_xfer3000+0xaa>
 80021a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    assert(mode == DW3000_SPI_WR_BIT ||\
 80021a4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80021a8:	d00c      	beq.n	80021c4 <dwt_xfer3000+0x40>
 80021aa:	b15a      	cbz	r2, 80021c4 <dwt_xfer3000+0x40>
 80021ac:	f248 0101 	movw	r1, #32769	; 0x8001
 80021b0:	428a      	cmp	r2, r1
 80021b2:	d007      	beq.n	80021c4 <dwt_xfer3000+0x40>
 80021b4:	f248 0102 	movw	r1, #32770	; 0x8002
 80021b8:	428a      	cmp	r2, r1
 80021ba:	d003      	beq.n	80021c4 <dwt_xfer3000+0x40>
 80021bc:	f248 0103 	movw	r1, #32771	; 0x8003
 80021c0:	428a      	cmp	r2, r1
 80021c2:	d13a      	bne.n	800223a <dwt_xfer3000+0xb6>
    addr = (reg_file << 9) | (reg_offset << 2);
 80021c4:	0099      	lsls	r1, r3, #2
 80021c6:	ea41 2c40 	orr.w	ip, r1, r0, lsl #9
 80021ca:	4661      	mov	r1, ip
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 80021cc:	4311      	orrs	r1, r2
 80021ce:	0a09      	lsrs	r1, r1, #8
 80021d0:	f88d 100c 	strb.w	r1, [sp, #12]
    header[1] = (uint8_t)(addr | (mode & 0x03));// & 0xFF; //EAM: subaddr[5:0]+ R/W/AND_OR
 80021d4:	f002 0003 	and.w	r0, r2, #3
 80021d8:	ea40 000c 	orr.w	r0, r0, ip
 80021dc:	f88d 000d 	strb.w	r0, [sp, #13]
    if (/*reg_offset == 0 && */length == 0)
 80021e0:	2c00      	cmp	r4, #0
 80021e2:	d136      	bne.n	8002252 <dwt_xfer3000+0xce>
        assert(mode == DW3000_SPI_WR_BIT);
 80021e4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80021e8:	d12d      	bne.n	8002246 <dwt_xfer3000+0xc2>
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 80021ea:	0073      	lsls	r3, r6, #1
 80021ec:	f063 037e 	orn	r3, r3, #126	; 0x7e
 80021f0:	f88d 300c 	strb.w	r3, [sp, #12]
        cnt = 1;
 80021f4:	2701      	movs	r7, #1
    switch (mode)
 80021f6:	2a00      	cmp	r2, #0
 80021f8:	d041      	beq.n	800227e <dwt_xfer3000+0xfa>
 80021fa:	f482 4100 	eor.w	r1, r2, #32768	; 0x8000
 80021fe:	2903      	cmp	r1, #3
 8002200:	d864      	bhi.n	80022cc <dwt_xfer3000+0x148>
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002202:	4b33      	ldr	r3, [pc, #204]	; (80022d0 <dwt_xfer3000+0x14c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	7d1b      	ldrb	r3, [r3, #20]
 8002208:	b393      	cbz	r3, 8002270 <dwt_xfer3000+0xec>
            crc8 = dwt_generatecrc8(header, cnt, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	4639      	mov	r1, r7
 800220e:	a803      	add	r0, sp, #12
 8002210:	f7ff ffa4 	bl	800215c <dwt_generatecrc8>
 8002214:	4602      	mov	r2, r0
            crc8 = dwt_generatecrc8(buffer, length, crc8);
 8002216:	4621      	mov	r1, r4
 8002218:	4628      	mov	r0, r5
 800221a:	f7ff ff9f 	bl	800215c <dwt_generatecrc8>
            writetospiwithcrc(cnt, header, length, buffer, crc8);
 800221e:	9000      	str	r0, [sp, #0]
 8002220:	462b      	mov	r3, r5
 8002222:	4622      	mov	r2, r4
 8002224:	a903      	add	r1, sp, #12
 8002226:	4638      	mov	r0, r7
 8002228:	f001 f842 	bl	80032b0 <writetospiwithcrc>
 800222c:	e032      	b.n	8002294 <dwt_xfer3000+0x110>
    assert(length       < 0x3100);
 800222e:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <dwt_xfer3000+0x150>)
 8002230:	4a29      	ldr	r2, [pc, #164]	; (80022d8 <dwt_xfer3000+0x154>)
 8002232:	21d5      	movs	r1, #213	; 0xd5
 8002234:	4829      	ldr	r0, [pc, #164]	; (80022dc <dwt_xfer3000+0x158>)
 8002236:	f7fe f807 	bl	8000248 <__assert_func>
    assert(mode == DW3000_SPI_WR_BIT ||\
 800223a:	4b29      	ldr	r3, [pc, #164]	; (80022e0 <dwt_xfer3000+0x15c>)
 800223c:	4a26      	ldr	r2, [pc, #152]	; (80022d8 <dwt_xfer3000+0x154>)
 800223e:	21d6      	movs	r1, #214	; 0xd6
 8002240:	4826      	ldr	r0, [pc, #152]	; (80022dc <dwt_xfer3000+0x158>)
 8002242:	f7fe f801 	bl	8000248 <__assert_func>
        assert(mode == DW3000_SPI_WR_BIT);
 8002246:	4b27      	ldr	r3, [pc, #156]	; (80022e4 <dwt_xfer3000+0x160>)
 8002248:	4a23      	ldr	r2, [pc, #140]	; (80022d8 <dwt_xfer3000+0x154>)
 800224a:	21e8      	movs	r1, #232	; 0xe8
 800224c:	4823      	ldr	r0, [pc, #140]	; (80022dc <dwt_xfer3000+0x158>)
 800224e:	f7fd fffb 	bl	8000248 <__assert_func>
    else if (reg_offset == 0 /*&& length > 0*/ && (mode == DW3000_SPI_WR_BIT || mode == DW3000_SPI_RD_BIT))
 8002252:	b91b      	cbnz	r3, 800225c <dwt_xfer3000+0xd8>
 8002254:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002258:	d006      	beq.n	8002268 <dwt_xfer3000+0xe4>
 800225a:	b13a      	cbz	r2, 800226c <dwt_xfer3000+0xe8>
        header[0] |= DW3000_SPI_EAMRW;
 800225c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002260:	f88d 100c 	strb.w	r1, [sp, #12]
        cnt = 2;
 8002264:	2702      	movs	r7, #2
 8002266:	e7c6      	b.n	80021f6 <dwt_xfer3000+0x72>
        cnt = 1;
 8002268:	2701      	movs	r7, #1
 800226a:	e7c4      	b.n	80021f6 <dwt_xfer3000+0x72>
 800226c:	2701      	movs	r7, #1
 800226e:	e7c2      	b.n	80021f6 <dwt_xfer3000+0x72>
            writetospi(cnt, header, length, buffer);
 8002270:	462b      	mov	r3, r5
 8002272:	4622      	mov	r2, r4
 8002274:	a903      	add	r1, sp, #12
 8002276:	4638      	mov	r0, r7
 8002278:	f001 f850 	bl	800331c <writetospi>
 800227c:	e00a      	b.n	8002294 <dwt_xfer3000+0x110>
            readfromspi(cnt, header, length, buffer);
 800227e:	462b      	mov	r3, r5
 8002280:	4622      	mov	r2, r4
 8002282:	a903      	add	r1, sp, #12
 8002284:	4638      	mov	r0, r7
 8002286:	f001 f87b 	bl	8003380 <readfromspi>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <dwt_xfer3000+0x14c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	7d1b      	ldrb	r3, [r3, #20]
 8002290:	2b02      	cmp	r3, #2
 8002292:	d001      	beq.n	8002298 <dwt_xfer3000+0x114>
} // end dwt_xfer3000()
 8002294:	b005      	add	sp, #20
 8002296:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8002298:	2e18      	cmp	r6, #24
 800229a:	d0fb      	beq.n	8002294 <dwt_xfer3000+0x110>
                crc8 = dwt_generatecrc8(header, cnt, 0);
 800229c:	2200      	movs	r2, #0
 800229e:	4639      	mov	r1, r7
 80022a0:	a803      	add	r0, sp, #12
 80022a2:	f7ff ff5b 	bl	800215c <dwt_generatecrc8>
 80022a6:	4602      	mov	r2, r0
                crc8 = dwt_generatecrc8(buffer, length, crc8);
 80022a8:	4621      	mov	r1, r4
 80022aa:	4628      	mov	r0, r5
 80022ac:	f7ff ff56 	bl	800215c <dwt_generatecrc8>
 80022b0:	4604      	mov	r4, r0
                dwcrc8 = dwt_read8bitoffsetreg(SPICRC_CFG_ID, 0);
 80022b2:	2100      	movs	r1, #0
 80022b4:	2018      	movs	r0, #24
 80022b6:	f000 f8dc 	bl	8002472 <dwt_read8bitoffsetreg>
                if (crc8 != dwcrc8)
 80022ba:	4284      	cmp	r4, r0
 80022bc:	d0ea      	beq.n	8002294 <dwt_xfer3000+0x110>
                    if (pdw3000local->cbSPIRDErr != NULL)
 80022be:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <dwt_xfer3000+0x14c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0e5      	beq.n	8002294 <dwt_xfer3000+0x110>
                        pdw3000local->cbSPIRDErr();
 80022c8:	4798      	blx	r3
 80022ca:	e7e3      	b.n	8002294 <dwt_xfer3000+0x110>
        while(1);
 80022cc:	e7fe      	b.n	80022cc <dwt_xfer3000+0x148>
 80022ce:	bf00      	nop
 80022d0:	2000008c 	.word	0x2000008c
 80022d4:	080060e8 	.word	0x080060e8
 80022d8:	080061c4 	.word	0x080061c4
 80022dc:	080060f8 	.word	0x080060f8
 80022e0:	08006110 	.word	0x08006110
 80022e4:	080061a8 	.word	0x080061a8

080022e8 <dwt_writetodevice>:
{
 80022e8:	b510      	push	{r4, lr}
 80022ea:	b082      	sub	sp, #8
    dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_WR_BIT);
 80022ec:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 80022f0:	9400      	str	r4, [sp, #0]
 80022f2:	f7ff ff47 	bl	8002184 <dwt_xfer3000>
}
 80022f6:	b002      	add	sp, #8
 80022f8:	bd10      	pop	{r4, pc}

080022fa <dwt_write32bitoffsetreg>:
{
 80022fa:	b500      	push	{lr}
 80022fc:	b083      	sub	sp, #12
    for ( j = 0 ; j < 4 ; j++ )
 80022fe:	2300      	movs	r3, #0
 8002300:	e006      	b.n	8002310 <dwt_write32bitoffsetreg+0x16>
        buffer[j] = (uint8_t)regval;
 8002302:	f103 0c08 	add.w	ip, r3, #8
 8002306:	44ec      	add	ip, sp
 8002308:	f80c 2c04 	strb.w	r2, [ip, #-4]
        regval >>= 8 ;
 800230c:	0a12      	lsrs	r2, r2, #8
    for ( j = 0 ; j < 4 ; j++ )
 800230e:	3301      	adds	r3, #1
 8002310:	2b03      	cmp	r3, #3
 8002312:	ddf6      	ble.n	8002302 <dwt_write32bitoffsetreg+0x8>
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002314:	ab01      	add	r3, sp, #4
 8002316:	2204      	movs	r2, #4
 8002318:	b289      	uxth	r1, r1
 800231a:	f7ff ffe5 	bl	80022e8 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 800231e:	b003      	add	sp, #12
 8002320:	f85d fb04 	ldr.w	pc, [sp], #4

08002324 <dwt_disable_rftx_blocks>:
 *
 * No return value
 */
static
void dwt_disable_rftx_blocks(void)
{
 8002324:	b508      	push	{r3, lr}
    dwt_write32bitoffsetreg(RF_CTRL_MASK_ID, 0, 0x00000000);
 8002326:	2200      	movs	r2, #0
 8002328:	4611      	mov	r1, r2
 800232a:	4802      	ldr	r0, [pc, #8]	; (8002334 <dwt_disable_rftx_blocks+0x10>)
 800232c:	f7ff ffe5 	bl	80022fa <dwt_write32bitoffsetreg>
}
 8002330:	bd08      	pop	{r3, pc}
 8002332:	bf00      	nop
 8002334:	00070004 	.word	0x00070004

08002338 <dwt_disable_rf_tx>:
{
 8002338:	b510      	push	{r4, lr}
 800233a:	4604      	mov	r4, r0
    dwt_write32bitoffsetreg(LDO_CTRL_ID, 0, 0x00000000);
 800233c:	2200      	movs	r2, #0
 800233e:	4611      	mov	r1, r2
 8002340:	4808      	ldr	r0, [pc, #32]	; (8002364 <dwt_disable_rf_tx+0x2c>)
 8002342:	f7ff ffda 	bl	80022fa <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(RF_ENABLE_ID, 0, 0x00000000);
 8002346:	2200      	movs	r2, #0
 8002348:	4611      	mov	r1, r2
 800234a:	f44f 20e0 	mov.w	r0, #458752	; 0x70000
 800234e:	f7ff ffd4 	bl	80022fa <dwt_write32bitoffsetreg>
    if (switch_config)
 8002352:	b904      	cbnz	r4, 8002356 <dwt_disable_rf_tx+0x1e>
}
 8002354:	bd10      	pop	{r4, pc}
        dwt_write32bitoffsetreg(RF_SWITCH_CTRL_ID, 0x0, TXRXSWITCH_AUTO);
 8002356:	f04f 52e0 	mov.w	r2, #469762048	; 0x1c000000
 800235a:	2100      	movs	r1, #0
 800235c:	4802      	ldr	r0, [pc, #8]	; (8002368 <dwt_disable_rf_tx+0x30>)
 800235e:	f7ff ffcc 	bl	80022fa <dwt_write32bitoffsetreg>
}
 8002362:	e7f7      	b.n	8002354 <dwt_disable_rf_tx+0x1c>
 8002364:	00070048 	.word	0x00070048
 8002368:	00070014 	.word	0x00070014

0800236c <dwt_write16bitoffsetreg>:
{
 800236c:	b500      	push	{lr}
 800236e:	b083      	sub	sp, #12
    buffer[0] = (uint8_t)regval;
 8002370:	f88d 2004 	strb.w	r2, [sp, #4]
    buffer[1] = regval >> 8 ;
 8002374:	0a12      	lsrs	r2, r2, #8
 8002376:	f88d 2005 	strb.w	r2, [sp, #5]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 800237a:	ab01      	add	r3, sp, #4
 800237c:	2202      	movs	r2, #2
 800237e:	b289      	uxth	r1, r1
 8002380:	f7ff ffb2 	bl	80022e8 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8002384:	b003      	add	sp, #12
 8002386:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800238c <dwt_force_clocks>:
{
 800238c:	b510      	push	{r4, lr}
 800238e:	4604      	mov	r4, r0
    if (clocks == FORCE_CLK_SYS_TX)
 8002390:	2801      	cmp	r0, #1
 8002392:	d002      	beq.n	800239a <dwt_force_clocks+0xe>
    if (clocks == FORCE_CLK_AUTO)
 8002394:	2c05      	cmp	r4, #5
 8002396:	d007      	beq.n	80023a8 <dwt_force_clocks+0x1c>
} // end dwt_force_clocks()
 8002398:	bd10      	pop	{r4, pc}
        dwt_write16bitoffsetreg(CLK_CTRL_ID, 0x0, regvalue0);
 800239a:	f641 0222 	movw	r2, #6178	; 0x1822
 800239e:	2100      	movs	r1, #0
 80023a0:	4805      	ldr	r0, [pc, #20]	; (80023b8 <dwt_force_clocks+0x2c>)
 80023a2:	f7ff ffe3 	bl	800236c <dwt_write16bitoffsetreg>
 80023a6:	e7f5      	b.n	8002394 <dwt_force_clocks+0x8>
        dwt_write16bitoffsetreg(CLK_CTRL_ID, 0x0, (uint16_t) DWT_AUTO_CLKS);  //we only need to restore the low 16 bits as they are the only ones to change as a result of  FORCE_CLK_SYS_TX
 80023a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ac:	2100      	movs	r1, #0
 80023ae:	4802      	ldr	r0, [pc, #8]	; (80023b8 <dwt_force_clocks+0x2c>)
 80023b0:	f7ff ffdc 	bl	800236c <dwt_write16bitoffsetreg>
} // end dwt_force_clocks()
 80023b4:	e7f0      	b.n	8002398 <dwt_force_clocks+0xc>
 80023b6:	bf00      	nop
 80023b8:	00110004 	.word	0x00110004

080023bc <dwt_write8bitoffsetreg>:
{
 80023bc:	b500      	push	{lr}
 80023be:	b083      	sub	sp, #12
 80023c0:	f88d 2007 	strb.w	r2, [sp, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 80023c4:	f10d 0307 	add.w	r3, sp, #7
 80023c8:	2201      	movs	r2, #1
 80023ca:	b289      	uxth	r1, r1
 80023cc:	f7ff ff8c 	bl	80022e8 <dwt_writetodevice>
}
 80023d0:	b003      	add	sp, #12
 80023d2:	f85d fb04 	ldr.w	pc, [sp], #4

080023d6 <dwt_readfromdevice>:
{
 80023d6:	b510      	push	{r4, lr}
 80023d8:	b082      	sub	sp, #8
    dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 80023da:	2400      	movs	r4, #0
 80023dc:	9400      	str	r4, [sp, #0]
 80023de:	f7ff fed1 	bl	8002184 <dwt_xfer3000>
}
 80023e2:	b002      	add	sp, #8
 80023e4:	bd10      	pop	{r4, pc}

080023e6 <dwt_read32bitoffsetreg>:
{
 80023e6:	b500      	push	{lr}
 80023e8:	b083      	sub	sp, #12
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 80023ea:	ab01      	add	r3, sp, #4
 80023ec:	2204      	movs	r2, #4
 80023ee:	b289      	uxth	r1, r1
 80023f0:	f7ff fff1 	bl	80023d6 <dwt_readfromdevice>
    uint32_t  regval = 0 ;
 80023f4:	2000      	movs	r0, #0
    for (j = 3 ; j >= 0 ; j --)
 80023f6:	2303      	movs	r3, #3
 80023f8:	e007      	b.n	800240a <dwt_read32bitoffsetreg+0x24>
        regval = (regval << 8) + buffer[j] ;
 80023fa:	f103 0208 	add.w	r2, r3, #8
 80023fe:	446a      	add	r2, sp
 8002400:	f812 2c04 	ldrb.w	r2, [r2, #-4]
 8002404:	eb02 2000 	add.w	r0, r2, r0, lsl #8
    for (j = 3 ; j >= 0 ; j --)
 8002408:	3b01      	subs	r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	daf5      	bge.n	80023fa <dwt_read32bitoffsetreg+0x14>
} // end dwt_read32bitoffsetreg()
 800240e:	b003      	add	sp, #12
 8002410:	f85d fb04 	ldr.w	pc, [sp], #4

08002414 <_dwt_otpread>:
{
 8002414:	b538      	push	{r3, r4, r5, lr}
 8002416:	4604      	mov	r4, r0
    dwt_write16bitoffsetreg(OTP_CFG_ID, 0, 0x0001);
 8002418:	4d0a      	ldr	r5, [pc, #40]	; (8002444 <_dwt_otpread+0x30>)
 800241a:	2201      	movs	r2, #1
 800241c:	2100      	movs	r1, #0
 800241e:	4628      	mov	r0, r5
 8002420:	f7ff ffa4 	bl	800236c <dwt_write16bitoffsetreg>
    dwt_write16bitoffsetreg(OTP_ADDR_ID, 0, address);
 8002424:	4622      	mov	r2, r4
 8002426:	2100      	movs	r1, #0
 8002428:	4807      	ldr	r0, [pc, #28]	; (8002448 <_dwt_otpread+0x34>)
 800242a:	f7ff ff9f 	bl	800236c <dwt_write16bitoffsetreg>
    dwt_write16bitoffsetreg(OTP_CFG_ID, 0, 0x0002);
 800242e:	2202      	movs	r2, #2
 8002430:	2100      	movs	r1, #0
 8002432:	4628      	mov	r0, r5
 8002434:	f7ff ff9a 	bl	800236c <dwt_write16bitoffsetreg>
    ret_data = dwt_read32bitoffsetreg(OTP_RDATA_ID, 0);
 8002438:	2100      	movs	r1, #0
 800243a:	4804      	ldr	r0, [pc, #16]	; (800244c <_dwt_otpread+0x38>)
 800243c:	f7ff ffd3 	bl	80023e6 <dwt_read32bitoffsetreg>
}
 8002440:	bd38      	pop	{r3, r4, r5, pc}
 8002442:	bf00      	nop
 8002444:	000b0008 	.word	0x000b0008
 8002448:	000b0004 	.word	0x000b0004
 800244c:	000b0010 	.word	0x000b0010

08002450 <dwt_read16bitoffsetreg>:
{
 8002450:	b500      	push	{lr}
 8002452:	b083      	sub	sp, #12
    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8002454:	ab01      	add	r3, sp, #4
 8002456:	2202      	movs	r2, #2
 8002458:	b289      	uxth	r1, r1
 800245a:	f7ff ffbc 	bl	80023d6 <dwt_readfromdevice>
    regval = ((uint16_t)buffer[1] << 8) + buffer[0] ;
 800245e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002462:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8002466:	eb00 2003 	add.w	r0, r0, r3, lsl #8
} // end dwt_read16bitoffsetreg()
 800246a:	b280      	uxth	r0, r0
 800246c:	b003      	add	sp, #12
 800246e:	f85d fb04 	ldr.w	pc, [sp], #4

08002472 <dwt_read8bitoffsetreg>:
{
 8002472:	b500      	push	{lr}
 8002474:	b083      	sub	sp, #12
    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8002476:	f10d 0307 	add.w	r3, sp, #7
 800247a:	2201      	movs	r2, #1
 800247c:	b289      	uxth	r1, r1
 800247e:	f7ff ffaa 	bl	80023d6 <dwt_readfromdevice>
}
 8002482:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002486:	b003      	add	sp, #12
 8002488:	f85d fb04 	ldr.w	pc, [sp], #4

0800248c <dwt_modify32bitoffsetreg>:
{
 800248c:	b500      	push	{lr}
 800248e:	b085      	sub	sp, #20
    buf[0] = (uint8_t)_and;//       &0xFF;
 8002490:	f88d 2008 	strb.w	r2, [sp, #8]
    buf[1] = (uint8_t)(_and>>8);//  &0xFF;
 8002494:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 8002498:	f88d c009 	strb.w	ip, [sp, #9]
    buf[2] = (uint8_t)(_and>>16);// &0xFF;
 800249c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80024a0:	f88d c00a 	strb.w	ip, [sp, #10]
    buf[3] = (uint8_t)(_and>>24);// &0xFF;
 80024a4:	0e12      	lsrs	r2, r2, #24
 80024a6:	f88d 200b 	strb.w	r2, [sp, #11]
    buf[4] = (uint8_t)_or;//        &0xFF;
 80024aa:	f88d 300c 	strb.w	r3, [sp, #12]
    buf[5] = (uint8_t)(_or>>8);//   &0xFF;
 80024ae:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80024b2:	f88d 200d 	strb.w	r2, [sp, #13]
    buf[6] = (uint8_t)(_or>>16);//  &0xFF;
 80024b6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80024ba:	f88d 200e 	strb.w	r2, [sp, #14]
    buf[7] = (uint8_t)(_or>>24);//  &0xFF;
 80024be:	0e1b      	lsrs	r3, r3, #24
 80024c0:	f88d 300f 	strb.w	r3, [sp, #15]
    dwt_xfer3000(regFileID, regOffset, sizeof(buf), buf, DW3000_SPI_AND_OR_32);
 80024c4:	f248 0303 	movw	r3, #32771	; 0x8003
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	ab02      	add	r3, sp, #8
 80024cc:	2208      	movs	r2, #8
 80024ce:	b289      	uxth	r1, r1
 80024d0:	f7ff fe58 	bl	8002184 <dwt_xfer3000>
}
 80024d4:	b005      	add	sp, #20
 80024d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080024dc <_dwt_kick_dgc_on_wakeup>:
{
 80024dc:	b508      	push	{r3, lr}
    if (channel == 5)
 80024de:	2805      	cmp	r0, #5
 80024e0:	d002      	beq.n	80024e8 <_dwt_kick_dgc_on_wakeup+0xc>
    else if (channel == 9)
 80024e2:	2809      	cmp	r0, #9
 80024e4:	d008      	beq.n	80024f8 <_dwt_kick_dgc_on_wakeup+0x1c>
}
 80024e6:	bd08      	pop	{r3, pc}
        dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_DGC_SEL_BIT_MASK),
 80024e8:	2340      	movs	r3, #64	; 0x40
 80024ea:	f46f 5200 	mvn.w	r2, #8192	; 0x2000
 80024ee:	2100      	movs	r1, #0
 80024f0:	4806      	ldr	r0, [pc, #24]	; (800250c <_dwt_kick_dgc_on_wakeup+0x30>)
 80024f2:	f7ff ffcb 	bl	800248c <dwt_modify32bitoffsetreg>
 80024f6:	e7f6      	b.n	80024e6 <_dwt_kick_dgc_on_wakeup+0xa>
        dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_DGC_SEL_BIT_MASK),
 80024f8:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 80024fc:	f46f 5200 	mvn.w	r2, #8192	; 0x2000
 8002500:	2100      	movs	r1, #0
 8002502:	4802      	ldr	r0, [pc, #8]	; (800250c <_dwt_kick_dgc_on_wakeup+0x30>)
 8002504:	f7ff ffc2 	bl	800248c <dwt_modify32bitoffsetreg>
}
 8002508:	e7ed      	b.n	80024e6 <_dwt_kick_dgc_on_wakeup+0xa>
 800250a:	bf00      	nop
 800250c:	000b0008 	.word	0x000b0008

08002510 <dwt_enable_rf_tx>:
{
 8002510:	b570      	push	{r4, r5, r6, lr}
 8002512:	4605      	mov	r5, r0
 8002514:	460c      	mov	r4, r1
    dwt_or32bitoffsetreg(LDO_CTRL_ID, 0, (LDO_CTRL_LDO_VDDHVTX_VREF_BIT_MASK |
 8002516:	4e16      	ldr	r6, [pc, #88]	; (8002570 <dwt_enable_rf_tx+0x60>)
 8002518:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 800251c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002520:	2100      	movs	r1, #0
 8002522:	4630      	mov	r0, r6
 8002524:	f7ff ffb2 	bl	800248c <dwt_modify32bitoffsetreg>
    dwt_or32bitoffsetreg(LDO_CTRL_ID, 0, (LDO_CTRL_LDO_VDDTX2_VREF_BIT_MASK |
 8002528:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 800252c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002530:	2100      	movs	r1, #0
 8002532:	4630      	mov	r0, r6
 8002534:	f7ff ffaa 	bl	800248c <dwt_modify32bitoffsetreg>
    if (channel == SEL_CHANNEL5)
 8002538:	2d05      	cmp	r5, #5
 800253a:	d009      	beq.n	8002550 <dwt_enable_rf_tx+0x40>
        dwt_or32bitoffsetreg(RF_ENABLE_ID, 0, (RF_ENABLE_TX_SW_EN_BIT_MASK
 800253c:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <dwt_enable_rf_tx+0x64>)
 800253e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002542:	2100      	movs	r1, #0
 8002544:	f44f 20e0 	mov.w	r0, #458752	; 0x70000
 8002548:	f7ff ffa0 	bl	800248c <dwt_modify32bitoffsetreg>
    if (switch_control)
 800254c:	b94c      	cbnz	r4, 8002562 <dwt_enable_rf_tx+0x52>
}
 800254e:	bd70      	pop	{r4, r5, r6, pc}
        dwt_or32bitoffsetreg(RF_ENABLE_ID, 0, (RF_ENABLE_TX_SW_EN_BIT_MASK
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <dwt_enable_rf_tx+0x68>)
 8002552:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002556:	2100      	movs	r1, #0
 8002558:	f44f 20e0 	mov.w	r0, #458752	; 0x70000
 800255c:	f7ff ff96 	bl	800248c <dwt_modify32bitoffsetreg>
 8002560:	e7f4      	b.n	800254c <dwt_enable_rf_tx+0x3c>
        dwt_write32bitoffsetreg(RF_SWITCH_CTRL_ID, 0x0, TXRXSWITCH_TX);
 8002562:	4a06      	ldr	r2, [pc, #24]	; (800257c <dwt_enable_rf_tx+0x6c>)
 8002564:	2100      	movs	r1, #0
 8002566:	4806      	ldr	r0, [pc, #24]	; (8002580 <dwt_enable_rf_tx+0x70>)
 8002568:	f7ff fec7 	bl	80022fa <dwt_write32bitoffsetreg>
}
 800256c:	e7ef      	b.n	800254e <dwt_enable_rf_tx+0x3e>
 800256e:	bf00      	nop
 8002570:	00070048 	.word	0x00070048
 8002574:	02001c00 	.word	0x02001c00
 8002578:	02003c00 	.word	0x02003c00
 800257c:	01011100 	.word	0x01011100
 8002580:	00070014 	.word	0x00070014

08002584 <dwt_enable_rftx_blocks>:
{
 8002584:	b508      	push	{r3, lr}
    if (channel == SEL_CHANNEL5)
 8002586:	2805      	cmp	r0, #5
 8002588:	d002      	beq.n	8002590 <dwt_enable_rftx_blocks+0xc>
    else if (channel == SEL_CHANNEL9)
 800258a:	2809      	cmp	r0, #9
 800258c:	d008      	beq.n	80025a0 <dwt_enable_rftx_blocks+0x1c>
}
 800258e:	bd08      	pop	{r3, pc}
        dwt_or32bitoffsetreg(RF_CTRL_MASK_ID, 0, (RF_ENABLE_TX_SW_EN_BIT_MASK
 8002590:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <dwt_enable_rftx_blocks+0x2c>)
 8002592:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002596:	2100      	movs	r1, #0
 8002598:	4806      	ldr	r0, [pc, #24]	; (80025b4 <dwt_enable_rftx_blocks+0x30>)
 800259a:	f7ff ff77 	bl	800248c <dwt_modify32bitoffsetreg>
 800259e:	e7f6      	b.n	800258e <dwt_enable_rftx_blocks+0xa>
        dwt_or32bitoffsetreg(RF_CTRL_MASK_ID, 0, (RF_ENABLE_TX_SW_EN_BIT_MASK
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <dwt_enable_rftx_blocks+0x34>)
 80025a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025a6:	2100      	movs	r1, #0
 80025a8:	4802      	ldr	r0, [pc, #8]	; (80025b4 <dwt_enable_rftx_blocks+0x30>)
 80025aa:	f7ff ff6f 	bl	800248c <dwt_modify32bitoffsetreg>
}
 80025ae:	e7ee      	b.n	800258e <dwt_enable_rftx_blocks+0xa>
 80025b0:	02003c00 	.word	0x02003c00
 80025b4:	00070004 	.word	0x00070004
 80025b8:	02001c00 	.word	0x02001c00

080025bc <dwt_modify16bitoffsetreg>:
{
 80025bc:	b500      	push	{lr}
 80025be:	b085      	sub	sp, #20
    buf[0] = (uint8_t)_and;//       &0xFF;
 80025c0:	f88d 200c 	strb.w	r2, [sp, #12]
    buf[1] = (uint8_t)(_and>>8);//  &0xFF;
 80025c4:	0a12      	lsrs	r2, r2, #8
 80025c6:	f88d 200d 	strb.w	r2, [sp, #13]
    buf[2] = (uint8_t)_or;//        &0xFF;
 80025ca:	f88d 300e 	strb.w	r3, [sp, #14]
    buf[3] = (uint8_t)(_or>>8);//   &0xFF;
 80025ce:	0a1b      	lsrs	r3, r3, #8
 80025d0:	f88d 300f 	strb.w	r3, [sp, #15]
    dwt_xfer3000(regFileID, regOffset, sizeof(buf), buf, DW3000_SPI_AND_OR_16);
 80025d4:	f248 0302 	movw	r3, #32770	; 0x8002
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	ab03      	add	r3, sp, #12
 80025dc:	2204      	movs	r2, #4
 80025de:	b289      	uxth	r1, r1
 80025e0:	f7ff fdd0 	bl	8002184 <dwt_xfer3000>
}
 80025e4:	b005      	add	sp, #20
 80025e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080025ec <_dwt_prog_ldo_and_bias_tune>:
{
 80025ec:	b508      	push	{r3, lr}
    dwt_or16bitoffsetreg(OTP_CFG_ID, 0, LDO_BIAS_KICK);
 80025ee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80025f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025f6:	2100      	movs	r1, #0
 80025f8:	4806      	ldr	r0, [pc, #24]	; (8002614 <_dwt_prog_ldo_and_bias_tune+0x28>)
 80025fa:	f7ff ffdf 	bl	80025bc <dwt_modify16bitoffsetreg>
    dwt_and_or16bitoffsetreg(BIAS_CTRL_ID, 0, (uint16_t)~BIAS_CTRL_BIAS_MASK, pdw3000local->bias_tune);
 80025fe:	4b06      	ldr	r3, [pc, #24]	; (8002618 <_dwt_prog_ldo_and_bias_tune+0x2c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	7a1b      	ldrb	r3, [r3, #8]
 8002604:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002608:	2100      	movs	r1, #0
 800260a:	4804      	ldr	r0, [pc, #16]	; (800261c <_dwt_prog_ldo_and_bias_tune+0x30>)
 800260c:	f7ff ffd6 	bl	80025bc <dwt_modify16bitoffsetreg>
}
 8002610:	bd08      	pop	{r3, pc}
 8002612:	bf00      	nop
 8002614:	000b0008 	.word	0x000b0008
 8002618:	2000008c 	.word	0x2000008c
 800261c:	0011001f 	.word	0x0011001f

08002620 <dwt_modify8bitoffsetreg>:
{
 8002620:	b500      	push	{lr}
 8002622:	b085      	sub	sp, #20
    buf[0] = _and;
 8002624:	f88d 200c 	strb.w	r2, [sp, #12]
    buf[1] = _or;
 8002628:	f88d 300d 	strb.w	r3, [sp, #13]
    dwt_xfer3000(regFileID, regOffset, sizeof(buf),buf, DW3000_SPI_AND_OR_8);
 800262c:	f248 0301 	movw	r3, #32769	; 0x8001
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	ab03      	add	r3, sp, #12
 8002634:	2202      	movs	r2, #2
 8002636:	b289      	uxth	r1, r1
 8002638:	f7ff fda4 	bl	8002184 <dwt_xfer3000>
}
 800263c:	b005      	add	sp, #20
 800263e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002644 <dwt_setdwstate>:
{
 8002644:	b510      	push	{r4, lr}
    if (state == DWT_DW_IDLE) // Set the auto INIT2IDLE bit so that DW3000 enters IDLE mode before switching clocks to system_PLL
 8002646:	2801      	cmp	r0, #1
 8002648:	d017      	beq.n	800267a <dwt_setdwstate+0x36>
    else if(state == DWT_DW_IDLE_RC)  //Change state to IDLE_RC and clear auto INIT2IDLE bit
 800264a:	2802      	cmp	r0, #2
 800264c:	d01f      	beq.n	800268e <dwt_setdwstate+0x4a>
        dwt_or8bitoffsetreg(CLK_CTRL_ID, 0, FORCE_SYSCLK_FOSCDIV4);
 800264e:	2301      	movs	r3, #1
 8002650:	22ff      	movs	r2, #255	; 0xff
 8002652:	2100      	movs	r1, #0
 8002654:	481a      	ldr	r0, [pc, #104]	; (80026c0 <dwt_setdwstate+0x7c>)
 8002656:	f7ff ffe3 	bl	8002620 <dwt_modify8bitoffsetreg>
        dwt_modify32bitoffsetreg(SEQ_CTRL_ID, 0x0, (uint32_t) ~SEQ_CTRL_AINIT2IDLE_BIT_MASK, SEQ_CTRL_FORCE2INIT_BIT_MASK);
 800265a:	4c1a      	ldr	r4, [pc, #104]	; (80026c4 <dwt_setdwstate+0x80>)
 800265c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002660:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002664:	2100      	movs	r1, #0
 8002666:	4620      	mov	r0, r4
 8002668:	f7ff ff10 	bl	800248c <dwt_modify32bitoffsetreg>
        dwt_and8bitoffsetreg(SEQ_CTRL_ID, 0x2, (uint8_t) ~(SEQ_CTRL_FORCE2INIT_BIT_MASK>>16));
 800266c:	2300      	movs	r3, #0
 800266e:	227f      	movs	r2, #127	; 0x7f
 8002670:	2102      	movs	r1, #2
 8002672:	4620      	mov	r0, r4
 8002674:	f7ff ffd4 	bl	8002620 <dwt_modify8bitoffsetreg>
}
 8002678:	bd10      	pop	{r4, pc}
        dwt_force_clocks(FORCE_CLK_AUTO);
 800267a:	2005      	movs	r0, #5
 800267c:	f7ff fe86 	bl	800238c <dwt_force_clocks>
        dwt_or8bitoffsetreg(SEQ_CTRL_ID, 0x01, SEQ_CTRL_AINIT2IDLE_BIT_MASK>>8);
 8002680:	2301      	movs	r3, #1
 8002682:	22ff      	movs	r2, #255	; 0xff
 8002684:	4619      	mov	r1, r3
 8002686:	480f      	ldr	r0, [pc, #60]	; (80026c4 <dwt_setdwstate+0x80>)
 8002688:	f7ff ffca 	bl	8002620 <dwt_modify8bitoffsetreg>
 800268c:	e7f4      	b.n	8002678 <dwt_setdwstate+0x34>
        dwt_or8bitoffsetreg(CLK_CTRL_ID, 0, FORCE_SYSCLK_FOSC);
 800268e:	2303      	movs	r3, #3
 8002690:	22ff      	movs	r2, #255	; 0xff
 8002692:	2100      	movs	r1, #0
 8002694:	480a      	ldr	r0, [pc, #40]	; (80026c0 <dwt_setdwstate+0x7c>)
 8002696:	f7ff ffc3 	bl	8002620 <dwt_modify8bitoffsetreg>
        dwt_modify32bitoffsetreg(SEQ_CTRL_ID, 0x0, (uint32_t) ~SEQ_CTRL_AINIT2IDLE_BIT_MASK, SEQ_CTRL_FORCE2INIT_BIT_MASK);
 800269a:	4c0a      	ldr	r4, [pc, #40]	; (80026c4 <dwt_setdwstate+0x80>)
 800269c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80026a0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80026a4:	2100      	movs	r1, #0
 80026a6:	4620      	mov	r0, r4
 80026a8:	f7ff fef0 	bl	800248c <dwt_modify32bitoffsetreg>
        dwt_and8bitoffsetreg(SEQ_CTRL_ID, 0x2, (uint8_t) ~(SEQ_CTRL_FORCE2INIT_BIT_MASK>>16));
 80026ac:	2300      	movs	r3, #0
 80026ae:	227f      	movs	r2, #127	; 0x7f
 80026b0:	2102      	movs	r1, #2
 80026b2:	4620      	mov	r0, r4
 80026b4:	f7ff ffb4 	bl	8002620 <dwt_modify8bitoffsetreg>
        dwt_force_clocks(FORCE_CLK_AUTO);
 80026b8:	2005      	movs	r0, #5
 80026ba:	f7ff fe67 	bl	800238c <dwt_force_clocks>
 80026be:	e7db      	b.n	8002678 <dwt_setdwstate+0x34>
 80026c0:	00110004 	.word	0x00110004
 80026c4:	00110008 	.word	0x00110008

080026c8 <dwt_readdevid>:
{
 80026c8:	b508      	push	{r3, lr}
    return dwt_read32bitoffsetreg(DEV_ID_ID, 0);
 80026ca:	2100      	movs	r1, #0
 80026cc:	4608      	mov	r0, r1
 80026ce:	f7ff fe8a 	bl	80023e6 <dwt_read32bitoffsetreg>
}
 80026d2:	bd08      	pop	{r3, pc}

080026d4 <dwt_configurestskey>:
{
 80026d4:	b510      	push	{r4, lr}
 80026d6:	4604      	mov	r4, r0
    dwt_write32bitreg(STS_KEY0_ID, pStsKey->key0);
 80026d8:	6802      	ldr	r2, [r0, #0]
 80026da:	2100      	movs	r1, #0
 80026dc:	4809      	ldr	r0, [pc, #36]	; (8002704 <dwt_configurestskey+0x30>)
 80026de:	f7ff fe0c 	bl	80022fa <dwt_write32bitoffsetreg>
    dwt_write32bitreg(STS_KEY1_ID, pStsKey->key1);
 80026e2:	6862      	ldr	r2, [r4, #4]
 80026e4:	2100      	movs	r1, #0
 80026e6:	4808      	ldr	r0, [pc, #32]	; (8002708 <dwt_configurestskey+0x34>)
 80026e8:	f7ff fe07 	bl	80022fa <dwt_write32bitoffsetreg>
    dwt_write32bitreg(STS_KEY2_ID, pStsKey->key2);
 80026ec:	68a2      	ldr	r2, [r4, #8]
 80026ee:	2100      	movs	r1, #0
 80026f0:	4806      	ldr	r0, [pc, #24]	; (800270c <dwt_configurestskey+0x38>)
 80026f2:	f7ff fe02 	bl	80022fa <dwt_write32bitoffsetreg>
    dwt_write32bitreg(STS_KEY3_ID, pStsKey->key3);
 80026f6:	68e2      	ldr	r2, [r4, #12]
 80026f8:	2100      	movs	r1, #0
 80026fa:	4805      	ldr	r0, [pc, #20]	; (8002710 <dwt_configurestskey+0x3c>)
 80026fc:	f7ff fdfd 	bl	80022fa <dwt_write32bitoffsetreg>
}
 8002700:	bd10      	pop	{r4, pc}
 8002702:	bf00      	nop
 8002704:	0002000c 	.word	0x0002000c
 8002708:	00020010 	.word	0x00020010
 800270c:	00020014 	.word	0x00020014
 8002710:	00020018 	.word	0x00020018

08002714 <dwt_configurestsiv>:
{
 8002714:	b510      	push	{r4, lr}
 8002716:	4604      	mov	r4, r0
    dwt_write32bitreg(STS_IV0_ID, pStsIv->iv0);
 8002718:	6802      	ldr	r2, [r0, #0]
 800271a:	2100      	movs	r1, #0
 800271c:	4809      	ldr	r0, [pc, #36]	; (8002744 <dwt_configurestsiv+0x30>)
 800271e:	f7ff fdec 	bl	80022fa <dwt_write32bitoffsetreg>
    dwt_write32bitreg(STS_IV1_ID, pStsIv->iv1);
 8002722:	6862      	ldr	r2, [r4, #4]
 8002724:	2100      	movs	r1, #0
 8002726:	4808      	ldr	r0, [pc, #32]	; (8002748 <dwt_configurestsiv+0x34>)
 8002728:	f7ff fde7 	bl	80022fa <dwt_write32bitoffsetreg>
    dwt_write32bitreg(STS_IV2_ID, pStsIv->iv2);
 800272c:	68a2      	ldr	r2, [r4, #8]
 800272e:	2100      	movs	r1, #0
 8002730:	4806      	ldr	r0, [pc, #24]	; (800274c <dwt_configurestsiv+0x38>)
 8002732:	f7ff fde2 	bl	80022fa <dwt_write32bitoffsetreg>
    dwt_write32bitreg(STS_IV3_ID, pStsIv->iv3);
 8002736:	68e2      	ldr	r2, [r4, #12]
 8002738:	2100      	movs	r1, #0
 800273a:	4805      	ldr	r0, [pc, #20]	; (8002750 <dwt_configurestsiv+0x3c>)
 800273c:	f7ff fddd 	bl	80022fa <dwt_write32bitoffsetreg>
}
 8002740:	bd10      	pop	{r4, pc}
 8002742:	bf00      	nop
 8002744:	0002001c 	.word	0x0002001c
 8002748:	00020020 	.word	0x00020020
 800274c:	00020024 	.word	0x00020024
 8002750:	00020028 	.word	0x00020028

08002754 <dwt_configurestsloadiv>:
{
 8002754:	b508      	push	{r3, lr}
    dwt_or8bitoffsetreg(STS_CTRL_ID, 0, STS_CTRL_LOAD_IV_BIT_MASK);
 8002756:	2301      	movs	r3, #1
 8002758:	22ff      	movs	r2, #255	; 0xff
 800275a:	2100      	movs	r1, #0
 800275c:	4801      	ldr	r0, [pc, #4]	; (8002764 <dwt_configurestsloadiv+0x10>)
 800275e:	f7ff ff5f 	bl	8002620 <dwt_modify8bitoffsetreg>
}
 8002762:	bd08      	pop	{r3, pc}
 8002764:	00020004 	.word	0x00020004

08002768 <dwt_configmrxlut>:
{
 8002768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (channel == 5)
 800276c:	2805      	cmp	r0, #5
 800276e:	d036      	beq.n	80027de <dwt_configmrxlut+0x76>
        lut6 = (uint32_t)CH9_DGC_LUT_6;
 8002770:	4c20      	ldr	r4, [pc, #128]	; (80027f4 <dwt_configmrxlut+0x8c>)
        lut5 = (uint32_t)CH9_DGC_LUT_5;
 8002772:	4625      	mov	r5, r4
        lut4 = (uint32_t)CH9_DGC_LUT_4;
 8002774:	4e20      	ldr	r6, [pc, #128]	; (80027f8 <dwt_configmrxlut+0x90>)
        lut3 = (uint32_t)CH9_DGC_LUT_3;
 8002776:	4f21      	ldr	r7, [pc, #132]	; (80027fc <dwt_configmrxlut+0x94>)
        lut2 = (uint32_t)CH9_DGC_LUT_2;
 8002778:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8002844 <dwt_configmrxlut+0xdc>
        lut1 = (uint32_t)CH9_DGC_LUT_1;
 800277c:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8002848 <dwt_configmrxlut+0xe0>
        lut0 = (uint32_t)CH9_DGC_LUT_0;
 8002780:	4a1f      	ldr	r2, [pc, #124]	; (8002800 <dwt_configmrxlut+0x98>)
    dwt_write32bitoffsetreg(DGC_LUT_0_CFG_ID, 0x0, lut0);
 8002782:	2100      	movs	r1, #0
 8002784:	481f      	ldr	r0, [pc, #124]	; (8002804 <dwt_configmrxlut+0x9c>)
 8002786:	f7ff fdb8 	bl	80022fa <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_1_CFG_ID, 0x0, lut1);
 800278a:	464a      	mov	r2, r9
 800278c:	2100      	movs	r1, #0
 800278e:	481e      	ldr	r0, [pc, #120]	; (8002808 <dwt_configmrxlut+0xa0>)
 8002790:	f7ff fdb3 	bl	80022fa <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_2_CFG_ID, 0x0, lut2);
 8002794:	4642      	mov	r2, r8
 8002796:	2100      	movs	r1, #0
 8002798:	481c      	ldr	r0, [pc, #112]	; (800280c <dwt_configmrxlut+0xa4>)
 800279a:	f7ff fdae 	bl	80022fa <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_3_CFG_ID, 0x0, lut3);
 800279e:	463a      	mov	r2, r7
 80027a0:	2100      	movs	r1, #0
 80027a2:	481b      	ldr	r0, [pc, #108]	; (8002810 <dwt_configmrxlut+0xa8>)
 80027a4:	f7ff fda9 	bl	80022fa <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_4_CFG_ID, 0x0, lut4);
 80027a8:	4632      	mov	r2, r6
 80027aa:	2100      	movs	r1, #0
 80027ac:	4819      	ldr	r0, [pc, #100]	; (8002814 <dwt_configmrxlut+0xac>)
 80027ae:	f7ff fda4 	bl	80022fa <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_5_CFG_ID, 0x0, lut5);
 80027b2:	462a      	mov	r2, r5
 80027b4:	2100      	movs	r1, #0
 80027b6:	4818      	ldr	r0, [pc, #96]	; (8002818 <dwt_configmrxlut+0xb0>)
 80027b8:	f7ff fd9f 	bl	80022fa <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_6_CFG_ID, 0x0, lut6);
 80027bc:	4622      	mov	r2, r4
 80027be:	2100      	movs	r1, #0
 80027c0:	4816      	ldr	r0, [pc, #88]	; (800281c <dwt_configmrxlut+0xb4>)
 80027c2:	f7ff fd9a 	bl	80022fa <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_CFG0_ID, 0x0, DWT_DGC_CFG0);
 80027c6:	4a16      	ldr	r2, [pc, #88]	; (8002820 <dwt_configmrxlut+0xb8>)
 80027c8:	2100      	movs	r1, #0
 80027ca:	4816      	ldr	r0, [pc, #88]	; (8002824 <dwt_configmrxlut+0xbc>)
 80027cc:	f7ff fd95 	bl	80022fa <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_CFG1_ID, 0x0, DWT_DGC_CFG1);
 80027d0:	4a15      	ldr	r2, [pc, #84]	; (8002828 <dwt_configmrxlut+0xc0>)
 80027d2:	2100      	movs	r1, #0
 80027d4:	4815      	ldr	r0, [pc, #84]	; (800282c <dwt_configmrxlut+0xc4>)
 80027d6:	f7ff fd90 	bl	80022fa <dwt_write32bitoffsetreg>
}
 80027da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        lut6 = (uint32_t)CH5_DGC_LUT_6;
 80027de:	4c14      	ldr	r4, [pc, #80]	; (8002830 <dwt_configmrxlut+0xc8>)
        lut5 = (uint32_t)CH5_DGC_LUT_5;
 80027e0:	4d14      	ldr	r5, [pc, #80]	; (8002834 <dwt_configmrxlut+0xcc>)
        lut4 = (uint32_t)CH5_DGC_LUT_4;
 80027e2:	4e15      	ldr	r6, [pc, #84]	; (8002838 <dwt_configmrxlut+0xd0>)
        lut3 = (uint32_t)CH5_DGC_LUT_3;
 80027e4:	4f15      	ldr	r7, [pc, #84]	; (800283c <dwt_configmrxlut+0xd4>)
        lut2 = (uint32_t)CH5_DGC_LUT_2;
 80027e6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800284c <dwt_configmrxlut+0xe4>
        lut1 = (uint32_t)CH5_DGC_LUT_1;
 80027ea:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8002850 <dwt_configmrxlut+0xe8>
        lut0 = (uint32_t)CH5_DGC_LUT_0;
 80027ee:	4a14      	ldr	r2, [pc, #80]	; (8002840 <dwt_configmrxlut+0xd8>)
 80027f0:	e7c7      	b.n	8002782 <dwt_configmrxlut+0x1a>
 80027f2:	bf00      	nop
 80027f4:	0002afb5 	.word	0x0002afb5
 80027f8:	0002af7d 	.word	0x0002af7d
 80027fc:	0002af3e 	.word	0x0002af3e
 8002800:	0002a8fe 	.word	0x0002a8fe
 8002804:	00030038 	.word	0x00030038
 8002808:	0003003c 	.word	0x0003003c
 800280c:	00030040 	.word	0x00030040
 8002810:	00030044 	.word	0x00030044
 8002814:	00030048 	.word	0x00030048
 8002818:	0003004c 	.word	0x0003004c
 800281c:	00030050 	.word	0x00030050
 8002820:	10000240 	.word	0x10000240
 8002824:	0003001c 	.word	0x0003001c
 8002828:	1b6da489 	.word	0x1b6da489
 800282c:	00030020 	.word	0x00030020
 8002830:	0001cff5 	.word	0x0001cff5
 8002834:	0001cfb5 	.word	0x0001cfb5
 8002838:	0001cf36 	.word	0x0001cf36
 800283c:	0001c77e 	.word	0x0001c77e
 8002840:	0001c0fd 	.word	0x0001c0fd
 8002844:	0002a5fe 	.word	0x0002a5fe
 8002848:	0002ac36 	.word	0x0002ac36
 800284c:	0001c6be 	.word	0x0001c6be
 8002850:	0001c43e 	.word	0x0001c43e

08002854 <dwt_run_pgfcal>:
{
 8002854:	b538      	push	{r3, r4, r5, lr}
    dwt_write32bitoffsetreg(RX_CAL_CFG_ID, 0x0, data);
 8002856:	4c26      	ldr	r4, [pc, #152]	; (80028f0 <dwt_run_pgfcal+0x9c>)
 8002858:	4a26      	ldr	r2, [pc, #152]	; (80028f4 <dwt_run_pgfcal+0xa0>)
 800285a:	2100      	movs	r1, #0
 800285c:	4620      	mov	r0, r4
 800285e:	f7ff fd4c 	bl	80022fa <dwt_write32bitoffsetreg>
    dwt_or8bitoffsetreg(RX_CAL_CFG_ID, 0x0, RX_CAL_CFG_CAL_EN_BIT_MASK);
 8002862:	2310      	movs	r3, #16
 8002864:	22ff      	movs	r2, #255	; 0xff
 8002866:	2100      	movs	r1, #0
 8002868:	4620      	mov	r0, r4
 800286a:	f7ff fed9 	bl	8002620 <dwt_modify8bitoffsetreg>
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PGF;cnt++)
 800286e:	2400      	movs	r4, #0
 8002870:	e001      	b.n	8002876 <dwt_run_pgfcal+0x22>
 8002872:	3401      	adds	r4, #1
 8002874:	b2e4      	uxtb	r4, r4
 8002876:	2c02      	cmp	r4, #2
 8002878:	d80a      	bhi.n	8002890 <dwt_run_pgfcal+0x3c>
        deca_usleep(DELAY_20uUSec);
 800287a:	2014      	movs	r0, #20
 800287c:	f000 fd14 	bl	80032a8 <deca_usleep>
        if(dwt_read8bitoffsetreg(RX_CAL_STS_ID, 0x0) == 1)
 8002880:	2100      	movs	r1, #0
 8002882:	481d      	ldr	r0, [pc, #116]	; (80028f8 <dwt_run_pgfcal+0xa4>)
 8002884:	f7ff fdf5 	bl	8002472 <dwt_read8bitoffsetreg>
 8002888:	2801      	cmp	r0, #1
 800288a:	d1f2      	bne.n	8002872 <dwt_run_pgfcal+0x1e>
            flag=0;
 800288c:	2300      	movs	r3, #0
 800288e:	e000      	b.n	8002892 <dwt_run_pgfcal+0x3e>
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PGF;cnt++)
 8002890:	2301      	movs	r3, #1
    if (flag)
 8002892:	bb1b      	cbnz	r3, 80028dc <dwt_run_pgfcal+0x88>
    int result = DWT_SUCCESS;
 8002894:	2500      	movs	r5, #0
    dwt_write8bitoffsetreg(RX_CAL_CFG_ID, 0x0, 0);
 8002896:	4c16      	ldr	r4, [pc, #88]	; (80028f0 <dwt_run_pgfcal+0x9c>)
 8002898:	2200      	movs	r2, #0
 800289a:	4611      	mov	r1, r2
 800289c:	4620      	mov	r0, r4
 800289e:	f7ff fd8d 	bl	80023bc <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(RX_CAL_STS_ID, 0x0, 1); //clear the status
 80028a2:	2201      	movs	r2, #1
 80028a4:	2100      	movs	r1, #0
 80028a6:	4814      	ldr	r0, [pc, #80]	; (80028f8 <dwt_run_pgfcal+0xa4>)
 80028a8:	f7ff fd88 	bl	80023bc <dwt_write8bitoffsetreg>
    dwt_or8bitoffsetreg(RX_CAL_CFG_ID, 0x2, 0x1); //enable reading
 80028ac:	2301      	movs	r3, #1
 80028ae:	22ff      	movs	r2, #255	; 0xff
 80028b0:	2102      	movs	r1, #2
 80028b2:	4620      	mov	r0, r4
 80028b4:	f7ff feb4 	bl	8002620 <dwt_modify8bitoffsetreg>
    val = dwt_read32bitoffsetreg(RX_CAL_RESI_ID, 0x0);
 80028b8:	2100      	movs	r1, #0
 80028ba:	4810      	ldr	r0, [pc, #64]	; (80028fc <dwt_run_pgfcal+0xa8>)
 80028bc:	f7ff fd93 	bl	80023e6 <dwt_read32bitoffsetreg>
    if (val == ERR_RX_CAL_FAIL)
 80028c0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80028c4:	4298      	cmp	r0, r3
 80028c6:	d00c      	beq.n	80028e2 <dwt_run_pgfcal+0x8e>
    val = dwt_read32bitoffsetreg(RX_CAL_RESQ_ID, 0x0);
 80028c8:	2100      	movs	r1, #0
 80028ca:	480d      	ldr	r0, [pc, #52]	; (8002900 <dwt_run_pgfcal+0xac>)
 80028cc:	f7ff fd8b 	bl	80023e6 <dwt_read32bitoffsetreg>
    if (val == ERR_RX_CAL_FAIL)
 80028d0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80028d4:	4298      	cmp	r0, r3
 80028d6:	d007      	beq.n	80028e8 <dwt_run_pgfcal+0x94>
}
 80028d8:	4628      	mov	r0, r5
 80028da:	bd38      	pop	{r3, r4, r5, pc}
        result = DWT_ERROR;
 80028dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80028e0:	e7d9      	b.n	8002896 <dwt_run_pgfcal+0x42>
        result = DWT_ERROR;
 80028e2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80028e6:	e7ef      	b.n	80028c8 <dwt_run_pgfcal+0x74>
        result = DWT_ERROR;
 80028e8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    return result;
 80028ec:	e7f4      	b.n	80028d8 <dwt_run_pgfcal+0x84>
 80028ee:	bf00      	nop
 80028f0:	0004000c 	.word	0x0004000c
 80028f4:	00020001 	.word	0x00020001
 80028f8:	00040020 	.word	0x00040020
 80028fc:	00040014 	.word	0x00040014
 8002900:	0004001c 	.word	0x0004001c

08002904 <dwt_pgf_cal>:
{
 8002904:	b570      	push	{r4, r5, r6, lr}
 8002906:	4604      	mov	r4, r0
 8002908:	2600      	movs	r6, #0
    if (ldoen == 1)
 800290a:	2801      	cmp	r0, #1
 800290c:	d006      	beq.n	800291c <dwt_pgf_cal+0x18>
    temp = dwt_run_pgfcal();
 800290e:	f7ff ffa1 	bl	8002854 <dwt_run_pgfcal>
 8002912:	4605      	mov	r5, r0
    if (ldoen == 1)
 8002914:	2c01      	cmp	r4, #1
 8002916:	d010      	beq.n	800293a <dwt_pgf_cal+0x36>
}
 8002918:	4628      	mov	r0, r5
 800291a:	bd70      	pop	{r4, r5, r6, pc}
        val = dwt_read16bitoffsetreg(LDO_CTRL_ID, 0);
 800291c:	4d0a      	ldr	r5, [pc, #40]	; (8002948 <dwt_pgf_cal+0x44>)
 800291e:	4631      	mov	r1, r6
 8002920:	4628      	mov	r0, r5
 8002922:	f7ff fd95 	bl	8002450 <dwt_read16bitoffsetreg>
 8002926:	4606      	mov	r6, r0
        dwt_or16bitoffsetreg(LDO_CTRL_ID, 0, (
 8002928:	f240 1305 	movw	r3, #261	; 0x105
 800292c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002930:	2100      	movs	r1, #0
 8002932:	4628      	mov	r0, r5
 8002934:	f7ff fe42 	bl	80025bc <dwt_modify16bitoffsetreg>
 8002938:	e7e9      	b.n	800290e <dwt_pgf_cal+0xa>
        dwt_and16bitoffsetreg(LDO_CTRL_ID, 0, val); // restore LDO values
 800293a:	2300      	movs	r3, #0
 800293c:	4632      	mov	r2, r6
 800293e:	4619      	mov	r1, r3
 8002940:	4801      	ldr	r0, [pc, #4]	; (8002948 <dwt_pgf_cal+0x44>)
 8002942:	f7ff fe3b 	bl	80025bc <dwt_modify16bitoffsetreg>
    return temp;
 8002946:	e7e7      	b.n	8002918 <dwt_pgf_cal+0x14>
 8002948:	00070048 	.word	0x00070048

0800294c <dwt_setrxantennadelay>:
{
 800294c:	b508      	push	{r3, lr}
 800294e:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(CIA_CONF_ID, 0, rxDelay);
 8002950:	2100      	movs	r1, #0
 8002952:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 8002956:	f7ff fd09 	bl	800236c <dwt_write16bitoffsetreg>
}
 800295a:	bd08      	pop	{r3, pc}

0800295c <dwt_settxantennadelay>:
{
 800295c:	b508      	push	{r3, lr}
 800295e:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(TX_ANTD_ID, 0, txDelay);
 8002960:	2100      	movs	r1, #0
 8002962:	4802      	ldr	r0, [pc, #8]	; (800296c <dwt_settxantennadelay+0x10>)
 8002964:	f7ff fd02 	bl	800236c <dwt_write16bitoffsetreg>
}
 8002968:	bd08      	pop	{r3, pc}
 800296a:	bf00      	nop
 800296c:	00010004 	.word	0x00010004

08002970 <dwt_writetxdata>:
    if ((txBufferOffset + txDataLength) < TX_BUFFER_MAX_LEN)
 8002970:	1813      	adds	r3, r2, r0
 8002972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002976:	da20      	bge.n	80029ba <dwt_writetxdata+0x4a>
{
 8002978:	b570      	push	{r4, r5, r6, lr}
 800297a:	4605      	mov	r5, r0
 800297c:	460e      	mov	r6, r1
 800297e:	4614      	mov	r4, r2
        if(txBufferOffset <= REG_DIRECT_OFFSET_MAX_LEN)
 8002980:	2a7f      	cmp	r2, #127	; 0x7f
 8002982:	d808      	bhi.n	8002996 <dwt_writetxdata+0x26>
            dwt_writetodevice(TX_BUFFER_ID, txBufferOffset, txDataLength, txDataBytes);
 8002984:	460b      	mov	r3, r1
 8002986:	4602      	mov	r2, r0
 8002988:	4621      	mov	r1, r4
 800298a:	f44f 10a0 	mov.w	r0, #1310720	; 0x140000
 800298e:	f7ff fcab 	bl	80022e8 <dwt_writetodevice>
        return DWT_SUCCESS;
 8002992:	2000      	movs	r0, #0
} // end dwt_writetxdata()
 8002994:	bd70      	pop	{r4, r5, r6, pc}
            dwt_write32bitreg(INDIRECT_ADDR_A_ID, (TX_BUFFER_ID >> 16) );
 8002996:	2214      	movs	r2, #20
 8002998:	2100      	movs	r1, #0
 800299a:	4809      	ldr	r0, [pc, #36]	; (80029c0 <dwt_writetxdata+0x50>)
 800299c:	f7ff fcad 	bl	80022fa <dwt_write32bitoffsetreg>
            dwt_write32bitreg(ADDR_OFFSET_A_ID,   txBufferOffset);
 80029a0:	4622      	mov	r2, r4
 80029a2:	2100      	movs	r1, #0
 80029a4:	4807      	ldr	r0, [pc, #28]	; (80029c4 <dwt_writetxdata+0x54>)
 80029a6:	f7ff fca8 	bl	80022fa <dwt_write32bitoffsetreg>
            dwt_writetodevice(INDIRECT_POINTER_A_ID, 0, txDataLength, txDataBytes);
 80029aa:	4633      	mov	r3, r6
 80029ac:	462a      	mov	r2, r5
 80029ae:	2100      	movs	r1, #0
 80029b0:	f44f 10e8 	mov.w	r0, #1900544	; 0x1d0000
 80029b4:	f7ff fc98 	bl	80022e8 <dwt_writetodevice>
 80029b8:	e7eb      	b.n	8002992 <dwt_writetxdata+0x22>
        return DWT_ERROR;
 80029ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
} // end dwt_writetxdata()
 80029be:	4770      	bx	lr
 80029c0:	001f0004 	.word	0x001f0004
 80029c4:	001f0008 	.word	0x001f0008

080029c8 <dwt_writetxfctrl>:
{
 80029c8:	b508      	push	{r3, lr}
    if(txBufferOffset <= 127)
 80029ca:	297f      	cmp	r1, #127	; 0x7f
 80029cc:	d809      	bhi.n	80029e2 <dwt_writetxfctrl+0x1a>
        reg32 = txFrameLength | ((uint32_t)(txBufferOffset) << TX_FCTRL_TXB_OFFSET_BIT_OFFSET) | ((uint32_t)ranging << TX_FCTRL_TR_BIT_OFFSET);
 80029ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
        dwt_modify32bitoffsetreg(TX_FCTRL_ID, 0, ~(TX_FCTRL_TXB_OFFSET_BIT_MASK | TX_FCTRL_TR_BIT_MASK | TX_FCTRL_TXFLEN_BIT_MASK), reg32);
 80029d2:	ea40 23c2 	orr.w	r3, r0, r2, lsl #11
 80029d6:	4a0b      	ldr	r2, [pc, #44]	; (8002a04 <dwt_writetxfctrl+0x3c>)
 80029d8:	2100      	movs	r1, #0
 80029da:	2024      	movs	r0, #36	; 0x24
 80029dc:	f7ff fd56 	bl	800248c <dwt_modify32bitoffsetreg>
} // end dwt_writetxfctrl()
 80029e0:	bd08      	pop	{r3, pc}
        reg32 = txFrameLength | ((uint32_t)(txBufferOffset + DWT_TX_BUFF_OFFSET_ADJUST) << TX_FCTRL_TXB_OFFSET_BIT_OFFSET) | ((uint32_t)ranging << TX_FCTRL_TR_BIT_OFFSET);
 80029e2:	3180      	adds	r1, #128	; 0x80
 80029e4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
        dwt_modify32bitoffsetreg(TX_FCTRL_ID, 0, ~(TX_FCTRL_TXB_OFFSET_BIT_MASK | TX_FCTRL_TR_BIT_MASK | TX_FCTRL_TXFLEN_BIT_MASK), reg32);
 80029e8:	ea40 23c2 	orr.w	r3, r0, r2, lsl #11
 80029ec:	4a05      	ldr	r2, [pc, #20]	; (8002a04 <dwt_writetxfctrl+0x3c>)
 80029ee:	2100      	movs	r1, #0
 80029f0:	2024      	movs	r0, #36	; 0x24
 80029f2:	f7ff fd4b 	bl	800248c <dwt_modify32bitoffsetreg>
        reg32 = dwt_read8bitoffsetreg(SAR_CTRL_ID, 0); //DW3000/3700 - need to read this to load the correct TX buffer offset value
 80029f6:	2100      	movs	r1, #0
 80029f8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80029fc:	f7ff fd39 	bl	8002472 <dwt_read8bitoffsetreg>
} // end dwt_writetxfctrl()
 8002a00:	e7ee      	b.n	80029e0 <dwt_writetxfctrl+0x18>
 8002a02:	bf00      	nop
 8002a04:	fc00f400 	.word	0xfc00f400

08002a08 <dwt_setplenfine>:
{
 8002a08:	b508      	push	{r3, lr}
 8002a0a:	4602      	mov	r2, r0
    dwt_write8bitoffsetreg(TX_FCTRL_HI_ID, 1, preambleLength);
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	2028      	movs	r0, #40	; 0x28
 8002a10:	f7ff fcd4 	bl	80023bc <dwt_write8bitoffsetreg>
}
 8002a14:	bd08      	pop	{r3, pc}
	...

08002a18 <dwt_configure>:
{
 8002a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a1c:	4604      	mov	r4, r0
    uint8_t chan = config->chan,cnt,flag;
 8002a1e:	7807      	ldrb	r7, [r0, #0]
    uint8_t scp = ((config->rxCode > 24) || (config->txCode > 24)) ? 1 : 0;
 8002a20:	7903      	ldrb	r3, [r0, #4]
 8002a22:	2b18      	cmp	r3, #24
 8002a24:	d804      	bhi.n	8002a30 <dwt_configure+0x18>
 8002a26:	78c3      	ldrb	r3, [r0, #3]
 8002a28:	2b18      	cmp	r3, #24
 8002a2a:	d915      	bls.n	8002a58 <dwt_configure+0x40>
 8002a2c:	2601      	movs	r6, #1
 8002a2e:	e000      	b.n	8002a32 <dwt_configure+0x1a>
 8002a30:	2601      	movs	r6, #1
 8002a32:	b2f6      	uxtb	r6, r6
    uint8_t mode = (config->phrMode == DWT_PHRMODE_EXT) ? SYS_CFG_PHR_MODE_BIT_MASK : 0;
 8002a34:	79e3      	ldrb	r3, [r4, #7]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d010      	beq.n	8002a5c <dwt_configure+0x44>
 8002a3a:	2100      	movs	r1, #0
    switch (config->txPreambLength)
 8002a3c:	7863      	ldrb	r3, [r4, #1]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	2b06      	cmp	r3, #6
 8002a42:	f200 80f9 	bhi.w	8002c38 <dwt_configure+0x220>
 8002a46:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002a4a:	00fa      	.short	0x00fa
 8002a4c:	00f700f7 	.word	0x00f700f7
 8002a50:	00f4000b 	.word	0x00f4000b
 8002a54:	000e00f7 	.word	0x000e00f7
    uint8_t scp = ((config->rxCode > 24) || (config->txCode > 24)) ? 1 : 0;
 8002a58:	2600      	movs	r6, #0
 8002a5a:	e7ea      	b.n	8002a32 <dwt_configure+0x1a>
    uint8_t mode = (config->phrMode == DWT_PHRMODE_EXT) ? SYS_CFG_PHR_MODE_BIT_MASK : 0;
 8002a5c:	2110      	movs	r1, #16
 8002a5e:	e7ed      	b.n	8002a3c <dwt_configure+0x24>
    switch (config->txPreambLength)
 8002a60:	f04f 0920 	mov.w	r9, #32
 8002a64:	e001      	b.n	8002a6a <dwt_configure+0x52>
        preamble_len = 72;
 8002a66:	f04f 0948 	mov.w	r9, #72	; 0x48
    pdw3000local->sleep_mode &= (~(DWT_ALT_OPS | DWT_SEL_OPS3));  //clear the sleep mode ALT_OPS bit
 8002a6a:	4bb7      	ldr	r3, [pc, #732]	; (8002d48 <dwt_configure+0x330>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	8a1a      	ldrh	r2, [r3, #16]
 8002a70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a74:	821a      	strh	r2, [r3, #16]
    pdw3000local->longFrames = config->phrMode ;
 8002a76:	79e2      	ldrb	r2, [r4, #7]
 8002a78:	731a      	strb	r2, [r3, #12]
    sts_len=GET_STS_REG_SET_VALUE((uint16_t)(config->stsLength));
 8002a7a:	7b65      	ldrb	r5, [r4, #13]
 8002a7c:	1caa      	adds	r2, r5, #2
 8002a7e:	2501      	movs	r5, #1
 8002a80:	4095      	lsls	r5, r2
    pdw3000local->ststhreshold = (int16_t)((((uint32_t)sts_len) * 8) * STSQUAL_THRESH_64);
 8002a82:	fa1f f885 	uxth.w	r8, r5
 8002a86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a8a:	ee07 2a90 	vmov	s15, r2
 8002a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a92:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8002d4c <dwt_configure+0x334>
 8002a96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a9e:	ee17 2a90 	vmov	r2, s15
 8002aa2:	825a      	strh	r2, [r3, #18]
    pdw3000local->stsconfig = config->stsMode;
 8002aa4:	7b22      	ldrb	r2, [r4, #12]
 8002aa6:	755a      	strb	r2, [r3, #21]
        ((uint32_t)config->pdoaMode) << SYS_CFG_PDOA_MODE_BIT_OFFSET
 8002aa8:	7ba3      	ldrb	r3, [r4, #14]
        | ((uint16_t)config->stsMode & DWT_STS_CONFIG_MASK) << SYS_CFG_CP_SPC_BIT_OFFSET
 8002aaa:	0312      	lsls	r2, r2, #12
 8002aac:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 8002ab0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
        | (SYS_CFG_PHR_6M8_BIT_MASK & ((uint32_t)config->phrRate << SYS_CFG_PHR_6M8_BIT_OFFSET))
 8002ab4:	7a23      	ldrb	r3, [r4, #8]
 8002ab6:	015b      	lsls	r3, r3, #5
 8002ab8:	f003 0320 	and.w	r3, r3, #32
 8002abc:	4313      	orrs	r3, r2
    dwt_modify32bitoffsetreg(SYS_CFG_ID, 0, ~(SYS_CFG_PHR_MODE_BIT_MASK | SYS_CFG_PHR_6M8_BIT_MASK | SYS_CFG_CP_SPC_BIT_MASK | SYS_CFG_PDOA_MODE_BIT_MASK | SYS_CFG_CP_SDC_BIT_MASK),
 8002abe:	430b      	orrs	r3, r1
 8002ac0:	4aa3      	ldr	r2, [pc, #652]	; (8002d50 <dwt_configure+0x338>)
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	2010      	movs	r0, #16
 8002ac6:	f7ff fce1 	bl	800248c <dwt_modify32bitoffsetreg>
    if (scp)
 8002aca:	2e00      	cmp	r6, #0
 8002acc:	f040 80ba 	bne.w	8002c44 <dwt_configure+0x22c>
        if (config->stsMode != DWT_STS_MODE_OFF)
 8002ad0:	7b23      	ldrb	r3, [r4, #12]
 8002ad2:	b1ab      	cbz	r3, 8002b00 <dwt_configure+0xe8>
            if ((config->pdoaMode == DWT_PDOA_M1) || (config->pdoaMode == DWT_PDOA_M0))
 8002ad4:	7ba3      	ldrb	r3, [r4, #14]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	f240 80d9 	bls.w	8002c8e <dwt_configure+0x276>
                sts_mnth=get_sts_mnth(sts_length_factors[(uint8_t)(config->stsLength)], CIA_MANUALLOWERBOUND_TH_64, 4);
 8002adc:	7b60      	ldrb	r0, [r4, #13]
 8002ade:	2204      	movs	r2, #4
 8002ae0:	2110      	movs	r1, #16
 8002ae2:	4b9c      	ldr	r3, [pc, #624]	; (8002d54 <dwt_configure+0x33c>)
 8002ae4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8002ae8:	f7ff fb24 	bl	8002134 <get_sts_mnth>
            preamble_len += (sts_len) * 8;
 8002aec:	eb09 09c8 	add.w	r9, r9, r8, lsl #3
            dwt_modify16bitoffsetreg(STS_CONFIG_LO_ID, 2, (uint16_t)~(STS_CONFIG_LO_STS_MAN_TH_BIT_MASK >> 16), sts_mnth & 0x7F);
 8002af0:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 8002af4:	f64f 7280 	movw	r2, #65408	; 0xff80
 8002af8:	2102      	movs	r1, #2
 8002afa:	4897      	ldr	r0, [pc, #604]	; (8002d58 <dwt_configure+0x340>)
 8002afc:	f7ff fd5e 	bl	80025bc <dwt_modify16bitoffsetreg>
        if (preamble_len >= 256)
 8002b00:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8002b04:	f340 80cc 	ble.w	8002ca0 <dwt_configure+0x288>
            pdw3000local->sleep_mode |= DWT_ALT_OPS | DWT_SEL_OPS0;
 8002b08:	4b8f      	ldr	r3, [pc, #572]	; (8002d48 <dwt_configure+0x330>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	8a13      	ldrh	r3, [r2, #16]
 8002b0e:	f043 0320 	orr.w	r3, r3, #32
 8002b12:	8213      	strh	r3, [r2, #16]
            dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_OPS_ID_BIT_MASK), DWT_OPSET_LONG | OTP_CFG_OPS_KICK_BIT_MASK);
 8002b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b18:	f46f 52c0 	mvn.w	r2, #6144	; 0x1800
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	488f      	ldr	r0, [pc, #572]	; (8002d5c <dwt_configure+0x344>)
 8002b20:	f7ff fcb4 	bl	800248c <dwt_modify32bitoffsetreg>
    dwt_modify8bitoffsetreg(DTUNE0_ID, 0, (uint8_t) ~DTUNE0_PRE_PAC_SYM_BIT_MASK, config->rxPAC);
 8002b24:	78a3      	ldrb	r3, [r4, #2]
 8002b26:	22fc      	movs	r2, #252	; 0xfc
 8002b28:	2100      	movs	r1, #0
 8002b2a:	f44f 20c0 	mov.w	r0, #393216	; 0x60000
 8002b2e:	f7ff fd77 	bl	8002620 <dwt_modify8bitoffsetreg>
    dwt_write8bitoffsetreg(STS_CFG0_ID, 0, sts_len-1);    /*Starts from 0 that is why -1*/
 8002b32:	1e6a      	subs	r2, r5, #1
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	2100      	movs	r1, #0
 8002b38:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002b3c:	f7ff fc3e 	bl	80023bc <dwt_write8bitoffsetreg>
    if (config->txPreambLength == DWT_PLEN_72)
 8002b40:	7863      	ldrb	r3, [r4, #1]
 8002b42:	2b07      	cmp	r3, #7
 8002b44:	f000 80b5 	beq.w	8002cb2 <dwt_configure+0x29a>
        dwt_setplenfine(0); //clear the setting in the FINE_PLEN register.
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f7ff ff5d 	bl	8002a08 <dwt_setplenfine>
    if((config->stsMode & DWT_STS_MODE_ND) == DWT_STS_MODE_ND)
 8002b4e:	7b23      	ldrb	r3, [r4, #12]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	f000 80b0 	beq.w	8002cba <dwt_configure+0x2a2>
        dwt_write32bitoffsetreg(DTUNE3_ID, 0, PD_THRESH_DEFAULT);
 8002b5a:	4a81      	ldr	r2, [pc, #516]	; (8002d60 <dwt_configure+0x348>)
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	4881      	ldr	r0, [pc, #516]	; (8002d64 <dwt_configure+0x34c>)
 8002b60:	f7ff fbcb 	bl	80022fa <dwt_write32bitoffsetreg>
    temp = dwt_read32bitoffsetreg(CHAN_CTRL_ID, 0);
 8002b64:	2100      	movs	r1, #0
 8002b66:	4880      	ldr	r0, [pc, #512]	; (8002d68 <dwt_configure+0x350>)
 8002b68:	f7ff fc3d 	bl	80023e6 <dwt_read32bitoffsetreg>
    temp &= (~(CHAN_CTRL_RX_PCODE_BIT_MASK | CHAN_CTRL_TX_PCODE_BIT_MASK | CHAN_CTRL_SFD_TYPE_BIT_MASK | CHAN_CTRL_RF_CHAN_BIT_MASK));
 8002b6c:	f420 53ff 	bic.w	r3, r0, #8160	; 0x1fe0
 8002b70:	f023 031f 	bic.w	r3, r3, #31
    if (chan == 9) temp |= CHAN_CTRL_RF_CHAN_BIT_MASK;
 8002b74:	2f09      	cmp	r7, #9
 8002b76:	f000 80a6 	beq.w	8002cc6 <dwt_configure+0x2ae>
    temp |= (CHAN_CTRL_RX_PCODE_BIT_MASK & ((uint32_t)config->rxCode << CHAN_CTRL_RX_PCODE_BIT_OFFSET));
 8002b7a:	7922      	ldrb	r2, [r4, #4]
 8002b7c:	0212      	lsls	r2, r2, #8
 8002b7e:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 8002b82:	431a      	orrs	r2, r3
    temp |= (CHAN_CTRL_TX_PCODE_BIT_MASK & ((uint32_t)config->txCode << CHAN_CTRL_TX_PCODE_BIT_OFFSET));
 8002b84:	78e3      	ldrb	r3, [r4, #3]
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	4313      	orrs	r3, r2
    temp |= (CHAN_CTRL_SFD_TYPE_BIT_MASK & ((uint32_t)config->sfdType << CHAN_CTRL_SFD_TYPE_BIT_OFFSET));
 8002b8c:	7962      	ldrb	r2, [r4, #5]
 8002b8e:	0052      	lsls	r2, r2, #1
 8002b90:	f002 0206 	and.w	r2, r2, #6
    dwt_write32bitoffsetreg(CHAN_CTRL_ID, 0, temp);
 8002b94:	431a      	orrs	r2, r3
 8002b96:	2100      	movs	r1, #0
 8002b98:	4873      	ldr	r0, [pc, #460]	; (8002d68 <dwt_configure+0x350>)
 8002b9a:	f7ff fbae 	bl	80022fa <dwt_write32bitoffsetreg>
                                              ((uint32_t)config->dataRate << TX_FCTRL_TXBR_BIT_OFFSET)
 8002b9e:	79a2      	ldrb	r2, [r4, #6]
                                              | ((uint32_t) config->txPreambLength) << TX_FCTRL_TXPSR_BIT_OFFSET);
 8002ba0:	7863      	ldrb	r3, [r4, #1]
 8002ba2:	031b      	lsls	r3, r3, #12
    dwt_modify32bitoffsetreg(TX_FCTRL_ID, 0, ~(TX_FCTRL_TXBR_BIT_MASK | TX_FCTRL_TXPSR_BIT_MASK),
 8002ba4:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8002ba8:	f46f 4274 	mvn.w	r2, #62464	; 0xf400
 8002bac:	2100      	movs	r1, #0
 8002bae:	2024      	movs	r0, #36	; 0x24
 8002bb0:	f7ff fc6c 	bl	800248c <dwt_modify32bitoffsetreg>
    if (config->sfdTO == 0)
 8002bb4:	8963      	ldrh	r3, [r4, #10]
 8002bb6:	b90b      	cbnz	r3, 8002bbc <dwt_configure+0x1a4>
        config->sfdTO = DWT_SFDTOC_DEF;
 8002bb8:	2381      	movs	r3, #129	; 0x81
 8002bba:	8163      	strh	r3, [r4, #10]
    dwt_write16bitoffsetreg(DTUNE0_ID, 2, config->sfdTO);
 8002bbc:	8962      	ldrh	r2, [r4, #10]
 8002bbe:	2102      	movs	r1, #2
 8002bc0:	f44f 20c0 	mov.w	r0, #393216	; 0x60000
 8002bc4:	f7ff fbd2 	bl	800236c <dwt_write16bitoffsetreg>
    if (chan == 9)
 8002bc8:	2f09      	cmp	r7, #9
 8002bca:	d07f      	beq.n	8002ccc <dwt_configure+0x2b4>
        dwt_write32bitoffsetreg(TX_CTRL_HI_ID, 0, RF_TXCTRL_CH5);
 8002bcc:	4a67      	ldr	r2, [pc, #412]	; (8002d6c <dwt_configure+0x354>)
 8002bce:	2100      	movs	r1, #0
 8002bd0:	4867      	ldr	r0, [pc, #412]	; (8002d70 <dwt_configure+0x358>)
 8002bd2:	f7ff fb92 	bl	80022fa <dwt_write32bitoffsetreg>
        dwt_write16bitoffsetreg(PLL_CFG_ID, 0, RF_PLL_CFG_CH5);
 8002bd6:	f641 723c 	movw	r2, #7996	; 0x1f3c
 8002bda:	2100      	movs	r1, #0
 8002bdc:	f44f 2010 	mov.w	r0, #589824	; 0x90000
 8002be0:	f7ff fbc4 	bl	800236c <dwt_write16bitoffsetreg>
    dwt_write8bitoffsetreg(LDO_RLOAD_ID, 1, LDO_RLOAD_VAL_B1);
 8002be4:	2214      	movs	r2, #20
 8002be6:	2101      	movs	r1, #1
 8002be8:	4862      	ldr	r0, [pc, #392]	; (8002d74 <dwt_configure+0x35c>)
 8002bea:	f7ff fbe7 	bl	80023bc <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(TX_CTRL_LO_ID, 2, RF_TXCTRL_LO_B2);
 8002bee:	220e      	movs	r2, #14
 8002bf0:	2102      	movs	r1, #2
 8002bf2:	4861      	ldr	r0, [pc, #388]	; (8002d78 <dwt_configure+0x360>)
 8002bf4:	f7ff fbe2 	bl	80023bc <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(PLL_CAL_ID, 0, RF_PLL_CFG_LD);        // Extend the lock delay
 8002bf8:	2281      	movs	r2, #129	; 0x81
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	485f      	ldr	r0, [pc, #380]	; (8002d7c <dwt_configure+0x364>)
 8002bfe:	f7ff fbdd 	bl	80023bc <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(SYS_STATUS_ID, 0, SYS_STATUS_CP_LOCK_BIT_MASK);
 8002c02:	2202      	movs	r2, #2
 8002c04:	2100      	movs	r1, #0
 8002c06:	2044      	movs	r0, #68	; 0x44
 8002c08:	f7ff fbd8 	bl	80023bc <dwt_write8bitoffsetreg>
    dwt_setdwstate(DWT_DW_IDLE);
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	f7ff fd19 	bl	8002644 <dwt_setdwstate>
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PLL;cnt++)
 8002c12:	2500      	movs	r5, #0
 8002c14:	2d05      	cmp	r5, #5
 8002c16:	d86b      	bhi.n	8002cf0 <dwt_configure+0x2d8>
        deca_usleep(DELAY_20uUSec);
 8002c18:	2014      	movs	r0, #20
 8002c1a:	f000 fb45 	bl	80032a8 <deca_usleep>
        if ((dwt_read8bitoffsetreg(SYS_STATUS_ID, 0) & SYS_STATUS_CP_LOCK_BIT_MASK))
 8002c1e:	2100      	movs	r1, #0
 8002c20:	2044      	movs	r0, #68	; 0x44
 8002c22:	f7ff fc26 	bl	8002472 <dwt_read8bitoffsetreg>
 8002c26:	f010 0f02 	tst.w	r0, #2
 8002c2a:	d17d      	bne.n	8002d28 <dwt_configure+0x310>
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PLL;cnt++)
 8002c2c:	3501      	adds	r5, #1
 8002c2e:	b2ed      	uxtb	r5, r5
 8002c30:	e7f0      	b.n	8002c14 <dwt_configure+0x1fc>
        preamble_len = 128;
 8002c32:	f04f 0980 	mov.w	r9, #128	; 0x80
        break;
 8002c36:	e718      	b.n	8002a6a <dwt_configure+0x52>
        preamble_len = 256;
 8002c38:	f44f 7980 	mov.w	r9, #256	; 0x100
        break;
 8002c3c:	e715      	b.n	8002a6a <dwt_configure+0x52>
        preamble_len = 64;
 8002c3e:	f04f 0940 	mov.w	r9, #64	; 0x40
 8002c42:	e712      	b.n	8002a6a <dwt_configure+0x52>
        pdw3000local->sleep_mode |= DWT_ALT_OPS | DWT_SEL_OPS1;  //configure correct OPS table is kicked on wakeup
 8002c44:	4b40      	ldr	r3, [pc, #256]	; (8002d48 <dwt_configure+0x330>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	8a13      	ldrh	r3, [r2, #16]
 8002c4a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c4e:	8213      	strh	r3, [r2, #16]
        dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_OPS_ID_BIT_MASK), DWT_OPSET_SCP | OTP_CFG_OPS_KICK_BIT_MASK);
 8002c50:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c54:	f46f 52c0 	mvn.w	r2, #6144	; 0x1800
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4840      	ldr	r0, [pc, #256]	; (8002d5c <dwt_configure+0x344>)
 8002c5c:	f7ff fc16 	bl	800248c <dwt_modify32bitoffsetreg>
        dwt_write32bitoffsetreg(IP_CONFIG_LO_ID, 0, IP_CONFIG_LO_SCP);       //Set this if Ipatov analysis is used in SCP mode
 8002c60:	f240 3206 	movw	r2, #774	; 0x306
 8002c64:	2100      	movs	r1, #0
 8002c66:	4846      	ldr	r0, [pc, #280]	; (8002d80 <dwt_configure+0x368>)
 8002c68:	f7ff fb47 	bl	80022fa <dwt_write32bitoffsetreg>
        dwt_write32bitoffsetreg(IP_CONFIG_HI_ID, 0, IP_CONFIG_HI_SCP);
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	4611      	mov	r1, r2
 8002c70:	f04f 100e 	mov.w	r0, #917518	; 0xe000e
 8002c74:	f7ff fb41 	bl	80022fa <dwt_write32bitoffsetreg>
        dwt_write32bitoffsetreg(STS_CONFIG_LO_ID, 0, STS_CONFIG_LO_SCP);
 8002c78:	4a42      	ldr	r2, [pc, #264]	; (8002d84 <dwt_configure+0x36c>)
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	4836      	ldr	r0, [pc, #216]	; (8002d58 <dwt_configure+0x340>)
 8002c7e:	f7ff fb3c 	bl	80022fa <dwt_write32bitoffsetreg>
        dwt_write8bitoffsetreg(STS_CONFIG_HI_ID, 0, STS_CONFIG_HI_SCP);
 8002c82:	227d      	movs	r2, #125	; 0x7d
 8002c84:	2100      	movs	r1, #0
 8002c86:	4840      	ldr	r0, [pc, #256]	; (8002d88 <dwt_configure+0x370>)
 8002c88:	f7ff fb98 	bl	80023bc <dwt_write8bitoffsetreg>
 8002c8c:	e74a      	b.n	8002b24 <dwt_configure+0x10c>
                sts_mnth=get_sts_mnth(sts_length_factors[(uint8_t)(config->stsLength)], CIA_MANUALLOWERBOUND_TH_64, 3);
 8002c8e:	7b60      	ldrb	r0, [r4, #13]
 8002c90:	2203      	movs	r2, #3
 8002c92:	2110      	movs	r1, #16
 8002c94:	4b2f      	ldr	r3, [pc, #188]	; (8002d54 <dwt_configure+0x33c>)
 8002c96:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8002c9a:	f7ff fa4b 	bl	8002134 <get_sts_mnth>
 8002c9e:	e725      	b.n	8002aec <dwt_configure+0xd4>
            dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_OPS_ID_BIT_MASK), DWT_OPSET_SHORT | OTP_CFG_OPS_KICK_BIT_MASK);
 8002ca0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ca4:	f46f 52c0 	mvn.w	r2, #6144	; 0x1800
 8002ca8:	2100      	movs	r1, #0
 8002caa:	482c      	ldr	r0, [pc, #176]	; (8002d5c <dwt_configure+0x344>)
 8002cac:	f7ff fbee 	bl	800248c <dwt_modify32bitoffsetreg>
 8002cb0:	e738      	b.n	8002b24 <dwt_configure+0x10c>
        dwt_setplenfine(8); //value 8 sets fine preamble length to 72 symbols - this is needed to set 72 length.
 8002cb2:	2008      	movs	r0, #8
 8002cb4:	f7ff fea8 	bl	8002a08 <dwt_setplenfine>
 8002cb8:	e749      	b.n	8002b4e <dwt_configure+0x136>
        dwt_write32bitoffsetreg(DTUNE3_ID, 0, PD_THRESH_NO_DATA);
 8002cba:	4a34      	ldr	r2, [pc, #208]	; (8002d8c <dwt_configure+0x374>)
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	4829      	ldr	r0, [pc, #164]	; (8002d64 <dwt_configure+0x34c>)
 8002cc0:	f7ff fb1b 	bl	80022fa <dwt_write32bitoffsetreg>
 8002cc4:	e74e      	b.n	8002b64 <dwt_configure+0x14c>
    if (chan == 9) temp |= CHAN_CTRL_RF_CHAN_BIT_MASK;
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	e756      	b.n	8002b7a <dwt_configure+0x162>
        dwt_write32bitoffsetreg(TX_CTRL_HI_ID, 0, RF_TXCTRL_CH9);
 8002ccc:	4a30      	ldr	r2, [pc, #192]	; (8002d90 <dwt_configure+0x378>)
 8002cce:	2100      	movs	r1, #0
 8002cd0:	4827      	ldr	r0, [pc, #156]	; (8002d70 <dwt_configure+0x358>)
 8002cd2:	f7ff fb12 	bl	80022fa <dwt_write32bitoffsetreg>
        dwt_write16bitoffsetreg(PLL_CFG_ID, 0, RF_PLL_CFG_CH9);
 8002cd6:	f640 723c 	movw	r2, #3900	; 0xf3c
 8002cda:	2100      	movs	r1, #0
 8002cdc:	f44f 2010 	mov.w	r0, #589824	; 0x90000
 8002ce0:	f7ff fb44 	bl	800236c <dwt_write16bitoffsetreg>
        dwt_write32bitoffsetreg(RX_CTRL_HI_ID, 0, RF_RXCTRL_CH9);
 8002ce4:	4a2b      	ldr	r2, [pc, #172]	; (8002d94 <dwt_configure+0x37c>)
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	482b      	ldr	r0, [pc, #172]	; (8002d98 <dwt_configure+0x380>)
 8002cea:	f7ff fb06 	bl	80022fa <dwt_write32bitoffsetreg>
 8002cee:	e779      	b.n	8002be4 <dwt_configure+0x1cc>
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PLL;cnt++)
 8002cf0:	2301      	movs	r3, #1
    if (flag)
 8002cf2:	bb33      	cbnz	r3, 8002d42 <dwt_configure+0x32a>
    if ((config->rxCode >= 9) && (config->rxCode <= 24)) //only enable DGC for PRF 64
 8002cf4:	7923      	ldrb	r3, [r4, #4]
 8002cf6:	3b09      	subs	r3, #9
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b0f      	cmp	r3, #15
 8002cfc:	d81a      	bhi.n	8002d34 <dwt_configure+0x31c>
        if (pdw3000local->dgc_otp_set == DWT_DGC_LOAD_FROM_OTP)
 8002cfe:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <dwt_configure+0x330>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	7a5b      	ldrb	r3, [r3, #9]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d011      	beq.n	8002d2c <dwt_configure+0x314>
            dwt_configmrxlut(chan);
 8002d08:	4638      	mov	r0, r7
 8002d0a:	f7ff fd2d 	bl	8002768 <dwt_configmrxlut>
        dwt_modify16bitoffsetreg(DGC_CFG_ID, 0x0, (uint16_t)~DGC_CFG_THR_64_BIT_MASK, DWT_DGC_CFG << DGC_CFG_THR_64_BIT_OFFSET);
 8002d0e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002d12:	f248 12ff 	movw	r2, #33279	; 0x81ff
 8002d16:	2100      	movs	r1, #0
 8002d18:	4820      	ldr	r0, [pc, #128]	; (8002d9c <dwt_configure+0x384>)
 8002d1a:	f7ff fc4f 	bl	80025bc <dwt_modify16bitoffsetreg>
    error = dwt_pgf_cal(1);  //if the RX calibration routine fails the device receiver performance will be severely affected, the application should reset and try again
 8002d1e:	2001      	movs	r0, #1
 8002d20:	f7ff fdf0 	bl	8002904 <dwt_pgf_cal>
} // end dwt_configure()
 8002d24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            flag=0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	e7e2      	b.n	8002cf2 <dwt_configure+0x2da>
            _dwt_kick_dgc_on_wakeup(chan);
 8002d2c:	b278      	sxtb	r0, r7
 8002d2e:	f7ff fbd5 	bl	80024dc <_dwt_kick_dgc_on_wakeup>
 8002d32:	e7ec      	b.n	8002d0e <dwt_configure+0x2f6>
        dwt_and8bitoffsetreg(DGC_CFG_ID, 0x0, (uint8_t)~DGC_CFG_RX_TUNE_EN_BIT_MASK);
 8002d34:	2300      	movs	r3, #0
 8002d36:	22fe      	movs	r2, #254	; 0xfe
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4818      	ldr	r0, [pc, #96]	; (8002d9c <dwt_configure+0x384>)
 8002d3c:	f7ff fc70 	bl	8002620 <dwt_modify8bitoffsetreg>
 8002d40:	e7ed      	b.n	8002d1e <dwt_configure+0x306>
        return  DWT_ERROR;
 8002d42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d46:	e7ed      	b.n	8002d24 <dwt_configure+0x30c>
 8002d48:	2000008c 	.word	0x2000008c
 8002d4c:	3f666666 	.word	0x3f666666
 8002d50:	fffc4fcf 	.word	0xfffc4fcf
 8002d54:	080061d4 	.word	0x080061d4
 8002d58:	000e0012 	.word	0x000e0012
 8002d5c:	000b0008 	.word	0x000b0008
 8002d60:	af5f584c 	.word	0xaf5f584c
 8002d64:	0006000c 	.word	0x0006000c
 8002d68:	00010014 	.word	0x00010014
 8002d6c:	1c071134 	.word	0x1c071134
 8002d70:	0007001c 	.word	0x0007001c
 8002d74:	00070050 	.word	0x00070050
 8002d78:	00070018 	.word	0x00070018
 8002d7c:	00090008 	.word	0x00090008
 8002d80:	000e000c 	.word	0x000e000c
 8002d84:	000c5a0a 	.word	0x000c5a0a
 8002d88:	000e0016 	.word	0x000e0016
 8002d8c:	af5f35cc 	.word	0xaf5f35cc
 8002d90:	1c010034 	.word	0x1c010034
 8002d94:	08b5a833 	.word	0x08b5a833
 8002d98:	00070010 	.word	0x00070010
 8002d9c:	00030018 	.word	0x00030018

08002da0 <dwt_readrxdata>:
{
 8002da0:	b570      	push	{r4, r5, r6, lr}
 8002da2:	4606      	mov	r6, r0
 8002da4:	460d      	mov	r5, r1
 8002da6:	4614      	mov	r4, r2
    if (pdw3000local->dblbuffon == DBL_BUFF_ACCESS_BUFFER_1)  //if the flag is 0x3 we are reading from RX_BUFFER_1
 8002da8:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <dwt_readrxdata+0x58>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	7bdb      	ldrb	r3, [r3, #15]
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d00d      	beq.n	8002dce <dwt_readrxdata+0x2e>
        rx_buff_addr=RX_BUFFER_0_ID;
 8002db2:	f44f 1090 	mov.w	r0, #1179648	; 0x120000
    if ((rxBufferOffset + length) <= RX_BUFFER_MAX_LEN)
 8002db6:	1963      	adds	r3, r4, r5
 8002db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dbc:	da06      	bge.n	8002dcc <dwt_readrxdata+0x2c>
        if(rxBufferOffset <= REG_DIRECT_OFFSET_MAX_LEN)
 8002dbe:	2c7f      	cmp	r4, #127	; 0x7f
 8002dc0:	d808      	bhi.n	8002dd4 <dwt_readrxdata+0x34>
            dwt_readfromdevice(rx_buff_addr,rxBufferOffset,length,buffer);
 8002dc2:	4633      	mov	r3, r6
 8002dc4:	462a      	mov	r2, r5
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	f7ff fb05 	bl	80023d6 <dwt_readfromdevice>
}
 8002dcc:	bd70      	pop	{r4, r5, r6, pc}
        rx_buff_addr=RX_BUFFER_1_ID;
 8002dce:	f44f 1098 	mov.w	r0, #1245184	; 0x130000
 8002dd2:	e7f0      	b.n	8002db6 <dwt_readrxdata+0x16>
            dwt_write32bitreg(INDIRECT_ADDR_A_ID, (rx_buff_addr >> 16) );
 8002dd4:	0c02      	lsrs	r2, r0, #16
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4808      	ldr	r0, [pc, #32]	; (8002dfc <dwt_readrxdata+0x5c>)
 8002dda:	f7ff fa8e 	bl	80022fa <dwt_write32bitoffsetreg>
            dwt_write32bitreg(ADDR_OFFSET_A_ID,   rxBufferOffset);
 8002dde:	4622      	mov	r2, r4
 8002de0:	2100      	movs	r1, #0
 8002de2:	4807      	ldr	r0, [pc, #28]	; (8002e00 <dwt_readrxdata+0x60>)
 8002de4:	f7ff fa89 	bl	80022fa <dwt_write32bitoffsetreg>
            dwt_readfromdevice(INDIRECT_POINTER_A_ID, 0, length, buffer);
 8002de8:	4633      	mov	r3, r6
 8002dea:	462a      	mov	r2, r5
 8002dec:	2100      	movs	r1, #0
 8002dee:	f44f 10e8 	mov.w	r0, #1900544	; 0x1d0000
 8002df2:	f7ff faf0 	bl	80023d6 <dwt_readfromdevice>
}
 8002df6:	e7e9      	b.n	8002dcc <dwt_readrxdata+0x2c>
 8002df8:	2000008c 	.word	0x2000008c
 8002dfc:	001f0004 	.word	0x001f0004
 8002e00:	001f0008 	.word	0x001f0008

08002e04 <dwt_readstsquality>:
{
 8002e04:	b510      	push	{r4, lr}
 8002e06:	4604      	mov	r4, r0
    preambleCount = dwt_read16bitoffsetreg(STS_STS_ID, 0) & STS_STS_ACC_QUAL_BIT_MASK; //  dwt_read16bitoffsetreg(CP_PRNG_ID, CP_STS_OFFSET) & CP_ACC_CP_QUAL_MASK;
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4809      	ldr	r0, [pc, #36]	; (8002e30 <dwt_readstsquality+0x2c>)
 8002e0c:	f7ff fb20 	bl	8002450 <dwt_read16bitoffsetreg>
 8002e10:	f3c0 030b 	ubfx	r3, r0, #0, #12
    if(preambleCount & STS_ACC_CP_QUAL_SIGNTST)
 8002e14:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8002e18:	d001      	beq.n	8002e1e <dwt_readstsquality+0x1a>
        preambleCount |= STS_ACC_CP_QUAL_SIGNEXT;
 8002e1a:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
    *rxStsQualityIndex = (int16_t)preambleCount;
 8002e1e:	b21b      	sxth	r3, r3
 8002e20:	8023      	strh	r3, [r4, #0]
    return (int)((int16_t)preambleCount - pdw3000local->ststhreshold);
 8002e22:	4a04      	ldr	r2, [pc, #16]	; (8002e34 <dwt_readstsquality+0x30>)
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	f9b2 0012 	ldrsh.w	r0, [r2, #18]
}
 8002e2a:	1a18      	subs	r0, r3, r0
 8002e2c:	bd10      	pop	{r4, pc}
 8002e2e:	bf00      	nop
 8002e30:	00020008 	.word	0x00020008
 8002e34:	2000008c 	.word	0x2000008c

08002e38 <dwt_readtxtimestamp>:
{
 8002e38:	b508      	push	{r3, lr}
 8002e3a:	4603      	mov	r3, r0
    dwt_readfromdevice(TX_TIME_LO_ID, 0, TX_TIME_TX_STAMP_LEN, timestamp); // Read bytes directly into buffer
 8002e3c:	2205      	movs	r2, #5
 8002e3e:	2100      	movs	r1, #0
 8002e40:	2074      	movs	r0, #116	; 0x74
 8002e42:	f7ff fac8 	bl	80023d6 <dwt_readfromdevice>
}
 8002e46:	bd08      	pop	{r3, pc}

08002e48 <dwt_readrxtimestamp>:
{
 8002e48:	b508      	push	{r3, lr}
 8002e4a:	4603      	mov	r3, r0
    switch (pdw3000local->dblbuffon)    //check if in double buffer mode and if so which buffer host is currently accessing
 8002e4c:	4a0c      	ldr	r2, [pc, #48]	; (8002e80 <dwt_readrxtimestamp+0x38>)
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	7bd2      	ldrb	r2, [r2, #15]
 8002e52:	2a01      	cmp	r2, #1
 8002e54:	d008      	beq.n	8002e68 <dwt_readrxtimestamp+0x20>
 8002e56:	2a03      	cmp	r2, #3
 8002e58:	d10c      	bne.n	8002e74 <dwt_readrxtimestamp+0x2c>
        dwt_readfromdevice(INDIRECT_POINTER_B_ID, BUF1_RX_TIME -BUF1_RX_FINFO, RX_TIME_RX_STAMP_LEN, timestamp);
 8002e5a:	2205      	movs	r2, #5
 8002e5c:	2104      	movs	r1, #4
 8002e5e:	f44f 10f0 	mov.w	r0, #1966080	; 0x1e0000
 8002e62:	f7ff fab8 	bl	80023d6 <dwt_readfromdevice>
}
 8002e66:	bd08      	pop	{r3, pc}
        dwt_readfromdevice(BUF0_RX_TIME, 0, RX_TIME_RX_STAMP_LEN, timestamp);
 8002e68:	2205      	movs	r2, #5
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4805      	ldr	r0, [pc, #20]	; (8002e84 <dwt_readrxtimestamp+0x3c>)
 8002e6e:	f7ff fab2 	bl	80023d6 <dwt_readfromdevice>
        break;
 8002e72:	e7f8      	b.n	8002e66 <dwt_readrxtimestamp+0x1e>
        dwt_readfromdevice(RX_TIME_0_ID, 0, RX_TIME_RX_STAMP_LEN, timestamp); // Get the adjusted time of arrival
 8002e74:	2205      	movs	r2, #5
 8002e76:	2100      	movs	r1, #0
 8002e78:	2064      	movs	r0, #100	; 0x64
 8002e7a:	f7ff faac 	bl	80023d6 <dwt_readfromdevice>
}
 8002e7e:	e7f2      	b.n	8002e66 <dwt_readrxtimestamp+0x1e>
 8002e80:	2000008c 	.word	0x2000008c
 8002e84:	00180004 	.word	0x00180004

08002e88 <dwt_configureframefilter>:
{
 8002e88:	b510      	push	{r4, lr}
    if(enabletype == DWT_FF_ENABLE_802_15_4)
 8002e8a:	2802      	cmp	r0, #2
 8002e8c:	d00b      	beq.n	8002ea6 <dwt_configureframefilter+0x1e>
        dwt_and8bitoffsetreg(SYS_CFG_ID, 0, (uint8_t)(~(SYS_CFG_FFEN_BIT_MASK)));
 8002e8e:	2300      	movs	r3, #0
 8002e90:	22fe      	movs	r2, #254	; 0xfe
 8002e92:	4619      	mov	r1, r3
 8002e94:	2010      	movs	r0, #16
 8002e96:	f7ff fbc3 	bl	8002620 <dwt_modify8bitoffsetreg>
        dwt_write16bitoffsetreg(ADR_FILT_CFG_ID, 0, 0x0);
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	2014      	movs	r0, #20
 8002ea0:	f7ff fa64 	bl	800236c <dwt_write16bitoffsetreg>
}
 8002ea4:	bd10      	pop	{r4, pc}
 8002ea6:	460c      	mov	r4, r1
        dwt_or8bitoffsetreg(SYS_CFG_ID, 0, (uint8_t)(SYS_CFG_FFEN_BIT_MASK));
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	22ff      	movs	r2, #255	; 0xff
 8002eac:	2100      	movs	r1, #0
 8002eae:	2010      	movs	r0, #16
 8002eb0:	f7ff fbb6 	bl	8002620 <dwt_modify8bitoffsetreg>
        dwt_write16bitoffsetreg(ADR_FILT_CFG_ID, 0, filtermode);
 8002eb4:	4622      	mov	r2, r4
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	2014      	movs	r0, #20
 8002eba:	f7ff fa57 	bl	800236c <dwt_write16bitoffsetreg>
 8002ebe:	e7f1      	b.n	8002ea4 <dwt_configureframefilter+0x1c>

08002ec0 <dwt_setpanid>:
{
 8002ec0:	b508      	push	{r3, lr}
 8002ec2:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(PANADR_ID, PANADR_PAN_ID_BYTE_OFFSET, panID);
 8002ec4:	2102      	movs	r1, #2
 8002ec6:	200c      	movs	r0, #12
 8002ec8:	f7ff fa50 	bl	800236c <dwt_write16bitoffsetreg>
}
 8002ecc:	bd08      	pop	{r3, pc}

08002ece <dwt_setaddress16>:
{
 8002ece:	b508      	push	{r3, lr}
 8002ed0:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(PANADR_ID, PANADR_SHORTADDR_BIT_OFFSET, shortAddress);
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	200c      	movs	r0, #12
 8002ed6:	f7ff fa49 	bl	800236c <dwt_write16bitoffsetreg>
}
 8002eda:	bd08      	pop	{r3, pc}

08002edc <dwt_check_dev_id>:
{
 8002edc:	b508      	push	{r3, lr}
    dev_id = dwt_readdevid();
 8002ede:	f7ff fbf3 	bl	80026c8 <dwt_readdevid>
    if (!((DWT_C0_PDOA_DEV_ID == dev_id) || (DWT_C0_DEV_ID == dev_id)))
 8002ee2:	4b06      	ldr	r3, [pc, #24]	; (8002efc <dwt_check_dev_id+0x20>)
 8002ee4:	4298      	cmp	r0, r3
 8002ee6:	d004      	beq.n	8002ef2 <dwt_check_dev_id+0x16>
 8002ee8:	3b10      	subs	r3, #16
 8002eea:	4298      	cmp	r0, r3
 8002eec:	d103      	bne.n	8002ef6 <dwt_check_dev_id+0x1a>
    return DWT_SUCCESS;
 8002eee:	2000      	movs	r0, #0
}
 8002ef0:	bd08      	pop	{r3, pc}
    return DWT_SUCCESS;
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	e7fc      	b.n	8002ef0 <dwt_check_dev_id+0x14>
        return DWT_ERROR;
 8002ef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002efa:	e7f9      	b.n	8002ef0 <dwt_check_dev_id+0x14>
 8002efc:	deca0312 	.word	0xdeca0312

08002f00 <dwt_initialise>:
{
 8002f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f02:	4604      	mov	r4, r0
    pdw3000local->dblbuffon = DBL_BUFF_OFF; // Double buffer mode off by default / clear the flag
 8002f04:	4b43      	ldr	r3, [pc, #268]	; (8003014 <dwt_initialise+0x114>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	73da      	strb	r2, [r3, #15]
    pdw3000local->sleep_mode = DWT_RUNSAR;  // Configure RUN_SAR on wake by default as it is needed when running PGF_CAL
 8002f0c:	2102      	movs	r1, #2
 8002f0e:	8219      	strh	r1, [r3, #16]
    pdw3000local->spicrc = 0;
 8002f10:	751a      	strb	r2, [r3, #20]
    pdw3000local->stsconfig = 0; //STS off
 8002f12:	755a      	strb	r2, [r3, #21]
    pdw3000local->vBatP = 0;
 8002f14:	729a      	strb	r2, [r3, #10]
    pdw3000local->tempP = 0;
 8002f16:	72da      	strb	r2, [r3, #11]
    pdw3000local->cbTxDone = NULL;
 8002f18:	629a      	str	r2, [r3, #40]	; 0x28
    pdw3000local->cbRxOk = NULL;
 8002f1a:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw3000local->cbRxTo = NULL;
 8002f1c:	631a      	str	r2, [r3, #48]	; 0x30
    pdw3000local->cbRxErr = NULL;
 8002f1e:	635a      	str	r2, [r3, #52]	; 0x34
    pdw3000local->cbSPIRdy = NULL;
 8002f20:	63da      	str	r2, [r3, #60]	; 0x3c
    pdw3000local->cbSPIErr = NULL;
 8002f22:	639a      	str	r2, [r3, #56]	; 0x38
    if (dwt_check_dev_id()!=DWT_SUCCESS)
 8002f24:	f7ff ffda 	bl	8002edc <dwt_check_dev_id>
 8002f28:	2800      	cmp	r0, #0
 8002f2a:	d16f      	bne.n	800300c <dwt_initialise+0x10c>
 8002f2c:	4606      	mov	r6, r0
    ldo_tune_lo = _dwt_otpread(LDOTUNELO_ADDRESS);
 8002f2e:	2004      	movs	r0, #4
 8002f30:	f7ff fa70 	bl	8002414 <_dwt_otpread>
 8002f34:	4605      	mov	r5, r0
    ldo_tune_hi = _dwt_otpread(LDOTUNEHI_ADDRESS);
 8002f36:	2005      	movs	r0, #5
 8002f38:	f7ff fa6c 	bl	8002414 <_dwt_otpread>
 8002f3c:	4607      	mov	r7, r0
    pdw3000local->bias_tune = (_dwt_otpread(BIAS_TUNE_ADDRESS) >> 16) & BIAS_CTRL_BIAS_MASK;
 8002f3e:	200a      	movs	r0, #10
 8002f40:	f7ff fa68 	bl	8002414 <_dwt_otpread>
 8002f44:	4b33      	ldr	r3, [pc, #204]	; (8003014 <dwt_initialise+0x114>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	f3c0 4004 	ubfx	r0, r0, #16, #5
 8002f4c:	7210      	strb	r0, [r2, #8]
    if ((ldo_tune_lo != 0) && (ldo_tune_hi != 0) && (pdw3000local->bias_tune != 0))
 8002f4e:	b115      	cbz	r5, 8002f56 <dwt_initialise+0x56>
 8002f50:	b10f      	cbz	r7, 8002f56 <dwt_initialise+0x56>
 8002f52:	2800      	cmp	r0, #0
 8002f54:	d136      	bne.n	8002fc4 <dwt_initialise+0xc4>
    if (_dwt_otpread(DGC_TUNE_ADDRESS) == DWT_DGC_CFG0)
 8002f56:	2020      	movs	r0, #32
 8002f58:	f7ff fa5c 	bl	8002414 <_dwt_otpread>
 8002f5c:	4b2e      	ldr	r3, [pc, #184]	; (8003018 <dwt_initialise+0x118>)
 8002f5e:	4298      	cmp	r0, r3
 8002f60:	d033      	beq.n	8002fca <dwt_initialise+0xca>
        pdw3000local->dgc_otp_set = DWT_DGC_LOAD_FROM_SW;
 8002f62:	4b2c      	ldr	r3, [pc, #176]	; (8003014 <dwt_initialise+0x114>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2200      	movs	r2, #0
 8002f68:	725a      	strb	r2, [r3, #9]
    if(mode & DWT_READ_OTP_PID)
 8002f6a:	f014 0f10 	tst.w	r4, #16
 8002f6e:	d131      	bne.n	8002fd4 <dwt_initialise+0xd4>
    if (mode & DWT_READ_OTP_LID)
 8002f70:	f014 0f20 	tst.w	r4, #32
 8002f74:	d135      	bne.n	8002fe2 <dwt_initialise+0xe2>
    if (mode & DWT_READ_OTP_BAT)
 8002f76:	f014 0f40 	tst.w	r4, #64	; 0x40
 8002f7a:	d139      	bne.n	8002ff0 <dwt_initialise+0xf0>
    if (mode & DWT_READ_OTP_TMP)
 8002f7c:	f014 0f80 	tst.w	r4, #128	; 0x80
 8002f80:	d13d      	bne.n	8002ffe <dwt_initialise+0xfe>
    if(pdw3000local->tempP == 0) //if the reference temperature has not been programmed in OTP (early eng samples) set to default value
 8002f82:	4b24      	ldr	r3, [pc, #144]	; (8003014 <dwt_initialise+0x114>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	7ada      	ldrb	r2, [r3, #11]
 8002f88:	b90a      	cbnz	r2, 8002f8e <dwt_initialise+0x8e>
        pdw3000local->tempP = 0x85 ; //@temp of 20 deg
 8002f8a:	2285      	movs	r2, #133	; 0x85
 8002f8c:	72da      	strb	r2, [r3, #11]
    if(pdw3000local->vBatP == 0) //if the reference voltage has not been programmed in OTP (early eng samples) set to default value
 8002f8e:	7a9a      	ldrb	r2, [r3, #10]
 8002f90:	b90a      	cbnz	r2, 8002f96 <dwt_initialise+0x96>
        pdw3000local->vBatP = 0x74 ;  //@Vref of 3.0V
 8002f92:	2274      	movs	r2, #116	; 0x74
 8002f94:	729a      	strb	r2, [r3, #10]
    pdw3000local->otprev = (uint8_t) _dwt_otpread(OTPREV_ADDRESS);
 8002f96:	201f      	movs	r0, #31
 8002f98:	f7ff fa3c 	bl	8002414 <_dwt_otpread>
 8002f9c:	4c1d      	ldr	r4, [pc, #116]	; (8003014 <dwt_initialise+0x114>)
 8002f9e:	6823      	ldr	r3, [r4, #0]
 8002fa0:	7358      	strb	r0, [r3, #13]
    pdw3000local->init_xtrim = _dwt_otpread(XTRIM_ADDRESS) & 0x7f;
 8002fa2:	201e      	movs	r0, #30
 8002fa4:	f7ff fa36 	bl	8002414 <_dwt_otpread>
 8002fa8:	6823      	ldr	r3, [r4, #0]
 8002faa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8002fae:	7398      	strb	r0, [r3, #14]
    if(pdw3000local->init_xtrim == 0)
 8002fb0:	b908      	cbnz	r0, 8002fb6 <dwt_initialise+0xb6>
        pdw3000local->init_xtrim = 0x2E ; //set default value
 8002fb2:	222e      	movs	r2, #46	; 0x2e
 8002fb4:	739a      	strb	r2, [r3, #14]
    dwt_write8bitoffsetreg(XTAL_ID, 0, pdw3000local->init_xtrim);
 8002fb6:	7b9a      	ldrb	r2, [r3, #14]
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4818      	ldr	r0, [pc, #96]	; (800301c <dwt_initialise+0x11c>)
 8002fbc:	f7ff f9fe 	bl	80023bc <dwt_write8bitoffsetreg>
} // end dwt_initialise()
 8002fc0:	4630      	mov	r0, r6
 8002fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _dwt_prog_ldo_and_bias_tune();
 8002fc4:	f7ff fb12 	bl	80025ec <_dwt_prog_ldo_and_bias_tune>
 8002fc8:	e7c5      	b.n	8002f56 <dwt_initialise+0x56>
        pdw3000local->dgc_otp_set = DWT_DGC_LOAD_FROM_OTP;
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <dwt_initialise+0x114>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	725a      	strb	r2, [r3, #9]
 8002fd2:	e7ca      	b.n	8002f6a <dwt_initialise+0x6a>
        pdw3000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8002fd4:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <dwt_initialise+0x114>)
 8002fd6:	681d      	ldr	r5, [r3, #0]
 8002fd8:	2006      	movs	r0, #6
 8002fda:	f7ff fa1b 	bl	8002414 <_dwt_otpread>
 8002fde:	6028      	str	r0, [r5, #0]
 8002fe0:	e7c6      	b.n	8002f70 <dwt_initialise+0x70>
        pdw3000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8002fe2:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <dwt_initialise+0x114>)
 8002fe4:	681d      	ldr	r5, [r3, #0]
 8002fe6:	2007      	movs	r0, #7
 8002fe8:	f7ff fa14 	bl	8002414 <_dwt_otpread>
 8002fec:	6068      	str	r0, [r5, #4]
 8002fee:	e7c2      	b.n	8002f76 <dwt_initialise+0x76>
        pdw3000local->vBatP = (uint8_t)_dwt_otpread(VBAT_ADDRESS);
 8002ff0:	2008      	movs	r0, #8
 8002ff2:	f7ff fa0f 	bl	8002414 <_dwt_otpread>
 8002ff6:	4b07      	ldr	r3, [pc, #28]	; (8003014 <dwt_initialise+0x114>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	7298      	strb	r0, [r3, #10]
 8002ffc:	e7be      	b.n	8002f7c <dwt_initialise+0x7c>
        pdw3000local->tempP = (uint8_t)_dwt_otpread(VTEMP_ADDRESS);
 8002ffe:	2009      	movs	r0, #9
 8003000:	f7ff fa08 	bl	8002414 <_dwt_otpread>
 8003004:	4b03      	ldr	r3, [pc, #12]	; (8003014 <dwt_initialise+0x114>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	72d8      	strb	r0, [r3, #11]
 800300a:	e7ba      	b.n	8002f82 <dwt_initialise+0x82>
        return DWT_ERROR;
 800300c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8003010:	e7d6      	b.n	8002fc0 <dwt_initialise+0xc0>
 8003012:	bf00      	nop
 8003014:	2000008c 	.word	0x2000008c
 8003018:	10000240 	.word	0x10000240
 800301c:	00090014 	.word	0x00090014

08003020 <dwt_setrxaftertxdelay>:
{
 8003020:	b538      	push	{r3, r4, r5, lr}
 8003022:	4604      	mov	r4, r0
    uint32_t val = dwt_read32bitreg(ACK_RESP_ID); // Read ACK_RESP_T_ID register
 8003024:	4d07      	ldr	r5, [pc, #28]	; (8003044 <dwt_setrxaftertxdelay+0x24>)
 8003026:	2100      	movs	r1, #0
 8003028:	4628      	mov	r0, r5
 800302a:	f7ff f9dc 	bl	80023e6 <dwt_read32bitoffsetreg>
    val &= (~ACK_RESP_W4R_TIM_BIT_MASK); // Clear the timer (19:0)
 800302e:	0d00      	lsrs	r0, r0, #20
 8003030:	0500      	lsls	r0, r0, #20
    val |= (rxDelayTime & ACK_RESP_W4R_TIM_BIT_MASK); // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 8003032:	f3c4 0213 	ubfx	r2, r4, #0, #20
    dwt_write32bitoffsetreg(ACK_RESP_ID, 0, val);
 8003036:	4302      	orrs	r2, r0
 8003038:	2100      	movs	r1, #0
 800303a:	4628      	mov	r0, r5
 800303c:	f7ff f95d 	bl	80022fa <dwt_write32bitoffsetreg>
}
 8003040:	bd38      	pop	{r3, r4, r5, pc}
 8003042:	bf00      	nop
 8003044:	00010008 	.word	0x00010008

08003048 <dwt_checkidlerc>:
{
 8003048:	b508      	push	{r3, lr}
    uint32_t reg = ((uint32_t)dwt_read16bitoffsetreg(SYS_STATUS_ID, 2) << 16);
 800304a:	2102      	movs	r1, #2
 800304c:	2044      	movs	r0, #68	; 0x44
 800304e:	f7ff f9ff 	bl	8002450 <dwt_read16bitoffsetreg>
}
 8003052:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8003056:	bd08      	pop	{r3, pc}

08003058 <dwt_setdelayedtrxtime>:
{
 8003058:	b508      	push	{r3, lr}
 800305a:	4602      	mov	r2, r0
    dwt_write32bitoffsetreg(DX_TIME_ID, 0, starttime); // Note: bit 0 of this register is ignored
 800305c:	2100      	movs	r1, #0
 800305e:	202c      	movs	r0, #44	; 0x2c
 8003060:	f7ff f94b 	bl	80022fa <dwt_write32bitoffsetreg>
} // end dwt_setdelayedtrxtime()
 8003064:	bd08      	pop	{r3, pc}
	...

08003068 <dwt_starttx>:
{
 8003068:	b508      	push	{r3, lr}
    if ((mode & DWT_START_TX_DELAYED) || (mode & DWT_START_TX_DLY_REF)
 800306a:	f010 0f1d 	tst.w	r0, #29
 800306e:	d06d      	beq.n	800314c <dwt_starttx+0xe4>
        if(mode & DWT_START_TX_DELAYED) //delayed TX
 8003070:	f010 0f01 	tst.w	r0, #1
 8003074:	d01f      	beq.n	80030b6 <dwt_starttx+0x4e>
            if(mode & DWT_RESPONSE_EXPECTED)
 8003076:	f010 0f02 	tst.w	r0, #2
 800307a:	d015      	beq.n	80030a8 <dwt_starttx+0x40>
                dwt_writefastCMD(CMD_DTX_W4R);
 800307c:	2300      	movs	r3, #0
 800307e:	461a      	mov	r2, r3
 8003080:	4619      	mov	r1, r3
 8003082:	200d      	movs	r0, #13
 8003084:	f7ff f930 	bl	80022e8 <dwt_writetodevice>
        checkTxOK = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 8003088:	2103      	movs	r1, #3
 800308a:	2044      	movs	r0, #68	; 0x44
 800308c:	f7ff f9f1 	bl	8002472 <dwt_read8bitoffsetreg>
        if ((checkTxOK & (SYS_STATUS_HPDWARN_BIT_MASK>>24)) == 0) // Transmit Delayed Send set over Half a Period away.
 8003090:	f010 0f08 	tst.w	r0, #8
 8003094:	d151      	bne.n	800313a <dwt_starttx+0xd2>
            sys_state = dwt_read32bitreg(SYS_STATE_LO_ID);
 8003096:	2100      	movs	r1, #0
 8003098:	4841      	ldr	r0, [pc, #260]	; (80031a0 <dwt_starttx+0x138>)
 800309a:	f7ff f9a4 	bl	80023e6 <dwt_read32bitoffsetreg>
            if (sys_state == DW_SYS_STATE_TXERR)
 800309e:	f5b0 2f50 	cmp.w	r0, #851968	; 0xd0000
 80030a2:	d041      	beq.n	8003128 <dwt_starttx+0xc0>
                retval = DWT_SUCCESS ; // All okay
 80030a4:	2000      	movs	r0, #0
} // end dwt_starttx()
 80030a6:	bd08      	pop	{r3, pc}
                dwt_writefastCMD(CMD_DTX);
 80030a8:	2300      	movs	r3, #0
 80030aa:	461a      	mov	r2, r3
 80030ac:	4619      	mov	r1, r3
 80030ae:	2003      	movs	r0, #3
 80030b0:	f7ff f91a 	bl	80022e8 <dwt_writetodevice>
 80030b4:	e7e8      	b.n	8003088 <dwt_starttx+0x20>
        else if (mode & DWT_START_TX_DLY_RS) //delayed TX WRT RX timestamp
 80030b6:	f010 0f08 	tst.w	r0, #8
 80030ba:	d010      	beq.n	80030de <dwt_starttx+0x76>
            if(mode & DWT_RESPONSE_EXPECTED)
 80030bc:	f010 0f02 	tst.w	r0, #2
 80030c0:	d006      	beq.n	80030d0 <dwt_starttx+0x68>
                dwt_writefastCMD(CMD_DTX_RS_W4R);
 80030c2:	2300      	movs	r3, #0
 80030c4:	461a      	mov	r2, r3
 80030c6:	4619      	mov	r1, r3
 80030c8:	200f      	movs	r0, #15
 80030ca:	f7ff f90d 	bl	80022e8 <dwt_writetodevice>
 80030ce:	e7db      	b.n	8003088 <dwt_starttx+0x20>
                dwt_writefastCMD(CMD_DTX_RS);
 80030d0:	2300      	movs	r3, #0
 80030d2:	461a      	mov	r2, r3
 80030d4:	4619      	mov	r1, r3
 80030d6:	2007      	movs	r0, #7
 80030d8:	f7ff f906 	bl	80022e8 <dwt_writetodevice>
 80030dc:	e7d4      	b.n	8003088 <dwt_starttx+0x20>
        else if (mode & DWT_START_TX_DLY_TS) //delayed TX WRT TX timestamp
 80030de:	f010 0f10 	tst.w	r0, #16
 80030e2:	d010      	beq.n	8003106 <dwt_starttx+0x9e>
            if(mode & DWT_RESPONSE_EXPECTED)
 80030e4:	f010 0f02 	tst.w	r0, #2
 80030e8:	d006      	beq.n	80030f8 <dwt_starttx+0x90>
                dwt_writefastCMD(CMD_DTX_TS_W4R);
 80030ea:	2300      	movs	r3, #0
 80030ec:	461a      	mov	r2, r3
 80030ee:	4619      	mov	r1, r3
 80030f0:	200e      	movs	r0, #14
 80030f2:	f7ff f8f9 	bl	80022e8 <dwt_writetodevice>
 80030f6:	e7c7      	b.n	8003088 <dwt_starttx+0x20>
                dwt_writefastCMD(CMD_DTX_TS);
 80030f8:	2300      	movs	r3, #0
 80030fa:	461a      	mov	r2, r3
 80030fc:	4619      	mov	r1, r3
 80030fe:	2005      	movs	r0, #5
 8003100:	f7ff f8f2 	bl	80022e8 <dwt_writetodevice>
 8003104:	e7c0      	b.n	8003088 <dwt_starttx+0x20>
            if(mode & DWT_RESPONSE_EXPECTED)
 8003106:	f010 0f02 	tst.w	r0, #2
 800310a:	d006      	beq.n	800311a <dwt_starttx+0xb2>
                dwt_writefastCMD(CMD_DTX_REF_W4R);
 800310c:	2300      	movs	r3, #0
 800310e:	461a      	mov	r2, r3
 8003110:	4619      	mov	r1, r3
 8003112:	2010      	movs	r0, #16
 8003114:	f7ff f8e8 	bl	80022e8 <dwt_writetodevice>
 8003118:	e7b6      	b.n	8003088 <dwt_starttx+0x20>
                dwt_writefastCMD(CMD_DTX_REF);
 800311a:	2300      	movs	r3, #0
 800311c:	461a      	mov	r2, r3
 800311e:	4619      	mov	r1, r3
 8003120:	2009      	movs	r0, #9
 8003122:	f7ff f8e1 	bl	80022e8 <dwt_writetodevice>
 8003126:	e7af      	b.n	8003088 <dwt_starttx+0x20>
                dwt_writefastCMD(CMD_TXRXOFF);
 8003128:	2300      	movs	r3, #0
 800312a:	461a      	mov	r2, r3
 800312c:	4619      	mov	r1, r3
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff f8da 	bl	80022e8 <dwt_writetodevice>
                retval = DWT_ERROR ; // Failed !
 8003134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003138:	e7b5      	b.n	80030a6 <dwt_starttx+0x3e>
            dwt_writefastCMD(CMD_TXRXOFF);
 800313a:	2300      	movs	r3, #0
 800313c:	461a      	mov	r2, r3
 800313e:	4619      	mov	r1, r3
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff f8d1 	bl	80022e8 <dwt_writetodevice>
            retval = DWT_ERROR ; // Failed !
 8003146:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800314a:	e7ac      	b.n	80030a6 <dwt_starttx+0x3e>
    else if(mode & DWT_START_TX_CCA)
 800314c:	f010 0f20 	tst.w	r0, #32
 8003150:	d012      	beq.n	8003178 <dwt_starttx+0x110>
        if(mode & DWT_RESPONSE_EXPECTED)
 8003152:	f010 0f02 	tst.w	r0, #2
 8003156:	d007      	beq.n	8003168 <dwt_starttx+0x100>
            dwt_writefastCMD(CMD_CCA_TX_W4R);
 8003158:	2300      	movs	r3, #0
 800315a:	461a      	mov	r2, r3
 800315c:	4619      	mov	r1, r3
 800315e:	2011      	movs	r0, #17
 8003160:	f7ff f8c2 	bl	80022e8 <dwt_writetodevice>
    int retval = DWT_SUCCESS ;
 8003164:	2000      	movs	r0, #0
 8003166:	e79e      	b.n	80030a6 <dwt_starttx+0x3e>
            dwt_writefastCMD(CMD_CCA_TX);
 8003168:	2300      	movs	r3, #0
 800316a:	461a      	mov	r2, r3
 800316c:	4619      	mov	r1, r3
 800316e:	200b      	movs	r0, #11
 8003170:	f7ff f8ba 	bl	80022e8 <dwt_writetodevice>
    int retval = DWT_SUCCESS ;
 8003174:	2000      	movs	r0, #0
 8003176:	e796      	b.n	80030a6 <dwt_starttx+0x3e>
        if(mode & DWT_RESPONSE_EXPECTED)
 8003178:	f010 0f02 	tst.w	r0, #2
 800317c:	d007      	beq.n	800318e <dwt_starttx+0x126>
            dwt_writefastCMD(CMD_TX_W4R);
 800317e:	2300      	movs	r3, #0
 8003180:	461a      	mov	r2, r3
 8003182:	4619      	mov	r1, r3
 8003184:	200c      	movs	r0, #12
 8003186:	f7ff f8af 	bl	80022e8 <dwt_writetodevice>
    int retval = DWT_SUCCESS ;
 800318a:	2000      	movs	r0, #0
 800318c:	e78b      	b.n	80030a6 <dwt_starttx+0x3e>
            dwt_writefastCMD(CMD_TX);
 800318e:	2300      	movs	r3, #0
 8003190:	461a      	mov	r2, r3
 8003192:	4619      	mov	r1, r3
 8003194:	2001      	movs	r0, #1
 8003196:	f7ff f8a7 	bl	80022e8 <dwt_writetodevice>
    int retval = DWT_SUCCESS ;
 800319a:	2000      	movs	r0, #0
 800319c:	e783      	b.n	80030a6 <dwt_starttx+0x3e>
 800319e:	bf00      	nop
 80031a0:	000f0030 	.word	0x000f0030

080031a4 <dwt_setrxtimeout>:
{
 80031a4:	b508      	push	{r3, lr}
    if(time > 0)
 80031a6:	b168      	cbz	r0, 80031c4 <dwt_setrxtimeout+0x20>
 80031a8:	4602      	mov	r2, r0
        dwt_write32bitoffsetreg(RX_FWTO_ID, 0, time);
 80031aa:	2100      	movs	r1, #0
 80031ac:	2034      	movs	r0, #52	; 0x34
 80031ae:	f7ff f8a4 	bl	80022fa <dwt_write32bitoffsetreg>
        dwt_or16bitoffsetreg(SYS_CFG_ID, 0, SYS_CFG_RXWTOE_BIT_MASK); //set the RX FWTO bit
 80031b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031ba:	2100      	movs	r1, #0
 80031bc:	2010      	movs	r0, #16
 80031be:	f7ff f9fd 	bl	80025bc <dwt_modify16bitoffsetreg>
} // end dwt_setrxtimeout()
 80031c2:	bd08      	pop	{r3, pc}
        dwt_and16bitoffsetreg(SYS_CFG_ID, 0, (uint16_t)(~SYS_CFG_RXWTOE_BIT_MASK)); //clear the RX FWTO bit
 80031c4:	2300      	movs	r3, #0
 80031c6:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 80031ca:	4619      	mov	r1, r3
 80031cc:	2010      	movs	r0, #16
 80031ce:	f7ff f9f5 	bl	80025bc <dwt_modify16bitoffsetreg>
} // end dwt_setrxtimeout()
 80031d2:	e7f6      	b.n	80031c2 <dwt_setrxtimeout+0x1e>

080031d4 <dwt_calcbandwidthadj>:
 *
 * output parameters:
 * returns: (uint8_t) The setting that was written to the PG_DELAY register (when calibration completed)
 */
uint8_t dwt_calcbandwidthadj(uint16_t target_count, int channel)
{
 80031d4:	b538      	push	{r3, r4, r5, lr}
 80031d6:	4605      	mov	r5, r0
 80031d8:	460c      	mov	r4, r1
    // Force system clock to FOSC/4 and TX clocks on and enable RF blocks
    dwt_force_clocks(FORCE_CLK_SYS_TX);
 80031da:	2001      	movs	r0, #1
 80031dc:	f7ff f8d6 	bl	800238c <dwt_force_clocks>
    dwt_enable_rf_tx(channel, 0);
 80031e0:	2100      	movs	r1, #0
 80031e2:	4620      	mov	r0, r4
 80031e4:	f7ff f994 	bl	8002510 <dwt_enable_rf_tx>
    dwt_enable_rftx_blocks(channel);
 80031e8:	4620      	mov	r0, r4
 80031ea:	f7ff f9cb 	bl	8002584 <dwt_enable_rftx_blocks>

    // Write to the PG target before kicking off PG auto-cal with given target value
    dwt_write16bitoffsetreg(PG_CAL_TARGET_ID, 0x0, target_count & PG_CAL_TARGET_TARGET_BIT_MASK);
 80031ee:	f3c5 020b 	ubfx	r2, r5, #0, #12
 80031f2:	2100      	movs	r1, #0
 80031f4:	480f      	ldr	r0, [pc, #60]	; (8003234 <dwt_calcbandwidthadj+0x60>)
 80031f6:	f7ff f8b9 	bl	800236c <dwt_write16bitoffsetreg>
    // Run PG count cal
    dwt_or8bitoffsetreg(PGC_CTRL_ID, 0x0, (uint8_t)(PGC_CTRL_PGC_START_BIT_MASK | PGC_CTRL_PGC_AUTO_CAL_BIT_MASK));
 80031fa:	2303      	movs	r3, #3
 80031fc:	22ff      	movs	r2, #255	; 0xff
 80031fe:	2100      	movs	r1, #0
 8003200:	480d      	ldr	r0, [pc, #52]	; (8003238 <dwt_calcbandwidthadj+0x64>)
 8003202:	f7ff fa0d 	bl	8002620 <dwt_modify8bitoffsetreg>
    // Wait for calibration to complete
    while (dwt_read8bitoffsetreg(PGC_CTRL_ID, 0) & PGC_CTRL_PGC_START_BIT_MASK);
 8003206:	2100      	movs	r1, #0
 8003208:	480b      	ldr	r0, [pc, #44]	; (8003238 <dwt_calcbandwidthadj+0x64>)
 800320a:	f7ff f932 	bl	8002472 <dwt_read8bitoffsetreg>
 800320e:	f010 0f01 	tst.w	r0, #1
 8003212:	d1f8      	bne.n	8003206 <dwt_calcbandwidthadj+0x32>

    //Restore clocks to AUTO and turn off TX blocks
    dwt_disable_rftx_blocks();
 8003214:	f7ff f886 	bl	8002324 <dwt_disable_rftx_blocks>
    dwt_disable_rf_tx(0);
 8003218:	2000      	movs	r0, #0
 800321a:	f7ff f88d 	bl	8002338 <dwt_disable_rf_tx>
    dwt_force_clocks(FORCE_CLK_AUTO);
 800321e:	2005      	movs	r0, #5
 8003220:	f7ff f8b4 	bl	800238c <dwt_force_clocks>

    return  (dwt_read8bitoffsetreg(TX_CTRL_HI_ID, 0) & TX_CTRL_HI_TX_PG_DELAY_BIT_MASK);
 8003224:	2100      	movs	r1, #0
 8003226:	4805      	ldr	r0, [pc, #20]	; (800323c <dwt_calcbandwidthadj+0x68>)
 8003228:	f7ff f923 	bl	8002472 <dwt_read8bitoffsetreg>
}
 800322c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8003230:	bd38      	pop	{r3, r4, r5, pc}
 8003232:	bf00      	nop
 8003234:	0008001c 	.word	0x0008001c
 8003238:	00080010 	.word	0x00080010
 800323c:	0007001c 	.word	0x0007001c

08003240 <dwt_configuretxrf>:
{
 8003240:	b510      	push	{r4, lr}
 8003242:	4604      	mov	r4, r0
    if (config->PGcount == 0) {
 8003244:	8903      	ldrh	r3, [r0, #8]
 8003246:	b953      	cbnz	r3, 800325e <dwt_configuretxrf+0x1e>
        dwt_write8bitoffsetreg(TX_CTRL_HI_ID, 0, config->PGdly);
 8003248:	7802      	ldrb	r2, [r0, #0]
 800324a:	2100      	movs	r1, #0
 800324c:	480b      	ldr	r0, [pc, #44]	; (800327c <dwt_configuretxrf+0x3c>)
 800324e:	f7ff f8b5 	bl	80023bc <dwt_write8bitoffsetreg>
    dwt_write32bitreg(TX_POWER_ID, config->power);
 8003252:	6862      	ldr	r2, [r4, #4]
 8003254:	2100      	movs	r1, #0
 8003256:	480a      	ldr	r0, [pc, #40]	; (8003280 <dwt_configuretxrf+0x40>)
 8003258:	f7ff f84f 	bl	80022fa <dwt_write32bitoffsetreg>
}
 800325c:	bd10      	pop	{r4, pc}
        if (dwt_read8bitoffsetreg(CHAN_CTRL_ID, 0) & 0x1)
 800325e:	2100      	movs	r1, #0
 8003260:	4808      	ldr	r0, [pc, #32]	; (8003284 <dwt_configuretxrf+0x44>)
 8003262:	f7ff f906 	bl	8002472 <dwt_read8bitoffsetreg>
 8003266:	f010 0f01 	tst.w	r0, #1
 800326a:	d104      	bne.n	8003276 <dwt_configuretxrf+0x36>
        uint8_t channel = 5;
 800326c:	2105      	movs	r1, #5
        dwt_calcbandwidthadj(config->PGcount, channel);
 800326e:	8920      	ldrh	r0, [r4, #8]
 8003270:	f7ff ffb0 	bl	80031d4 <dwt_calcbandwidthadj>
 8003274:	e7ed      	b.n	8003252 <dwt_configuretxrf+0x12>
            channel = 9;
 8003276:	2109      	movs	r1, #9
 8003278:	e7f9      	b.n	800326e <dwt_configuretxrf+0x2e>
 800327a:	bf00      	nop
 800327c:	0007001c 	.word	0x0007001c
 8003280:	0001000c 	.word	0x0001000c
 8003284:	00010014 	.word	0x00010014

08003288 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8003288:	b510      	push	{r4, lr}
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800328a:	f000 fba5 	bl	80039d8 <port_GetEXT_IRQStatus>

	if(s) {
 800328e:	4604      	mov	r4, r0
 8003290:	b908      	cbnz	r0, 8003296 <decamutexon+0xe>
		port_DisableEXT_IRQ(); //disable the external interrupt line
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
}
 8003292:	4620      	mov	r0, r4
 8003294:	bd10      	pop	{r4, pc}
		port_DisableEXT_IRQ(); //disable the external interrupt line
 8003296:	f000 fb70 	bl	800397a <port_DisableEXT_IRQ>
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 800329a:	e7fa      	b.n	8003292 <decamutexon+0xa>

0800329c <decamutexoff>:
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 800329c:	b900      	cbnz	r0, 80032a0 <decamutexoff+0x4>
 800329e:	4770      	bx	lr
{
 80032a0:	b508      	push	{r3, lr}
		port_EnableEXT_IRQ();
 80032a2:	f000 fb71 	bl	8003988 <port_EnableEXT_IRQ>
	}
}
 80032a6:	bd08      	pop	{r3, pc}

080032a8 <deca_usleep>:
}


/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_usleep(unsigned long time_us)
{
 80032a8:	b508      	push	{r3, lr}
    usleep(time_us);
 80032aa:	f000 fb3f 	bl	800392c <usleep>
}
 80032ae:	bd08      	pop	{r3, pc}

080032b0 <writetospiwithcrc>:
                uint16_t      headerLength,
                const uint8_t *headerBuffer,
                uint16_t      bodyLength,
                const uint8_t *bodyBuffer,
                uint8_t       crc8)
{
 80032b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032b4:	4681      	mov	r9, r0
 80032b6:	4688      	mov	r8, r1
 80032b8:	4617      	mov	r7, r2
 80032ba:	461e      	mov	r6, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80032bc:	f7ff ffe4 	bl	8003288 <decamutexon>
 80032c0:	4604      	mov	r4, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80032c2:	4815      	ldr	r0, [pc, #84]	; (8003318 <writetospiwithcrc+0x68>)
 80032c4:	f002 f8fb 	bl	80054be <HAL_SPI_GetState>
 80032c8:	2801      	cmp	r0, #1
 80032ca:	d1fa      	bne.n	80032c2 <writetospiwithcrc+0x12>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80032cc:	2200      	movs	r2, #0
 80032ce:	2110      	movs	r1, #16
 80032d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032d4:	f000 fe42 	bl	8003f5c <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)headerBuffer, headerLength, 10);    /* Send header in polling mode */
 80032d8:	4d0f      	ldr	r5, [pc, #60]	; (8003318 <writetospiwithcrc+0x68>)
 80032da:	230a      	movs	r3, #10
 80032dc:	464a      	mov	r2, r9
 80032de:	4641      	mov	r1, r8
 80032e0:	4628      	mov	r0, r5
 80032e2:	f001 fda3 	bl	8004e2c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)bodyBuffer, bodyLength, 10);        /* Send data in polling mode */
 80032e6:	230a      	movs	r3, #10
 80032e8:	463a      	mov	r2, r7
 80032ea:	4631      	mov	r1, r6
 80032ec:	4628      	mov	r0, r5
 80032ee:	f001 fd9d 	bl	8004e2c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&crc8, 1, 10);      /* Send data in polling mode */
 80032f2:	230a      	movs	r3, #10
 80032f4:	2201      	movs	r2, #1
 80032f6:	a908      	add	r1, sp, #32
 80032f8:	4628      	mov	r0, r5
 80032fa:	f001 fd97 	bl	8004e2c <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80032fe:	2201      	movs	r2, #1
 8003300:	2110      	movs	r1, #16
 8003302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003306:	f000 fe29 	bl	8003f5c <HAL_GPIO_WritePin>
    decamutexoff(stat);
 800330a:	4620      	mov	r0, r4
 800330c:	f7ff ffc6 	bl	800329c <decamutexoff>
    return 0;
} // end writetospiwithcrc()
 8003310:	2000      	movs	r0, #0
 8003312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003316:	bf00      	nop
 8003318:	200002d8 	.word	0x200002d8

0800331c <writetospi>:
 */
int writetospi(uint16_t       headerLength,
               const uint8_t  *headerBuffer,
               uint16_t       bodyLength,
               const uint8_t  *bodyBuffer)
{
 800331c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003320:	4607      	mov	r7, r0
 8003322:	460e      	mov	r6, r1
 8003324:	4614      	mov	r4, r2
 8003326:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8003328:	f7ff ffae 	bl	8003288 <decamutexon>
 800332c:	4605      	mov	r5, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800332e:	4813      	ldr	r0, [pc, #76]	; (800337c <writetospi+0x60>)
 8003330:	f002 f8c5 	bl	80054be <HAL_SPI_GetState>
 8003334:	2801      	cmp	r0, #1
 8003336:	d1fa      	bne.n	800332e <writetospi+0x12>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8003338:	2200      	movs	r2, #0
 800333a:	2110      	movs	r1, #16
 800333c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003340:	f000 fe0c 	bl	8003f5c <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)headerBuffer, headerLength, HAL_MAX_DELAY); /* Send header in polling mode */
 8003344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003348:	463a      	mov	r2, r7
 800334a:	4631      	mov	r1, r6
 800334c:	480b      	ldr	r0, [pc, #44]	; (800337c <writetospi+0x60>)
 800334e:	f001 fd6d 	bl	8004e2c <HAL_SPI_Transmit>

    if(bodyLength != 0)
 8003352:	b95c      	cbnz	r4, 800336c <writetospi+0x50>
        HAL_SPI_Transmit(&hspi1, (uint8_t *)bodyBuffer,   bodyLength, HAL_MAX_DELAY);     /* Send data in polling mode */

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8003354:	2201      	movs	r2, #1
 8003356:	2110      	movs	r1, #16
 8003358:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800335c:	f000 fdfe 	bl	8003f5c <HAL_GPIO_WritePin>
    decamutexoff(stat);
 8003360:	4628      	mov	r0, r5
 8003362:	f7ff ff9b 	bl	800329c <decamutexoff>
    return 0;
} // end writetospi()
 8003366:	2000      	movs	r0, #0
 8003368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_SPI_Transmit(&hspi1, (uint8_t *)bodyBuffer,   bodyLength, HAL_MAX_DELAY);     /* Send data in polling mode */
 800336c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003370:	4622      	mov	r2, r4
 8003372:	4641      	mov	r1, r8
 8003374:	4801      	ldr	r0, [pc, #4]	; (800337c <writetospi+0x60>)
 8003376:	f001 fd59 	bl	8004e2c <HAL_SPI_Transmit>
 800337a:	e7eb      	b.n	8003354 <writetospi+0x38>
 800337c:	200002d8 	.word	0x200002d8

08003380 <readfromspi>:
//#pragma GCC optimize ("O3")
int readfromspi(uint16_t  headerLength,
                uint8_t   *headerBuffer,
                uint16_t  readlength,
                uint8_t   *readBuffer)
{
 8003380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003384:	4605      	mov	r5, r0
 8003386:	460e      	mov	r6, r1
 8003388:	4691      	mov	r9, r2
 800338a:	4698      	mov	r8, r3
    int i;

    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800338c:	f7ff ff7c 	bl	8003288 <decamutexon>
 8003390:	4607      	mov	r7, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8003392:	4814      	ldr	r0, [pc, #80]	; (80033e4 <readfromspi+0x64>)
 8003394:	f002 f893 	bl	80054be <HAL_SPI_GetState>
 8003398:	2801      	cmp	r0, #1
 800339a:	d1fa      	bne.n	8003392 <readfromspi+0x12>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800339c:	2200      	movs	r2, #0
 800339e:	2110      	movs	r1, #16
 80033a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033a4:	f000 fdda 	bl	8003f5c <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 80033a8:	2400      	movs	r4, #0
 80033aa:	e007      	b.n	80033bc <readfromspi+0x3c>
    {
        HAL_SPI_Transmit(&hspi1, (uint8_t*)&headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 80033ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033b0:	2201      	movs	r2, #1
 80033b2:	1931      	adds	r1, r6, r4
 80033b4:	480b      	ldr	r0, [pc, #44]	; (80033e4 <readfromspi+0x64>)
 80033b6:	f001 fd39 	bl	8004e2c <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 80033ba:	3401      	adds	r4, #1
 80033bc:	42a5      	cmp	r5, r4
 80033be:	dcf5      	bgt.n	80033ac <readfromspi+0x2c>

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */


    HAL_SPI_Receive(&hspi1, readBuffer, readlength, 100);
 80033c0:	2364      	movs	r3, #100	; 0x64
 80033c2:	464a      	mov	r2, r9
 80033c4:	4641      	mov	r1, r8
 80033c6:	4807      	ldr	r0, [pc, #28]	; (80033e4 <readfromspi+0x64>)
 80033c8:	f001 ffa5 	bl	8005316 <HAL_SPI_Receive>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80033cc:	2201      	movs	r2, #1
 80033ce:	2110      	movs	r1, #16
 80033d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033d4:	f000 fdc2 	bl	8003f5c <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80033d8:	4638      	mov	r0, r7
 80033da:	f7ff ff5f 	bl	800329c <decamutexoff>

    return 0;
} // end readfromspi()
 80033de:	2000      	movs	r0, #0
 80033e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033e4:	200002d8 	.word	0x200002d8

080033e8 <send_tx_poll_msg>:
/*
 * The 'poll' message initiating the ranging exchange includes a 32-bit counter which is part
 * of the IV used to generate the scrambled timestamp sequence (STS) in the transmitted packet.
 */
static void send_tx_poll_msg(void)
{
 80033e8:	b510      	push	{r4, lr}
    /* Write frame data to DW IC and prepare transmission. See NOTE 7 below. */
    tx_poll_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 80033ea:	4c11      	ldr	r4, [pc, #68]	; (8003430 <send_tx_poll_msg+0x48>)
 80033ec:	4b11      	ldr	r3, [pc, #68]	; (8003434 <send_tx_poll_msg+0x4c>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	70a3      	strb	r3, [r4, #2]

    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS_BIT_MASK);
 80033f2:	2280      	movs	r2, #128	; 0x80
 80033f4:	2100      	movs	r1, #0
 80033f6:	2044      	movs	r0, #68	; 0x44
 80033f8:	f7fe ff7f 	bl	80022fa <dwt_write32bitoffsetreg>
    dwt_writetxdata(sizeof(tx_poll_msg), tx_poll_msg, 0); /* Zero offset in TX buffer. */
 80033fc:	2200      	movs	r2, #0
 80033fe:	4621      	mov	r1, r4
 8003400:	200c      	movs	r0, #12
 8003402:	f7ff fab5 	bl	8002970 <dwt_writetxdata>
    dwt_writetxfctrl(sizeof(tx_poll_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 8003406:	2201      	movs	r2, #1
 8003408:	2100      	movs	r1, #0
 800340a:	200c      	movs	r0, #12
 800340c:	f7ff fadc 	bl	80029c8 <dwt_writetxfctrl>

    /* Start transmission. */
    dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);
 8003410:	2002      	movs	r0, #2
 8003412:	f7ff fe29 	bl	8003068 <dwt_starttx>

    /* Poll DW IC until TX frame sent event set. See NOTE 8 below. */
    while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS_BIT_MASK))
 8003416:	2100      	movs	r1, #0
 8003418:	2044      	movs	r0, #68	; 0x44
 800341a:	f7fe ffe4 	bl	80023e6 <dwt_read32bitoffsetreg>
 800341e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003422:	d0f8      	beq.n	8003416 <send_tx_poll_msg+0x2e>
    { };

    /* Clear TXFRS event. */
    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS_BIT_MASK);
 8003424:	2280      	movs	r2, #128	; 0x80
 8003426:	2100      	movs	r1, #0
 8003428:	2044      	movs	r0, #68	; 0x44
 800342a:	f7fe ff66 	bl	80022fa <dwt_write32bitoffsetreg>
}
 800342e:	bd10      	pop	{r4, pc}
 8003430:	200000d8 	.word	0x200000d8
 8003434:	200002b4 	.word	0x200002b4

08003438 <ds_twr_initiator_sts>:
 * @param  none
 *
 * @return none
 */
int ds_twr_initiator_sts(void)
{
 8003438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800343c:	b085      	sub	sp, #20
    int16_t stsQual; /* This will contain STS quality index and status */
    int goodSts = 0; /* Used for checking STS quality in received signal */
    uint8_t firstLoopFlag = 0; /* Used for checking if the program has gone through the main loop for the first time */

    /* Display application name on UART. */
    test_run_info((unsigned char *)APP_NAME);
 800343e:	48c1      	ldr	r0, [pc, #772]	; (8003744 <ds_twr_initiator_sts+0x30c>)
 8003440:	f000 fa02 	bl	8003848 <test_run_info>

    /* Reset DW IC */
    my_reset_DWIC(); /* Target specific drive of RSTn line into DW IC low for a period. */
 8003444:	f000 fad0 	bl	80039e8 <my_reset_DWIC>

    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */
 8003448:	f7ff fdfe 	bl	8003048 <dwt_checkidlerc>
 800344c:	2800      	cmp	r0, #0
 800344e:	d0fb      	beq.n	8003448 <ds_twr_initiator_sts+0x10>
    { };

    /* ====> Start timer from STM <==== */
    //HAL_TIM_Base_Start(&htim2);

    if (dwt_initialise(DWT_DW_IDLE) == DWT_ERROR)
 8003450:	2001      	movs	r0, #1
 8003452:	f7ff fd55 	bl	8002f00 <dwt_initialise>
 8003456:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800345a:	d032      	beq.n	80034c2 <ds_twr_initiator_sts+0x8a>
	/* Enabling LEDs here for debug so that for each TX the D1 LED will flash on DW3000 red eval-shield boards.
	 * Note, in real low power applications the LEDs should not be used. */
	//dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);

    /* Configure DW IC. See NOTE 15 below. */
    if(dwt_configure(&config_options)) /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
 800345c:	48ba      	ldr	r0, [pc, #744]	; (8003748 <ds_twr_initiator_sts+0x310>)
 800345e:	f7ff fadb 	bl	8002a18 <dwt_configure>
 8003462:	bb90      	cbnz	r0, 80034ca <ds_twr_initiator_sts+0x92>
        while (1)
        { };
    }

    /* Configure the TX spectrum parameters (power, PG delay and PG count) */
    if(config_options.chan == 5)
 8003464:	4bb8      	ldr	r3, [pc, #736]	; (8003748 <ds_twr_initiator_sts+0x310>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b05      	cmp	r3, #5
 800346a:	d032      	beq.n	80034d2 <ds_twr_initiator_sts+0x9a>
    {
        dwt_configuretxrf(&txconfig_options);
    }
    else
    {
        dwt_configuretxrf(&txconfig_options_ch9);
 800346c:	48b7      	ldr	r0, [pc, #732]	; (800374c <ds_twr_initiator_sts+0x314>)
 800346e:	f7ff fee7 	bl	8003240 <dwt_configuretxrf>
#elif INITIATOR_TYPE == 'F'
	dwt_configureframefilter(DWT_FF_ENABLE_802_15_4, DWT_FF_DATA_EN);
   	dwt_setpanid(0xDECA);
   	dwt_setaddress16(0x4656);
#elif  INITIATOR_TYPE == 'G'
	dwt_configureframefilter(DWT_FF_ENABLE_802_15_4, DWT_FF_DATA_EN);
 8003472:	2102      	movs	r1, #2
 8003474:	4608      	mov	r0, r1
 8003476:	f7ff fd07 	bl	8002e88 <dwt_configureframefilter>
	dwt_setpanid(0xDECA);
 800347a:	f64d 60ca 	movw	r0, #57034	; 0xdeca
 800347e:	f7ff fd1f 	bl	8002ec0 <dwt_setpanid>
	dwt_setaddress16(0x4756);
 8003482:	f244 7056 	movw	r0, #18262	; 0x4756
 8003486:	f7ff fd22 	bl	8002ece <dwt_setaddress16>
#endif

    /* Apply default antenna delay value. See NOTE 2 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 800348a:	f244 008d 	movw	r0, #16525	; 0x408d
 800348e:	f7ff fa5d 	bl	800294c <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 8003492:	f244 008d 	movw	r0, #16525	; 0x408d
 8003496:	f7ff fa61 	bl	800295c <dwt_settxantennadelay>

    /* Set expected response's delay and timeout. See NOTE 14, 17 and 18 below.
     * As this example only handles one incoming frame with always the same delay and timeout, those values can be set here once for all. */
    dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS);
 800349a:	f240 30b1 	movw	r0, #945	; 0x3b1
 800349e:	f7ff fdbf 	bl	8003020 <dwt_setrxaftertxdelay>
    dwt_setrxtimeout(RESP_RX_TIMEOUT_UUS);
 80034a2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80034a6:	f7ff fe7d 	bl	80031a4 <dwt_setrxtimeout>

    /* Set expected response's timeout. See NOTE 1 and 5 below.
     * As this example only handles one incoming frame with always the same delay, this value can be set here once for all. */
    set_resp_rx_timeout(RESP_RX_TIMEOUT_UUS, &config_options);
 80034aa:	49a7      	ldr	r1, [pc, #668]	; (8003748 <ds_twr_initiator_sts+0x310>)
 80034ac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80034b0:	f000 fb02 	bl	8003ab8 <set_resp_rx_timeout>

    // for random
    srand(time(NULL));
 80034b4:	2000      	movs	r0, #0
 80034b6:	f7fd fc31 	bl	8000d1c <time>
 80034ba:	f7fd fb3d 	bl	8000b38 <srand>
    uint8_t firstLoopFlag = 0; /* Used for checking if the program has gone through the main loop for the first time */
 80034be:	2400      	movs	r4, #0
 80034c0:	e125      	b.n	800370e <ds_twr_initiator_sts+0x2d6>
        test_run_info((unsigned char *)"INIT FAILED     ");
 80034c2:	48a3      	ldr	r0, [pc, #652]	; (8003750 <ds_twr_initiator_sts+0x318>)
 80034c4:	f000 f9c0 	bl	8003848 <test_run_info>
        while (1)
 80034c8:	e7fe      	b.n	80034c8 <ds_twr_initiator_sts+0x90>
        test_run_info((unsigned char *)"CONFIG FAILED     ");
 80034ca:	48a2      	ldr	r0, [pc, #648]	; (8003754 <ds_twr_initiator_sts+0x31c>)
 80034cc:	f000 f9bc 	bl	8003848 <test_run_info>
        while (1)
 80034d0:	e7fe      	b.n	80034d0 <ds_twr_initiator_sts+0x98>
        dwt_configuretxrf(&txconfig_options);
 80034d2:	48a1      	ldr	r0, [pc, #644]	; (8003758 <ds_twr_initiator_sts+0x320>)
 80034d4:	f7ff feb4 	bl	8003240 <dwt_configuretxrf>
 80034d8:	e7cb      	b.n	8003472 <ds_twr_initiator_sts+0x3a>
        else
        {
            /*
             * On subsequent loops, we only need to reload the lower 32 bits of STS IV.
             */
            dwt_writetodevice(STS_IV0_ID, 0, 4, (uint8_t *)&cp_iv);
 80034da:	4ba0      	ldr	r3, [pc, #640]	; (800375c <ds_twr_initiator_sts+0x324>)
 80034dc:	2204      	movs	r2, #4
 80034de:	2100      	movs	r1, #0
 80034e0:	489f      	ldr	r0, [pc, #636]	; (8003760 <ds_twr_initiator_sts+0x328>)
 80034e2:	f7fe ff01 	bl	80022e8 <dwt_writetodevice>
            dwt_configurestsloadiv();
 80034e6:	f7ff f935 	bl	8002754 <dwt_configurestsloadiv>
 80034ea:	e11c      	b.n	8003726 <ds_twr_initiator_sts+0x2ee>
        /* ====> Check current number of anchor and put destination address <==== */
        switch (current_anchor)
        {
			case 1: // anchor 1 A
			{
				tx_poll_msg[DESTINATION_ADDRESS_IDX] = address_of_A[0];
 80034ec:	499d      	ldr	r1, [pc, #628]	; (8003764 <ds_twr_initiator_sts+0x32c>)
 80034ee:	2241      	movs	r2, #65	; 0x41
 80034f0:	714a      	strb	r2, [r1, #5]
				tx_poll_msg[DESTINATION_ADDRESS_IDX + 1] = address_of_A[1];
 80034f2:	2301      	movs	r3, #1
 80034f4:	718b      	strb	r3, [r1, #6]

				rx_resp_msg[SOURCE_ADDRESS_IDX] = address_of_A[0];
 80034f6:	499c      	ldr	r1, [pc, #624]	; (8003768 <ds_twr_initiator_sts+0x330>)
 80034f8:	71ca      	strb	r2, [r1, #7]
				rx_resp_msg[SOURCE_ADDRESS_IDX + 1] = address_of_A[1];
 80034fa:	720b      	strb	r3, [r1, #8]

				tx_final_msg[DESTINATION_ADDRESS_IDX] = address_of_A[0];
 80034fc:	499b      	ldr	r1, [pc, #620]	; (800376c <ds_twr_initiator_sts+0x334>)
 80034fe:	714a      	strb	r2, [r1, #5]
				tx_final_msg[DESTINATION_ADDRESS_IDX + 1] = address_of_A[1];
 8003500:	718b      	strb	r3, [r1, #6]
		}

        /*
         * Send the poll message to the responder.
         */
        send_tx_poll_msg();
 8003502:	f7ff ff71 	bl	80033e8 <send_tx_poll_msg>

        /* We assume that the transmission is achieved correctly, poll for reception of a frame or error/timeout. See NOTE 8 below. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8003506:	2100      	movs	r1, #0
 8003508:	2044      	movs	r0, #68	; 0x44
 800350a:	f7fe ff6c 	bl	80023e6 <dwt_read32bitoffsetreg>
 800350e:	4b98      	ldr	r3, [pc, #608]	; (8003770 <ds_twr_initiator_sts+0x338>)
 8003510:	6018      	str	r0, [r3, #0]
 8003512:	4b98      	ldr	r3, [pc, #608]	; (8003774 <ds_twr_initiator_sts+0x33c>)
 8003514:	4003      	ands	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f5      	beq.n	8003506 <ds_twr_initiator_sts+0xce>
        //timtick_1 = __HAL_TIM_GET_COUNTER(&htim2);

        /*
         * Need to check the STS has been received and is good.
         */
        goodSts = dwt_readstsquality(&stsQual);
 800351a:	f10d 000e 	add.w	r0, sp, #14
 800351e:	f7ff fc71 	bl	8002e04 <dwt_readstsquality>

        /* Increment frame sequence number after transmission of the poll message (modulo 256). */
        frame_seq_nb++;
 8003522:	4a95      	ldr	r2, [pc, #596]	; (8003778 <ds_twr_initiator_sts+0x340>)
 8003524:	7813      	ldrb	r3, [r2, #0]
 8003526:	3301      	adds	r3, #1
 8003528:	7013      	strb	r3, [r2, #0]

        /*
         * Here we are checking for a good frame and good STS quality.
         */
        if ((status_reg & SYS_STATUS_RXFCG_BIT_MASK) && (goodSts >= 0))
 800352a:	4b91      	ldr	r3, [pc, #580]	; (8003770 <ds_twr_initiator_sts+0x338>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003532:	f000 80cb 	beq.w	80036cc <ds_twr_initiator_sts+0x294>
 8003536:	2800      	cmp	r0, #0
 8003538:	f2c0 80c8 	blt.w	80036cc <ds_twr_initiator_sts+0x294>
        {
            uint32_t frame_len;

            /* Clear good RX frame event in the DW IC status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_GOOD);
 800353c:	f44f 42de 	mov.w	r2, #28416	; 0x6f00
 8003540:	2100      	movs	r1, #0
 8003542:	2044      	movs	r0, #68	; 0x44
 8003544:	f7fe fed9 	bl	80022fa <dwt_write32bitoffsetreg>

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RXFLEN_MASK;
 8003548:	2100      	movs	r1, #0
 800354a:	204c      	movs	r0, #76	; 0x4c
 800354c:	f7fe ff4b 	bl	80023e6 <dwt_read32bitoffsetreg>
 8003550:	f000 017f 	and.w	r1, r0, #127	; 0x7f
            if (frame_len <= sizeof(rx_buffer))
 8003554:	2918      	cmp	r1, #24
 8003556:	f200 80a9 	bhi.w	80036ac <ds_twr_initiator_sts+0x274>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 800355a:	4d88      	ldr	r5, [pc, #544]	; (800377c <ds_twr_initiator_sts+0x344>)
 800355c:	2200      	movs	r2, #0
 800355e:	4628      	mov	r0, r5
 8003560:	f7ff fc1e 	bl	8002da0 <dwt_readrxdata>

                /* Check that the frame is the expected response from the companion "DS TWR responder STS" example.
                 * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
                rx_buffer[ALL_MSG_SN_IDX] = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	70ab      	strb	r3, [r5, #2]
                if (memcmp(rx_buffer, rx_resp_msg, ALL_MSG_COMMON_LEN) == 0)
 8003568:	220a      	movs	r2, #10
 800356a:	497f      	ldr	r1, [pc, #508]	; (8003768 <ds_twr_initiator_sts+0x330>)
 800356c:	4628      	mov	r0, r5
 800356e:	f7fc fedd 	bl	800032c <memcmp>
 8003572:	2800      	cmp	r0, #0
 8003574:	f040 808a 	bne.w	800368c <ds_twr_initiator_sts+0x254>
                    uint32_t final_tx_time;
                    uint64_t poll_tx_ts, resp_rx_ts, final_tx_ts;
                    int ret = DWT_ERROR;

                    /* Retrieve poll transmission and response reception timestamps. See NOTE 9 below. */
                    poll_tx_ts = get_tx_timestamp_u64();
 8003578:	f000 fab5 	bl	8003ae6 <get_tx_timestamp_u64>
 800357c:	4682      	mov	sl, r0
 800357e:	9101      	str	r1, [sp, #4]
                    resp_rx_ts = get_rx_timestamp_u64();
 8003580:	f000 facb 	bl	8003b1a <get_rx_timestamp_u64>
 8003584:	4607      	mov	r7, r0
 8003586:	4689      	mov	r9, r1

                    /* Compute final message transmission time. See NOTE 19 below. */
                    final_tx_time = (resp_rx_ts + (RESP_RX_TO_FINAL_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 8003588:	4b7d      	ldr	r3, [pc, #500]	; (8003780 <ds_twr_initiator_sts+0x348>)
 800358a:	18c3      	adds	r3, r0, r3
 800358c:	f141 0200 	adc.w	r2, r1, #0
 8003590:	0a1d      	lsrs	r5, r3, #8
 8003592:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
                    dwt_setdelayedtrxtime(final_tx_time);
 8003596:	4628      	mov	r0, r5
 8003598:	f7ff fd5e 	bl	8003058 <dwt_setdelayedtrxtime>

                    final_tx_ts = (((uint64_t)(final_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY;
 800359c:	f04f 0b00 	mov.w	fp, #0
 80035a0:	022e      	lsls	r6, r5, #8
 80035a2:	f426 76ff 	bic.w	r6, r6, #510	; 0x1fe
 80035a6:	f026 0601 	bic.w	r6, r6, #1
 80035aa:	0e2d      	lsrs	r5, r5, #24
 80035ac:	f244 038d 	movw	r3, #16525	; 0x408d
 80035b0:	18f6      	adds	r6, r6, r3
 80035b2:	f145 0500 	adc.w	r5, r5, #0

                    /* Write all timestamps in the final message. See NOTE 19 below. */
                    final_msg_set_ts(&tx_final_msg[FINAL_MSG_POLL_TX_TS_IDX], poll_tx_ts);
 80035b6:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 800376c <ds_twr_initiator_sts+0x334>
 80035ba:	4652      	mov	r2, sl
 80035bc:	9b01      	ldr	r3, [sp, #4]
 80035be:	f108 000a 	add.w	r0, r8, #10
 80035c2:	f000 fac4 	bl	8003b4e <final_msg_set_ts>
                    final_msg_set_ts(&tx_final_msg[FINAL_MSG_RESP_RX_TS_IDX], resp_rx_ts);
 80035c6:	463a      	mov	r2, r7
 80035c8:	464b      	mov	r3, r9
 80035ca:	f108 000e 	add.w	r0, r8, #14
 80035ce:	f000 fabe 	bl	8003b4e <final_msg_set_ts>
                    final_msg_set_ts(&tx_final_msg[FINAL_MSG_FINAL_TX_TS_IDX], final_tx_ts);
 80035d2:	4632      	mov	r2, r6
 80035d4:	462b      	mov	r3, r5
 80035d6:	f108 0012 	add.w	r0, r8, #18
 80035da:	f000 fab8 	bl	8003b4e <final_msg_set_ts>

                    /* Write and send final message. See NOTE 7 below. */
                    tx_final_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 80035de:	4b66      	ldr	r3, [pc, #408]	; (8003778 <ds_twr_initiator_sts+0x340>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	f888 3002 	strb.w	r3, [r8, #2]
                    dwt_writetxdata(sizeof(tx_final_msg), tx_final_msg, 0); /* Zero offset in TX buffer. */
 80035e6:	465a      	mov	r2, fp
 80035e8:	4641      	mov	r1, r8
 80035ea:	2018      	movs	r0, #24
 80035ec:	f7ff f9c0 	bl	8002970 <dwt_writetxdata>
                    dwt_writetxfctrl(sizeof(tx_final_msg), 0, 1); /* Zero offset in TX buffer, ranging bit set. */
 80035f0:	2201      	movs	r2, #1
 80035f2:	4659      	mov	r1, fp
 80035f4:	2018      	movs	r0, #24
 80035f6:	f7ff f9e7 	bl	80029c8 <dwt_writetxfctrl>

                    ret = dwt_starttx(DWT_START_TX_DELAYED);
 80035fa:	2001      	movs	r0, #1
 80035fc:	f7ff fd34 	bl	8003068 <dwt_starttx>
                    //timtick_2 = __HAL_TIM_GET_COUNTER(&htim2);
                    /* ====> Take difference  <==== */
                    //diff = timtick_2 - timtick_1;

                    /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 13 below. */
                    if (ret == DWT_SUCCESS)
 8003600:	2800      	cmp	r0, #0
 8003602:	d16e      	bne.n	80036e2 <ds_twr_initiator_sts+0x2aa>
                    {
                       /* Poll DW IC until TX frame sent event set. See NOTE 8 below. */
                       while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS_BIT_MASK))
 8003604:	2100      	movs	r1, #0
 8003606:	2044      	movs	r0, #68	; 0x44
 8003608:	f7fe feed 	bl	80023e6 <dwt_read32bitoffsetreg>
 800360c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003610:	d0f8      	beq.n	8003604 <ds_twr_initiator_sts+0x1cc>
                       { };

                       /* Clear TXFRS event. */
                       dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS_BIT_MASK);
 8003612:	2280      	movs	r2, #128	; 0x80
 8003614:	2100      	movs	r1, #0
 8003616:	2044      	movs	r0, #68	; 0x44
 8003618:	f7fe fe6f 	bl	80022fa <dwt_write32bitoffsetreg>

                       /* Increment frame sequence number after transmission of the final message (modulo 256). */
                       frame_seq_nb++;
 800361c:	4a56      	ldr	r2, [pc, #344]	; (8003778 <ds_twr_initiator_sts+0x340>)
 800361e:	7813      	ldrb	r3, [r2, #0]
 8003620:	3301      	adds	r3, #1
 8003622:	7013      	strb	r3, [r2, #0]
                       /* Increase a current anchor number */
                       current_anchor = (current_anchor + 1 ) % NUMBER_OF_ANCHORS;
 8003624:	4957      	ldr	r1, [pc, #348]	; (8003784 <ds_twr_initiator_sts+0x34c>)
 8003626:	780b      	ldrb	r3, [r1, #0]
 8003628:	3301      	adds	r3, #1
 800362a:	425a      	negs	r2, r3
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	f002 0203 	and.w	r2, r2, #3
 8003634:	bf58      	it	pl
 8003636:	4253      	negpl	r3, r2
 8003638:	700b      	strb	r3, [r1, #0]
 800363a:	e052      	b.n	80036e2 <ds_twr_initiator_sts+0x2aa>
				tx_poll_msg[DESTINATION_ADDRESS_IDX] = address_of_B[0];
 800363c:	4949      	ldr	r1, [pc, #292]	; (8003764 <ds_twr_initiator_sts+0x32c>)
 800363e:	2242      	movs	r2, #66	; 0x42
 8003640:	714a      	strb	r2, [r1, #5]
				tx_poll_msg[DESTINATION_ADDRESS_IDX + 1] = address_of_B[1];
 8003642:	2302      	movs	r3, #2
 8003644:	718b      	strb	r3, [r1, #6]
				rx_resp_msg[SOURCE_ADDRESS_IDX] = address_of_B[0];
 8003646:	4948      	ldr	r1, [pc, #288]	; (8003768 <ds_twr_initiator_sts+0x330>)
 8003648:	71ca      	strb	r2, [r1, #7]
				rx_resp_msg[SOURCE_ADDRESS_IDX + 1] = address_of_B[1];
 800364a:	720b      	strb	r3, [r1, #8]
				tx_final_msg[DESTINATION_ADDRESS_IDX] = address_of_B[0];
 800364c:	4947      	ldr	r1, [pc, #284]	; (800376c <ds_twr_initiator_sts+0x334>)
 800364e:	714a      	strb	r2, [r1, #5]
				tx_final_msg[DESTINATION_ADDRESS_IDX + 1] = address_of_B[1];
 8003650:	718b      	strb	r3, [r1, #6]
				break;
 8003652:	e756      	b.n	8003502 <ds_twr_initiator_sts+0xca>
				tx_poll_msg[DESTINATION_ADDRESS_IDX] = address_of_C[0];
 8003654:	4943      	ldr	r1, [pc, #268]	; (8003764 <ds_twr_initiator_sts+0x32c>)
 8003656:	2243      	movs	r2, #67	; 0x43
 8003658:	714a      	strb	r2, [r1, #5]
				tx_poll_msg[DESTINATION_ADDRESS_IDX + 1] = address_of_C[1];
 800365a:	2303      	movs	r3, #3
 800365c:	718b      	strb	r3, [r1, #6]
				rx_resp_msg[SOURCE_ADDRESS_IDX] = address_of_C[0];
 800365e:	4942      	ldr	r1, [pc, #264]	; (8003768 <ds_twr_initiator_sts+0x330>)
 8003660:	71ca      	strb	r2, [r1, #7]
				rx_resp_msg[SOURCE_ADDRESS_IDX + 1] = address_of_C[1];
 8003662:	720b      	strb	r3, [r1, #8]
				tx_final_msg[DESTINATION_ADDRESS_IDX] = address_of_C[0];
 8003664:	4941      	ldr	r1, [pc, #260]	; (800376c <ds_twr_initiator_sts+0x334>)
 8003666:	714a      	strb	r2, [r1, #5]
				tx_final_msg[DESTINATION_ADDRESS_IDX + 1] = address_of_C[1];
 8003668:	718b      	strb	r3, [r1, #6]
				break;
 800366a:	e74a      	b.n	8003502 <ds_twr_initiator_sts+0xca>
				tx_poll_msg[DESTINATION_ADDRESS_IDX] = address_of_D[0];
 800366c:	493d      	ldr	r1, [pc, #244]	; (8003764 <ds_twr_initiator_sts+0x32c>)
 800366e:	2244      	movs	r2, #68	; 0x44
 8003670:	714a      	strb	r2, [r1, #5]
				tx_poll_msg[DESTINATION_ADDRESS_IDX + 1] = address_of_D[1];
 8003672:	2304      	movs	r3, #4
 8003674:	718b      	strb	r3, [r1, #6]
				rx_resp_msg[SOURCE_ADDRESS_IDX] = address_of_D[0];
 8003676:	493c      	ldr	r1, [pc, #240]	; (8003768 <ds_twr_initiator_sts+0x330>)
 8003678:	71ca      	strb	r2, [r1, #7]
				rx_resp_msg[SOURCE_ADDRESS_IDX + 1] = address_of_D[1];
 800367a:	720b      	strb	r3, [r1, #8]
				tx_final_msg[DESTINATION_ADDRESS_IDX] = address_of_D[0];
 800367c:	493b      	ldr	r1, [pc, #236]	; (800376c <ds_twr_initiator_sts+0x334>)
 800367e:	714a      	strb	r2, [r1, #5]
				tx_final_msg[DESTINATION_ADDRESS_IDX + 1] = address_of_D[1];
 8003680:	718b      	strb	r3, [r1, #6]
				break;
 8003682:	e73e      	b.n	8003502 <ds_twr_initiator_sts+0xca>
				test_run_info((unsigned char *)"Wrong number of Anchor");
 8003684:	4840      	ldr	r0, [pc, #256]	; (8003788 <ds_twr_initiator_sts+0x350>)
 8003686:	f000 f8df 	bl	8003848 <test_run_info>
				break;
 800368a:	e73a      	b.n	8003502 <ds_twr_initiator_sts+0xca>
                    }
                }
                else
                {
                    errors[BAD_FRAME_ERR_IDX] += 1;
 800368c:	4a3f      	ldr	r2, [pc, #252]	; (800378c <ds_twr_initiator_sts+0x354>)
 800368e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003690:	3301      	adds	r3, #1
 8003692:	6293      	str	r3, [r2, #40]	; 0x28
                    /* Increase a current anchor number */
                    current_anchor = (current_anchor + 1 ) % NUMBER_OF_ANCHORS;
 8003694:	493b      	ldr	r1, [pc, #236]	; (8003784 <ds_twr_initiator_sts+0x34c>)
 8003696:	780b      	ldrb	r3, [r1, #0]
 8003698:	3301      	adds	r3, #1
 800369a:	425a      	negs	r2, r3
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	f002 0203 	and.w	r2, r2, #3
 80036a4:	bf58      	it	pl
 80036a6:	4253      	negpl	r3, r2
 80036a8:	700b      	strb	r3, [r1, #0]
 80036aa:	e01a      	b.n	80036e2 <ds_twr_initiator_sts+0x2aa>
                }
            }
            else
            {
                errors[RTO_ERR_IDX] += 1;
 80036ac:	4a37      	ldr	r2, [pc, #220]	; (800378c <ds_twr_initiator_sts+0x354>)
 80036ae:	6953      	ldr	r3, [r2, #20]
 80036b0:	3301      	adds	r3, #1
 80036b2:	6153      	str	r3, [r2, #20]
                /* Increase a current anchor number */
                current_anchor = (current_anchor + 1 ) % NUMBER_OF_ANCHORS;
 80036b4:	4933      	ldr	r1, [pc, #204]	; (8003784 <ds_twr_initiator_sts+0x34c>)
 80036b6:	780b      	ldrb	r3, [r1, #0]
 80036b8:	3301      	adds	r3, #1
 80036ba:	425a      	negs	r2, r3
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	f002 0203 	and.w	r2, r2, #3
 80036c4:	bf58      	it	pl
 80036c6:	4253      	negpl	r3, r2
 80036c8:	700b      	strb	r3, [r1, #0]
 80036ca:	e00a      	b.n	80036e2 <ds_twr_initiator_sts+0x2aa>
            {
                errors[CP_QUAL_ERR_IDX] += 1;
            }
#endif
            /* Increase a current anchor number */
            current_anchor = (current_anchor + 1 ) % NUMBER_OF_ANCHORS;
 80036cc:	492d      	ldr	r1, [pc, #180]	; (8003784 <ds_twr_initiator_sts+0x34c>)
 80036ce:	780b      	ldrb	r3, [r1, #0]
 80036d0:	3301      	adds	r3, #1
 80036d2:	425a      	negs	r2, r3
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	f002 0203 	and.w	r2, r2, #3
 80036dc:	bf58      	it	pl
 80036de:	4253      	negpl	r3, r2
 80036e0:	700b      	strb	r3, [r1, #0]
        }

        /* Clear RX error/timeout events in the DW IC status register. */
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_GOOD | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 80036e2:	4a2b      	ldr	r2, [pc, #172]	; (8003790 <ds_twr_initiator_sts+0x358>)
 80036e4:	2100      	movs	r1, #0
 80036e6:	2044      	movs	r0, #68	; 0x44
 80036e8:	f7fe fe07 	bl	80022fa <dwt_write32bitoffsetreg>
        /* Execute a delay between ranging exchanges. */
        /* ====> Take second tic of timer to check all time <==== */
		//timtick_2 = __HAL_TIM_GET_COUNTER(&htim2);
		/* ====> Take difference  <==== */
		//diff = timtick_2 - timtick_1;
        randomDelay = rand() % 5;
 80036ec:	f7fd fa56 	bl	8000b9c <rand>
 80036f0:	4a28      	ldr	r2, [pc, #160]	; (8003794 <ds_twr_initiator_sts+0x35c>)
 80036f2:	fb82 3200 	smull	r3, r2, r2, r0
 80036f6:	17c3      	asrs	r3, r0, #31
 80036f8:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 80036fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003700:	1ac3      	subs	r3, r0, r3
 8003702:	b2d8      	uxtb	r0, r3
 8003704:	4b24      	ldr	r3, [pc, #144]	; (8003798 <ds_twr_initiator_sts+0x360>)
 8003706:	7018      	strb	r0, [r3, #0]
        Sleep(RNG_DELAY_MS + randomDelay);
 8003708:	3001      	adds	r0, #1
 800370a:	f000 f92b 	bl	8003964 <Sleep>
        if (!firstLoopFlag)
 800370e:	2c00      	cmp	r4, #0
 8003710:	f47f aee3 	bne.w	80034da <ds_twr_initiator_sts+0xa2>
            dwt_configurestskey(&cp_key);
 8003714:	4821      	ldr	r0, [pc, #132]	; (800379c <ds_twr_initiator_sts+0x364>)
 8003716:	f7fe ffdd 	bl	80026d4 <dwt_configurestskey>
            dwt_configurestsiv(&cp_iv);
 800371a:	4810      	ldr	r0, [pc, #64]	; (800375c <ds_twr_initiator_sts+0x324>)
 800371c:	f7fe fffa 	bl	8002714 <dwt_configurestsiv>
            dwt_configurestsloadiv();
 8003720:	f7ff f818 	bl	8002754 <dwt_configurestsloadiv>
            firstLoopFlag = 1;
 8003724:	2401      	movs	r4, #1
        switch (current_anchor)
 8003726:	4b17      	ldr	r3, [pc, #92]	; (8003784 <ds_twr_initiator_sts+0x34c>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b03      	cmp	r3, #3
 800372c:	d8aa      	bhi.n	8003684 <ds_twr_initiator_sts+0x24c>
 800372e:	a201      	add	r2, pc, #4	; (adr r2, 8003734 <ds_twr_initiator_sts+0x2fc>)
 8003730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003734:	0800366d 	.word	0x0800366d
 8003738:	080034ed 	.word	0x080034ed
 800373c:	0800363d 	.word	0x0800363d
 8003740:	08003655 	.word	0x08003655
 8003744:	080061e4 	.word	0x080061e4
 8003748:	20000064 	.word	0x20000064
 800374c:	20000080 	.word	0x20000080
 8003750:	080061f8 	.word	0x080061f8
 8003754:	0800620c 	.word	0x0800620c
 8003758:	20000074 	.word	0x20000074
 800375c:	20000090 	.word	0x20000090
 8003760:	0002001c 	.word	0x0002001c
 8003764:	200000d8 	.word	0x200000d8
 8003768:	200000b4 	.word	0x200000b4
 800376c:	200000c0 	.word	0x200000c0
 8003770:	200002d0 	.word	0x200002d0
 8003774:	2427d000 	.word	0x2427d000
 8003778:	200002b4 	.word	0x200002b4
 800377c:	200002b8 	.word	0x200002b8
 8003780:	041341ac 	.word	0x041341ac
 8003784:	200000b0 	.word	0x200000b0
 8003788:	08006220 	.word	0x08006220
 800378c:	20000258 	.word	0x20000258
 8003790:	2427ff00 	.word	0x2427ff00
 8003794:	66666667 	.word	0x66666667
 8003798:	200002b5 	.word	0x200002b5
 800379c:	200000a0 	.word	0x200000a0

080037a0 <build_examples>:
#endif

#ifdef TEST_DS_TWR_INITIATOR_STS
    extern int ds_twr_initiator_sts(void);

    example_pointer=ds_twr_initiator_sts;
 80037a0:	4b01      	ldr	r3, [pc, #4]	; (80037a8 <build_examples+0x8>)
 80037a2:	4a02      	ldr	r2, [pc, #8]	; (80037ac <build_examples+0xc>)
 80037a4:	601a      	str	r2, [r3, #0]
#endif

    //Check that only 1 test was enabled in test_selection.h file
    assert(test_cnt==1);

}
 80037a6:	4770      	bx	lr
 80037a8:	200002d4 	.word	0x200002d4
 80037ac:	08003439 	.word	0x08003439

080037b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80037b0:	b570      	push	{r4, r5, r6, lr}
 80037b2:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b4:	2400      	movs	r4, #0
 80037b6:	9403      	str	r4, [sp, #12]
 80037b8:	9404      	str	r4, [sp, #16]
 80037ba:	9405      	str	r4, [sp, #20]
 80037bc:	9406      	str	r4, [sp, #24]
 80037be:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80037c0:	4b1f      	ldr	r3, [pc, #124]	; (8003840 <MX_GPIO_Init+0x90>)
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80037c8:	615a      	str	r2, [r3, #20]
 80037ca:	695a      	ldr	r2, [r3, #20]
 80037cc:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80037d0:	9200      	str	r2, [sp, #0]
 80037d2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80037da:	615a      	str	r2, [r3, #20]
 80037dc:	695a      	ldr	r2, [r3, #20]
 80037de:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80037e2:	9201      	str	r2, [sp, #4]
 80037e4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037e6:	695a      	ldr	r2, [r3, #20]
 80037e8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80037ec:	615a      	str	r2, [r3, #20]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037f4:	9302      	str	r3, [sp, #8]
 80037f6:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET);
 80037f8:	4622      	mov	r2, r4
 80037fa:	2110      	movs	r1, #16
 80037fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003800:	f000 fbac 	bl	8003f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DW_IRQn_Pin|DW_RESET_Pin, GPIO_PIN_RESET);
 8003804:	4d0f      	ldr	r5, [pc, #60]	; (8003844 <MX_GPIO_Init+0x94>)
 8003806:	4622      	mov	r2, r4
 8003808:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800380c:	4628      	mov	r0, r5
 800380e:	f000 fba5 	bl	8003f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 8003812:	2310      	movs	r3, #16
 8003814:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003816:	2601      	movs	r6, #1
 8003818:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800381c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 800381e:	a903      	add	r1, sp, #12
 8003820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003824:	f000 fab6 	bl	8003d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : DW_IRQn_Pin DW_RESET_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin|DW_RESET_Pin;
 8003828:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800382c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800382e:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003830:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003832:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003834:	a903      	add	r1, sp, #12
 8003836:	4628      	mov	r0, r5
 8003838:	f000 faac 	bl	8003d94 <HAL_GPIO_Init>

}
 800383c:	b008      	add	sp, #32
 800383e:	bd70      	pop	{r4, r5, r6, pc}
 8003840:	40021000 	.word	0x40021000
 8003844:	48000400 	.word	0x48000400

08003848 <test_run_info>:
  }
}

/* USER CODE BEGIN 4 */
void test_run_info(unsigned char *data)
{
 8003848:	b538      	push	{r3, r4, r5, lr}
 800384a:	4604      	mov	r4, r0
    uint16_t    data_length;

    data_length=strlen((const char *)data);
 800384c:	f7fd f9f8 	bl	8000c40 <strlen>
    HAL_UART_Transmit(&huart1, data, data_length, 10);/*Transmit the data through USB - Virtual port*/
 8003850:	4d06      	ldr	r5, [pc, #24]	; (800386c <test_run_info+0x24>)
 8003852:	230a      	movs	r3, #10
 8003854:	b282      	uxth	r2, r0
 8003856:	4621      	mov	r1, r4
 8003858:	4628      	mov	r0, r5
 800385a:	f002 f9d5 	bl	8005c08 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\n\r", 2, 10);/*Transmit end of line through USB - Virtual port*/
 800385e:	230a      	movs	r3, #10
 8003860:	2202      	movs	r2, #2
 8003862:	4903      	ldr	r1, [pc, #12]	; (8003870 <test_run_info+0x28>)
 8003864:	4628      	mov	r0, r5
 8003866:	f002 f9cf 	bl	8005c08 <HAL_UART_Transmit>

}
 800386a:	bd38      	pop	{r3, r4, r5, pc}
 800386c:	20000390 	.word	0x20000390
 8003870:	08006238 	.word	0x08006238

08003874 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003874:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003876:	e7fe      	b.n	8003876 <Error_Handler+0x2>

08003878 <SystemClock_Config>:
{
 8003878:	b500      	push	{lr}
 800387a:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800387c:	2228      	movs	r2, #40	; 0x28
 800387e:	2100      	movs	r1, #0
 8003880:	a814      	add	r0, sp, #80	; 0x50
 8003882:	f7fc fd85 	bl	8000390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003886:	2100      	movs	r1, #0
 8003888:	910f      	str	r1, [sp, #60]	; 0x3c
 800388a:	9110      	str	r1, [sp, #64]	; 0x40
 800388c:	9111      	str	r1, [sp, #68]	; 0x44
 800388e:	9112      	str	r1, [sp, #72]	; 0x48
 8003890:	9113      	str	r1, [sp, #76]	; 0x4c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003892:	223c      	movs	r2, #60	; 0x3c
 8003894:	4668      	mov	r0, sp
 8003896:	f7fc fd7b 	bl	8000390 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800389a:	2301      	movs	r3, #1
 800389c:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800389e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80038a2:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80038a4:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038a6:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038a8:	2302      	movs	r3, #2
 80038aa:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038ac:	921c      	str	r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80038ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80038b2:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038b4:	a814      	add	r0, sp, #80	; 0x50
 80038b6:	f000 fb6f 	bl	8003f98 <HAL_RCC_OscConfig>
 80038ba:	b9c0      	cbnz	r0, 80038ee <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038bc:	230f      	movs	r3, #15
 80038be:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038c0:	2102      	movs	r1, #2
 80038c2:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038c4:	2300      	movs	r3, #0
 80038c6:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80038c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038cc:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038ce:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80038d0:	a80f      	add	r0, sp, #60	; 0x3c
 80038d2:	f000 feab 	bl	800462c <HAL_RCC_ClockConfig>
 80038d6:	b960      	cbnz	r0, 80038f2 <SystemClock_Config+0x7a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80038d8:	2301      	movs	r3, #1
 80038da:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80038dc:	2300      	movs	r3, #0
 80038de:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038e0:	4668      	mov	r0, sp
 80038e2:	f000 ffa9 	bl	8004838 <HAL_RCCEx_PeriphCLKConfig>
 80038e6:	b930      	cbnz	r0, 80038f6 <SystemClock_Config+0x7e>
}
 80038e8:	b01f      	add	sp, #124	; 0x7c
 80038ea:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80038ee:	f7ff ffc1 	bl	8003874 <Error_Handler>
    Error_Handler();
 80038f2:	f7ff ffbf 	bl	8003874 <Error_Handler>
    Error_Handler();
 80038f6:	f7ff ffbd 	bl	8003874 <Error_Handler>
	...

080038fc <main>:
{
 80038fc:	b508      	push	{r3, lr}
  build_examples();
 80038fe:	f7ff ff4f 	bl	80037a0 <build_examples>
  HAL_Init();
 8003902:	f000 f9b1 	bl	8003c68 <HAL_Init>
  SystemClock_Config();
 8003906:	f7ff ffb7 	bl	8003878 <SystemClock_Config>
  MX_GPIO_Init();
 800390a:	f7ff ff51 	bl	80037b0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800390e:	f000 f92b 	bl	8003b68 <MX_SPI1_Init>
  MX_TIM2_Init();
 8003912:	f002 fae5 	bl	8005ee0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8003916:	f002 fb2f 	bl	8005f78 <MX_USART1_UART_Init>
  port_DisableEXT_IRQ();
 800391a:	f000 f82e 	bl	800397a <port_DisableEXT_IRQ>
  example_pointer();
 800391e:	4b02      	ldr	r3, [pc, #8]	; (8003928 <main+0x2c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4798      	blx	r3
  while (1)
 8003924:	e7fe      	b.n	8003924 <main+0x28>
 8003926:	bf00      	nop
 8003928:	200002d4 	.word	0x200002d4

0800392c <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(useconds_t usec)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
    unsigned int i;

    usec*=12;
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	607b      	str	r3, [r7, #4]
    for(i=0;i<usec;i++)
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	e003      	b.n	800394e <usleep+0x22>
    {
        __NOP();
 8003946:	bf00      	nop
    for(i=0;i<usec;i++)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	3301      	adds	r3, #1
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	429a      	cmp	r2, r3
 8003954:	d3f7      	bcc.n	8003946 <usleep+0x1a>
    }
    return 0;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f99f 	bl	8003cb0 <HAL_Delay>
}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(EXTI0_IRQn);
 800397e:	2006      	movs	r0, #6
 8003980:	f000 f85c 	bl	8003a3c <__NVIC_DisableIRQ>
}
 8003984:	bf00      	nop
 8003986:	bd80      	pop	{r7, pc}

08003988 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(EXTI0_IRQn);
 800398c:	2006      	movs	r0, #6
 800398e:	f000 f847 	bl	8003a20 <__NVIC_EnableIRQ>
}
 8003992:	bf00      	nop
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <EXTI_GetITEnStatus>:
  * @brief  Checks whether the specified IRQn line is enabled or not.
  * @param  IRQn: specifies the IRQn line to check.
  * @return "0" when IRQn is "not enabled" and !0 otherwise
  */
ITStatus EXTI_GetITEnStatus(IRQn_Type IRQn)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	71fb      	strb	r3, [r7, #7]
        return ((NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] &\
 80039a2:	4a0c      	ldr	r2, [pc, #48]	; (80039d4 <EXTI_GetITEnStatus+0x3c>)
 80039a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	f003 031f 	and.w	r3, r3, #31
 80039b4:	fa22 f303 	lsr.w	r3, r2, r3
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	bf14      	ite	ne
 80039c0:	2301      	movne	r3, #1
 80039c2:	2300      	moveq	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	e000e100 	.word	0xe000e100

080039d8 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(EXTI0_IRQn);
 80039dc:	2006      	movs	r0, #6
 80039de:	f7ff ffdb 	bl	8003998 <EXTI_GetITEnStatus>
 80039e2:	4603      	mov	r3, r0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <my_reset_DWIC>:
    setup_DWICRSTnIRQ(0);
    Sleep(2);

}
void my_reset_DWIC(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 80039ec:	2200      	movs	r2, #0
 80039ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039f2:	480a      	ldr	r0, [pc, #40]	; (8003a1c <my_reset_DWIC+0x34>)
 80039f4:	f000 fab2 	bl	8003f5c <HAL_GPIO_WritePin>
	HAL_Delay(6);
 80039f8:	2006      	movs	r0, #6
 80039fa:	f000 f959 	bl	8003cb0 <HAL_Delay>
	HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 80039fe:	2201      	movs	r2, #1
 8003a00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a04:	4805      	ldr	r0, [pc, #20]	; (8003a1c <my_reset_DWIC+0x34>)
 8003a06:	f000 faa9 	bl	8003f5c <HAL_GPIO_WritePin>
	HAL_Delay(3);
 8003a0a:	2003      	movs	r0, #3
 8003a0c:	f000 f950 	bl	8003cb0 <HAL_Delay>
	Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC)
 8003a10:	2002      	movs	r0, #2
 8003a12:	f7ff ffa7 	bl	8003964 <Sleep>
}
 8003a16:	bf00      	nop
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	48000400 	.word	0x48000400

08003a20 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003a20:	2800      	cmp	r0, #0
 8003a22:	db07      	blt.n	8003a34 <__NVIC_EnableIRQ+0x14>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a24:	f000 021f 	and.w	r2, r0, #31
 8003a28:	0940      	lsrs	r0, r0, #5
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	4093      	lsls	r3, r2
 8003a2e:	4a02      	ldr	r2, [pc, #8]	; (8003a38 <__NVIC_EnableIRQ+0x18>)
 8003a30:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  }
}
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	e000e100 	.word	0xe000e100

08003a3c <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	db0c      	blt.n	8003a5a <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a40:	f000 021f 	and.w	r2, r0, #31
 8003a44:	0940      	lsrs	r0, r0, #5
 8003a46:	2301      	movs	r3, #1
 8003a48:	4093      	lsls	r3, r2
 8003a4a:	3020      	adds	r0, #32
 8003a4c:	4a03      	ldr	r2, [pc, #12]	; (8003a5c <__NVIC_DisableIRQ+0x20>)
 8003a4e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003a52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003a56:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003a5a:	4770      	bx	lr
 8003a5c:	e000e100 	.word	0xe000e100

08003a60 <get_rx_delay_time_txpreamble>:
{
    uint32_t delay_time = 0;
    /* Standard delay values for preamble lengths of 32, 64, 72 & 128 should be adequate.
     * Additional time delay will be needed for larger preamble lengths.
     * Delay required is dependent on the preamble length as it increases the frame length. */
    switch (config_options.txPreambLength)
 8003a60:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <get_rx_delay_time_txpreamble+0x40>)
 8003a62:	785b      	ldrb	r3, [r3, #1]
 8003a64:	3b02      	subs	r3, #2
 8003a66:	2b0b      	cmp	r3, #11
 8003a68:	d807      	bhi.n	8003a7a <get_rx_delay_time_txpreamble+0x1a>
 8003a6a:	e8df f003 	tbb	[pc, r3]
 8003a6e:	140b      	.short	0x140b
 8003a70:	060e0606 	.word	0x060e0606
 8003a74:	06111706 	.word	0x06111706
 8003a78:	0806      	.short	0x0806
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	4770      	bx	lr
    {
    case DWT_PLEN_256:
        delay_time += 128; /* 256 - 128 */
        break;
    case DWT_PLEN_512:
        delay_time += 384; /* 512 - 128 */
 8003a7e:	f44f 70c0 	mov.w	r0, #384	; 0x180
        break;
 8003a82:	4770      	bx	lr
    case DWT_PLEN_1024:
        delay_time += 896; /* 1024 - 128 */
 8003a84:	f44f 7060 	mov.w	r0, #896	; 0x380
        break;
 8003a88:	4770      	bx	lr
    case DWT_PLEN_1536:
        delay_time += 1408; /* 1536 - 128 */
 8003a8a:	f44f 60b0 	mov.w	r0, #1408	; 0x580
        break;
 8003a8e:	4770      	bx	lr
    case DWT_PLEN_2048:
        delay_time += 1920; /* 2048 - 128 */
 8003a90:	f44f 60f0 	mov.w	r0, #1920	; 0x780
        break;
 8003a94:	4770      	bx	lr
    case DWT_PLEN_4096:
        delay_time += 3968; /* 4096 - 128 */
 8003a96:	f44f 6078 	mov.w	r0, #3968	; 0xf80
        break;
 8003a9a:	4770      	bx	lr
        delay_time += 128; /* 256 - 128 */
 8003a9c:	2080      	movs	r0, #128	; 0x80
    default:
        break;
    }

    return delay_time;
}
 8003a9e:	4770      	bx	lr
 8003aa0:	20000064 	.word	0x20000064

08003aa4 <get_rx_delay_time_data_rate>:
    uint32_t delay_time = 0;
    /*
     * If data rate is set to 850k (slower rate),
     * increase the delay time
     */
    switch (config_options.dataRate)
 8003aa4:	4b03      	ldr	r3, [pc, #12]	; (8003ab4 <get_rx_delay_time_data_rate+0x10>)
 8003aa6:	799b      	ldrb	r3, [r3, #6]
 8003aa8:	b10b      	cbz	r3, 8003aae <get_rx_delay_time_data_rate+0xa>
    uint32_t delay_time = 0;
 8003aaa:	2000      	movs	r0, #0
 8003aac:	4770      	bx	lr
    {
    case DWT_BR_850K:
        delay_time += 200;
 8003aae:	20c8      	movs	r0, #200	; 0xc8
    default:
        break;
    }

    return delay_time;
}
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000064 	.word	0x20000064

08003ab8 <set_resp_rx_timeout>:
 *                         is called.
 *
 * @return None
 */
void set_resp_rx_timeout(uint32_t delay, dwt_config_t *config_options)
{
 8003ab8:	b538      	push	{r3, r4, r5, lr}
 8003aba:	4604      	mov	r4, r0
 8003abc:	460d      	mov	r5, r1
    /*
     * The program will need to adjust the timeout value depending on the size of the frame
     * Different sized frames require different time delays.
     */
    uint32_t delay_time = delay + get_rx_delay_time_data_rate() + get_rx_delay_time_txpreamble() + 500;
 8003abe:	f7ff fff1 	bl	8003aa4 <get_rx_delay_time_data_rate>
 8003ac2:	4404      	add	r4, r0
 8003ac4:	f7ff ffcc 	bl	8003a60 <get_rx_delay_time_txpreamble>
 8003ac8:	4420      	add	r0, r4
 8003aca:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4

    /* Length of the STS effects the size of the frame also.
     * This means the delay required is greater for larger STS lengths. */
    switch (config_options->stsLength)
 8003ace:	7b6b      	ldrb	r3, [r5, #13]
 8003ad0:	1eda      	subs	r2, r3, #3
 8003ad2:	2a03      	cmp	r2, #3
 8003ad4:	d804      	bhi.n	8003ae0 <set_resp_rx_timeout+0x28>
    {
    case DWT_STS_LEN_256:
    case DWT_STS_LEN_512:
    case DWT_STS_LEN_1024:
    case DWT_STS_LEN_2048:
        delay_time += ((1<<(config_options->stsLength+2))*8);
 8003ad6:	3302      	adds	r3, #2
 8003ad8:	2208      	movs	r2, #8
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	4418      	add	r0, r3
    case DWT_STS_LEN_128:
    default:
        break;
    }

    dwt_setrxtimeout(delay_time);
 8003ae0:	f7ff fb60 	bl	80031a4 <dwt_setrxtimeout>
}
 8003ae4:	bd38      	pop	{r3, r4, r5, pc}

08003ae6 <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
uint64_t get_tx_timestamp_u64(void)
{
 8003ae6:	b500      	push	{lr}
 8003ae8:	b083      	sub	sp, #12
    uint8_t ts_tab[5];
    uint64_t ts = 0;
    int8_t i;
    dwt_readtxtimestamp(ts_tab);
 8003aea:	4668      	mov	r0, sp
 8003aec:	f7ff f9a4 	bl	8002e38 <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 8003af0:	2304      	movs	r3, #4
    uint64_t ts = 0;
 8003af2:	2000      	movs	r0, #0
 8003af4:	4601      	mov	r1, r0
    for (i = 4; i >= 0; i--)
 8003af6:	e00b      	b.n	8003b10 <get_tx_timestamp_u64+0x2a>
    {
        ts <<= 8;
 8003af8:	0209      	lsls	r1, r1, #8
 8003afa:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
        ts |= ts_tab[i];
 8003afe:	f103 0208 	add.w	r2, r3, #8
 8003b02:	446a      	add	r2, sp
 8003b04:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8003b08:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    for (i = 4; i >= 0; i--)
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b25b      	sxtb	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	daf1      	bge.n	8003af8 <get_tx_timestamp_u64+0x12>
    }
    return ts;
}
 8003b14:	b003      	add	sp, #12
 8003b16:	f85d fb04 	ldr.w	pc, [sp], #4

08003b1a <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
uint64_t get_rx_timestamp_u64(void)
{
 8003b1a:	b500      	push	{lr}
 8003b1c:	b083      	sub	sp, #12
    uint8_t ts_tab[5];
    uint64_t ts = 0;
    int8_t i;
    dwt_readrxtimestamp(ts_tab);
 8003b1e:	4668      	mov	r0, sp
 8003b20:	f7ff f992 	bl	8002e48 <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 8003b24:	2304      	movs	r3, #4
    uint64_t ts = 0;
 8003b26:	2000      	movs	r0, #0
 8003b28:	4601      	mov	r1, r0
    for (i = 4; i >= 0; i--)
 8003b2a:	e00b      	b.n	8003b44 <get_rx_timestamp_u64+0x2a>
    {
        ts <<= 8;
 8003b2c:	0209      	lsls	r1, r1, #8
 8003b2e:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
        ts |= ts_tab[i];
 8003b32:	f103 0208 	add.w	r2, r3, #8
 8003b36:	446a      	add	r2, sp
 8003b38:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8003b3c:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    for (i = 4; i >= 0; i--)
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b25b      	sxtb	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	daf1      	bge.n	8003b2c <get_rx_timestamp_u64+0x12>
    }
    return ts;
}
 8003b48:	b003      	add	sp, #12
 8003b4a:	f85d fb04 	ldr.w	pc, [sp], #4

08003b4e <final_msg_set_ts>:
 * @return none
 */
void final_msg_set_ts(uint8_t *ts_field, uint64_t ts)
{
    uint8_t i;
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8003b4e:	2100      	movs	r1, #0
 8003b50:	e006      	b.n	8003b60 <final_msg_set_ts+0x12>
    {
        ts_field[i] = (uint8_t)ts;
 8003b52:	5442      	strb	r2, [r0, r1]
        ts >>= 8;
 8003b54:	0a12      	lsrs	r2, r2, #8
 8003b56:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8003b5a:	0a1b      	lsrs	r3, r3, #8
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8003b5c:	3101      	adds	r1, #1
 8003b5e:	b2c9      	uxtb	r1, r1
 8003b60:	2903      	cmp	r1, #3
 8003b62:	d9f6      	bls.n	8003b52 <final_msg_set_ts+0x4>
    }
}
 8003b64:	4770      	bx	lr
	...

08003b68 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003b68:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003b6a:	4810      	ldr	r0, [pc, #64]	; (8003bac <MX_SPI1_Init+0x44>)
 8003b6c:	4b10      	ldr	r3, [pc, #64]	; (8003bb0 <MX_SPI1_Init+0x48>)
 8003b6e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b70:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003b74:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b76:	2300      	movs	r3, #0
 8003b78:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b7a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b7e:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b80:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b82:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b88:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003b8a:	2218      	movs	r2, #24
 8003b8c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b8e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b90:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b92:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003b94:	2207      	movs	r2, #7
 8003b96:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003b98:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003b9a:	2308      	movs	r3, #8
 8003b9c:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b9e:	f001 f8d1 	bl	8004d44 <HAL_SPI_Init>
 8003ba2:	b900      	cbnz	r0, 8003ba6 <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003ba4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003ba6:	f7ff fe65 	bl	8003874 <Error_Handler>
}
 8003baa:	e7fb      	b.n	8003ba4 <MX_SPI1_Init+0x3c>
 8003bac:	200002d8 	.word	0x200002d8
 8003bb0:	40013000 	.word	0x40013000

08003bb4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003bb4:	b500      	push	{lr}
 8003bb6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb8:	2300      	movs	r3, #0
 8003bba:	9303      	str	r3, [sp, #12]
 8003bbc:	9304      	str	r3, [sp, #16]
 8003bbe:	9305      	str	r3, [sp, #20]
 8003bc0:	9306      	str	r3, [sp, #24]
 8003bc2:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 8003bc4:	6802      	ldr	r2, [r0, #0]
 8003bc6:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <HAL_SPI_MspInit+0x64>)
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d002      	beq.n	8003bd2 <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003bcc:	b009      	add	sp, #36	; 0x24
 8003bce:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003bd2:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8003bd6:	699a      	ldr	r2, [r3, #24]
 8003bd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003bdc:	619a      	str	r2, [r3, #24]
 8003bde:	699a      	ldr	r2, [r3, #24]
 8003be0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003be4:	9201      	str	r2, [sp, #4]
 8003be6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003bee:	615a      	str	r2, [r3, #20]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf6:	9302      	str	r3, [sp, #8]
 8003bf8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003bfa:	23e0      	movs	r3, #224	; 0xe0
 8003bfc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfe:	2302      	movs	r3, #2
 8003c00:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c02:	2303      	movs	r3, #3
 8003c04:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c06:	2305      	movs	r3, #5
 8003c08:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c0a:	a903      	add	r1, sp, #12
 8003c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c10:	f000 f8c0 	bl	8003d94 <HAL_GPIO_Init>
}
 8003c14:	e7da      	b.n	8003bcc <HAL_SPI_MspInit+0x18>
 8003c16:	bf00      	nop
 8003c18:	40013000 	.word	0x40013000

08003c1c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c1c:	b510      	push	{r4, lr}
 8003c1e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c20:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <HAL_InitTick+0x40>)
 8003c22:	7818      	ldrb	r0, [r3, #0]
 8003c24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c28:	fbb3 f3f0 	udiv	r3, r3, r0
 8003c2c:	4a0c      	ldr	r2, [pc, #48]	; (8003c60 <HAL_InitTick+0x44>)
 8003c2e:	6810      	ldr	r0, [r2, #0]
 8003c30:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c34:	f000 f89a 	bl	8003d6c <HAL_SYSTICK_Config>
 8003c38:	b968      	cbnz	r0, 8003c56 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c3a:	2c0f      	cmp	r4, #15
 8003c3c:	d901      	bls.n	8003c42 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8003c3e:	2001      	movs	r0, #1
 8003c40:	e00a      	b.n	8003c58 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c42:	2200      	movs	r2, #0
 8003c44:	4621      	mov	r1, r4
 8003c46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c4a:	f000 f857 	bl	8003cfc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c4e:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <HAL_InitTick+0x48>)
 8003c50:	601c      	str	r4, [r3, #0]
  }
   /* Return function status */
  return HAL_OK;
 8003c52:	2000      	movs	r0, #0
 8003c54:	e000      	b.n	8003c58 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8003c56:	2001      	movs	r0, #1
}
 8003c58:	bd10      	pop	{r4, pc}
 8003c5a:	bf00      	nop
 8003c5c:	200000e4 	.word	0x200000e4
 8003c60:	200000ec 	.word	0x200000ec
 8003c64:	200000e8 	.word	0x200000e8

08003c68 <HAL_Init>:
{
 8003c68:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c6a:	4a07      	ldr	r2, [pc, #28]	; (8003c88 <HAL_Init+0x20>)
 8003c6c:	6813      	ldr	r3, [r2, #0]
 8003c6e:	f043 0310 	orr.w	r3, r3, #16
 8003c72:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c74:	2003      	movs	r0, #3
 8003c76:	f000 f82f 	bl	8003cd8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c7a:	200f      	movs	r0, #15
 8003c7c:	f7ff ffce 	bl	8003c1c <HAL_InitTick>
  HAL_MspInit();
 8003c80:	f000 f972 	bl	8003f68 <HAL_MspInit>
}
 8003c84:	2000      	movs	r0, #0
 8003c86:	bd08      	pop	{r3, pc}
 8003c88:	40022000 	.word	0x40022000

08003c8c <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003c8c:	4a03      	ldr	r2, [pc, #12]	; (8003c9c <HAL_IncTick+0x10>)
 8003c8e:	6811      	ldr	r1, [r2, #0]
 8003c90:	4b03      	ldr	r3, [pc, #12]	; (8003ca0 <HAL_IncTick+0x14>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	440b      	add	r3, r1
 8003c96:	6013      	str	r3, [r2, #0]
}
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	2000033c 	.word	0x2000033c
 8003ca0:	200000e4 	.word	0x200000e4

08003ca4 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8003ca4:	4b01      	ldr	r3, [pc, #4]	; (8003cac <HAL_GetTick+0x8>)
 8003ca6:	6818      	ldr	r0, [r3, #0]
}
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	2000033c 	.word	0x2000033c

08003cb0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cb0:	b538      	push	{r3, r4, r5, lr}
 8003cb2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003cb4:	f7ff fff6 	bl	8003ca4 <HAL_GetTick>
 8003cb8:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cba:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003cbe:	d002      	beq.n	8003cc6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cc0:	4b04      	ldr	r3, [pc, #16]	; (8003cd4 <HAL_Delay+0x24>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003cc6:	f7ff ffed 	bl	8003ca4 <HAL_GetTick>
 8003cca:	1b40      	subs	r0, r0, r5
 8003ccc:	42a0      	cmp	r0, r4
 8003cce:	d3fa      	bcc.n	8003cc6 <HAL_Delay+0x16>
  {
  }
}
 8003cd0:	bd38      	pop	{r3, r4, r5, pc}
 8003cd2:	bf00      	nop
 8003cd4:	200000e4 	.word	0x200000e4

08003cd8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cd8:	4a07      	ldr	r2, [pc, #28]	; (8003cf8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003cda:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cdc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003ce0:	041b      	lsls	r3, r3, #16
 8003ce2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ce4:	0200      	lsls	r0, r0, #8
 8003ce6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cea:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003cf4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003cf6:	4770      	bx	lr
 8003cf8:	e000ed00 	.word	0xe000ed00

08003cfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cfc:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cfe:	4b19      	ldr	r3, [pc, #100]	; (8003d64 <HAL_NVIC_SetPriority+0x68>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d06:	f1c3 0c07 	rsb	ip, r3, #7
 8003d0a:	f1bc 0f04 	cmp.w	ip, #4
 8003d0e:	bf28      	it	cs
 8003d10:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d14:	f103 0e04 	add.w	lr, r3, #4
 8003d18:	f1be 0f06 	cmp.w	lr, #6
 8003d1c:	d918      	bls.n	8003d50 <HAL_NVIC_SetPriority+0x54>
 8003d1e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d20:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8003d24:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003d28:	ea21 010c 	bic.w	r1, r1, ip
 8003d2c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d2e:	fa0e f303 	lsl.w	r3, lr, r3
 8003d32:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d36:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003d38:	2800      	cmp	r0, #0
 8003d3a:	db0b      	blt.n	8003d54 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d3c:	0109      	lsls	r1, r1, #4
 8003d3e:	b2c9      	uxtb	r1, r1
 8003d40:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003d44:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003d48:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003d4c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d50:	2300      	movs	r3, #0
 8003d52:	e7e5      	b.n	8003d20 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d54:	f000 000f 	and.w	r0, r0, #15
 8003d58:	0109      	lsls	r1, r1, #4
 8003d5a:	b2c9      	uxtb	r1, r1
 8003d5c:	4b02      	ldr	r3, [pc, #8]	; (8003d68 <HAL_NVIC_SetPriority+0x6c>)
 8003d5e:	5419      	strb	r1, [r3, r0]
 8003d60:	e7f4      	b.n	8003d4c <HAL_NVIC_SetPriority+0x50>
 8003d62:	bf00      	nop
 8003d64:	e000ed00 	.word	0xe000ed00
 8003d68:	e000ed14 	.word	0xe000ed14

08003d6c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d6c:	3801      	subs	r0, #1
 8003d6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003d72:	d20b      	bcs.n	8003d8c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d74:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003d78:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d7a:	4a05      	ldr	r2, [pc, #20]	; (8003d90 <HAL_SYSTICK_Config+0x24>)
 8003d7c:	21f0      	movs	r1, #240	; 0xf0
 8003d7e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d82:	2000      	movs	r0, #0
 8003d84:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d86:	2207      	movs	r2, #7
 8003d88:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d8a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003d8c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003d8e:	4770      	bx	lr
 8003d90:	e000ed00 	.word	0xe000ed00

08003d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d96:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8003d98:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d9a:	e062      	b.n	8003e62 <HAL_GPIO_Init+0xce>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d9c:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003d9e:	005e      	lsls	r6, r3, #1
 8003da0:	2403      	movs	r4, #3
 8003da2:	40b4      	lsls	r4, r6
 8003da4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003da8:	68cc      	ldr	r4, [r1, #12]
 8003daa:	40b4      	lsls	r4, r6
 8003dac:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003dae:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003db0:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003db2:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003db6:	684c      	ldr	r4, [r1, #4]
 8003db8:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8003dbc:	409c      	lsls	r4, r3
 8003dbe:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8003dc2:	6044      	str	r4, [r0, #4]
 8003dc4:	e05e      	b.n	8003e84 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003dc6:	08dd      	lsrs	r5, r3, #3
 8003dc8:	3508      	adds	r5, #8
 8003dca:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003dce:	f003 0407 	and.w	r4, r3, #7
 8003dd2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003dd6:	240f      	movs	r4, #15
 8003dd8:	fa04 f40c 	lsl.w	r4, r4, ip
 8003ddc:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003de0:	690c      	ldr	r4, [r1, #16]
 8003de2:	fa04 f40c 	lsl.w	r4, r4, ip
 8003de6:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003dea:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8003dee:	e060      	b.n	8003eb2 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003df0:	2404      	movs	r4, #4
 8003df2:	e000      	b.n	8003df6 <HAL_GPIO_Init+0x62>
 8003df4:	2400      	movs	r4, #0
 8003df6:	fa04 f40e 	lsl.w	r4, r4, lr
 8003dfa:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dfc:	f10c 0c02 	add.w	ip, ip, #2
 8003e00:	4d52      	ldr	r5, [pc, #328]	; (8003f4c <HAL_GPIO_Init+0x1b8>)
 8003e02:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e06:	4c52      	ldr	r4, [pc, #328]	; (8003f50 <HAL_GPIO_Init+0x1bc>)
 8003e08:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8003e0a:	43d4      	mvns	r4, r2
 8003e0c:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e10:	684f      	ldr	r7, [r1, #4]
 8003e12:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8003e16:	d001      	beq.n	8003e1c <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8003e18:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8003e1c:	4d4c      	ldr	r5, [pc, #304]	; (8003f50 <HAL_GPIO_Init+0x1bc>)
 8003e1e:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8003e20:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8003e22:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e26:	684f      	ldr	r7, [r1, #4]
 8003e28:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8003e2c:	d001      	beq.n	8003e32 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8003e2e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR = temp;
 8003e32:	4d47      	ldr	r5, [pc, #284]	; (8003f50 <HAL_GPIO_Init+0x1bc>)
 8003e34:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR;
 8003e36:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8003e38:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e3c:	684f      	ldr	r7, [r1, #4]
 8003e3e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8003e42:	d001      	beq.n	8003e48 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8003e44:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8003e48:	4d41      	ldr	r5, [pc, #260]	; (8003f50 <HAL_GPIO_Init+0x1bc>)
 8003e4a:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e4c:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8003e4e:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e50:	684e      	ldr	r6, [r1, #4]
 8003e52:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8003e56:	d001      	beq.n	8003e5c <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8003e58:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR = temp;
 8003e5c:	4a3c      	ldr	r2, [pc, #240]	; (8003f50 <HAL_GPIO_Init+0x1bc>)
 8003e5e:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8003e60:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e62:	680a      	ldr	r2, [r1, #0]
 8003e64:	fa32 f403 	lsrs.w	r4, r2, r3
 8003e68:	d06e      	beq.n	8003f48 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e6a:	f04f 0c01 	mov.w	ip, #1
 8003e6e:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8003e72:	ea1c 0202 	ands.w	r2, ip, r2
 8003e76:	d0f3      	beq.n	8003e60 <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e78:	684c      	ldr	r4, [r1, #4]
 8003e7a:	f004 0403 	and.w	r4, r4, #3
 8003e7e:	3c01      	subs	r4, #1
 8003e80:	2c01      	cmp	r4, #1
 8003e82:	d98b      	bls.n	8003d9c <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e84:	684c      	ldr	r4, [r1, #4]
 8003e86:	f004 0403 	and.w	r4, r4, #3
 8003e8a:	2c03      	cmp	r4, #3
 8003e8c:	d00c      	beq.n	8003ea8 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8003e8e:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003e90:	005d      	lsls	r5, r3, #1
 8003e92:	f04f 0c03 	mov.w	ip, #3
 8003e96:	fa0c fc05 	lsl.w	ip, ip, r5
 8003e9a:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e9e:	688c      	ldr	r4, [r1, #8]
 8003ea0:	40ac      	lsls	r4, r5
 8003ea2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8003ea6:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ea8:	684c      	ldr	r4, [r1, #4]
 8003eaa:	f004 0403 	and.w	r4, r4, #3
 8003eae:	2c02      	cmp	r4, #2
 8003eb0:	d089      	beq.n	8003dc6 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8003eb2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003eb4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003eb8:	f04f 0c03 	mov.w	ip, #3
 8003ebc:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003ec0:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ec4:	684c      	ldr	r4, [r1, #4]
 8003ec6:	f004 0403 	and.w	r4, r4, #3
 8003eca:	fa04 f40e 	lsl.w	r4, r4, lr
 8003ece:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8003ed2:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ed4:	684c      	ldr	r4, [r1, #4]
 8003ed6:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8003eda:	d0c1      	beq.n	8003e60 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003edc:	4c1d      	ldr	r4, [pc, #116]	; (8003f54 <HAL_GPIO_Init+0x1c0>)
 8003ede:	69a5      	ldr	r5, [r4, #24]
 8003ee0:	f045 0501 	orr.w	r5, r5, #1
 8003ee4:	61a5      	str	r5, [r4, #24]
 8003ee6:	69a4      	ldr	r4, [r4, #24]
 8003ee8:	f004 0401 	and.w	r4, r4, #1
 8003eec:	9401      	str	r4, [sp, #4]
 8003eee:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003ef0:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8003ef4:	f10c 0502 	add.w	r5, ip, #2
 8003ef8:	4c14      	ldr	r4, [pc, #80]	; (8003f4c <HAL_GPIO_Init+0x1b8>)
 8003efa:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003efe:	f003 0403 	and.w	r4, r3, #3
 8003f02:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003f06:	240f      	movs	r4, #15
 8003f08:	fa04 f40e 	lsl.w	r4, r4, lr
 8003f0c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f10:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003f14:	f43f af6e 	beq.w	8003df4 <HAL_GPIO_Init+0x60>
 8003f18:	4c0f      	ldr	r4, [pc, #60]	; (8003f58 <HAL_GPIO_Init+0x1c4>)
 8003f1a:	42a0      	cmp	r0, r4
 8003f1c:	d00e      	beq.n	8003f3c <HAL_GPIO_Init+0x1a8>
 8003f1e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003f22:	42a0      	cmp	r0, r4
 8003f24:	d00c      	beq.n	8003f40 <HAL_GPIO_Init+0x1ac>
 8003f26:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003f2a:	42a0      	cmp	r0, r4
 8003f2c:	d00a      	beq.n	8003f44 <HAL_GPIO_Init+0x1b0>
 8003f2e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003f32:	42a0      	cmp	r0, r4
 8003f34:	f43f af5c 	beq.w	8003df0 <HAL_GPIO_Init+0x5c>
 8003f38:	2405      	movs	r4, #5
 8003f3a:	e75c      	b.n	8003df6 <HAL_GPIO_Init+0x62>
 8003f3c:	2401      	movs	r4, #1
 8003f3e:	e75a      	b.n	8003df6 <HAL_GPIO_Init+0x62>
 8003f40:	2402      	movs	r4, #2
 8003f42:	e758      	b.n	8003df6 <HAL_GPIO_Init+0x62>
 8003f44:	2403      	movs	r4, #3
 8003f46:	e756      	b.n	8003df6 <HAL_GPIO_Init+0x62>
  }
}
 8003f48:	b003      	add	sp, #12
 8003f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f4c:	40010000 	.word	0x40010000
 8003f50:	40010400 	.word	0x40010400
 8003f54:	40021000 	.word	0x40021000
 8003f58:	48000400 	.word	0x48000400

08003f5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f5c:	b10a      	cbz	r2, 8003f62 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f5e:	6181      	str	r1, [r0, #24]
 8003f60:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f62:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003f64:	4770      	bx	lr
	...

08003f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f68:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f6a:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <HAL_MspInit+0x2c>)
 8003f6c:	699a      	ldr	r2, [r3, #24]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	619a      	str	r2, [r3, #24]
 8003f74:	699a      	ldr	r2, [r3, #24]
 8003f76:	f002 0201 	and.w	r2, r2, #1
 8003f7a:	9200      	str	r2, [sp, #0]
 8003f7c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f7e:	69da      	ldr	r2, [r3, #28]
 8003f80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f84:	61da      	str	r2, [r3, #28]
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8c:	9301      	str	r3, [sp, #4]
 8003f8e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f90:	b002      	add	sp, #8
 8003f92:	4770      	bx	lr
 8003f94:	40021000 	.word	0x40021000

08003f98 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	f000 8301 	beq.w	80045a0 <HAL_RCC_OscConfig+0x608>
{
 8003f9e:	b570      	push	{r4, r5, r6, lr}
 8003fa0:	b082      	sub	sp, #8
 8003fa2:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fa4:	6803      	ldr	r3, [r0, #0]
 8003fa6:	f013 0f01 	tst.w	r3, #1
 8003faa:	d03b      	beq.n	8004024 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003fac:	4bb5      	ldr	r3, [pc, #724]	; (8004284 <HAL_RCC_OscConfig+0x2ec>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f003 030c 	and.w	r3, r3, #12
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d01e      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fb8:	4bb2      	ldr	r3, [pc, #712]	; (8004284 <HAL_RCC_OscConfig+0x2ec>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 030c 	and.w	r3, r3, #12
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d013      	beq.n	8003fec <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc4:	6863      	ldr	r3, [r4, #4]
 8003fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fca:	d068      	beq.n	800409e <HAL_RCC_OscConfig+0x106>
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f040 8092 	bne.w	80040f6 <HAL_RCC_OscConfig+0x15e>
 8003fd2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003fd6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	e05d      	b.n	80040a8 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fec:	4ba5      	ldr	r3, [pc, #660]	; (8004284 <HAL_RCC_OscConfig+0x2ec>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003ff4:	d0e6      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x2c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ffa:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ffe:	4ba1      	ldr	r3, [pc, #644]	; (8004284 <HAL_RCC_OscConfig+0x2ec>)
 8004000:	6819      	ldr	r1, [r3, #0]
 8004002:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004006:	fa93 f3a3 	rbit	r3, r3
 800400a:	fab3 f383 	clz	r3, r3
 800400e:	f003 031f 	and.w	r3, r3, #31
 8004012:	2201      	movs	r2, #1
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	420b      	tst	r3, r1
 800401a:	d003      	beq.n	8004024 <HAL_RCC_OscConfig+0x8c>
 800401c:	6863      	ldr	r3, [r4, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 82c0 	beq.w	80045a4 <HAL_RCC_OscConfig+0x60c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004024:	6823      	ldr	r3, [r4, #0]
 8004026:	f013 0f02 	tst.w	r3, #2
 800402a:	f000 80c5 	beq.w	80041b8 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800402e:	4b95      	ldr	r3, [pc, #596]	; (8004284 <HAL_RCC_OscConfig+0x2ec>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f013 0f0c 	tst.w	r3, #12
 8004036:	f000 809c 	beq.w	8004172 <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800403a:	4b92      	ldr	r3, [pc, #584]	; (8004284 <HAL_RCC_OscConfig+0x2ec>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f003 030c 	and.w	r3, r3, #12
 8004042:	2b08      	cmp	r3, #8
 8004044:	f000 808f 	beq.w	8004166 <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004048:	6923      	ldr	r3, [r4, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 80f2 	beq.w	8004234 <HAL_RCC_OscConfig+0x29c>
 8004050:	2201      	movs	r2, #1
 8004052:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004056:	fab3 f383 	clz	r3, r3
 800405a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800405e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004066:	f7ff fe1d 	bl	8003ca4 <HAL_GetTick>
 800406a:	4605      	mov	r5, r0
 800406c:	2302      	movs	r3, #2
 800406e:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004072:	4b84      	ldr	r3, [pc, #528]	; (8004284 <HAL_RCC_OscConfig+0x2ec>)
 8004074:	6819      	ldr	r1, [r3, #0]
 8004076:	2302      	movs	r3, #2
 8004078:	fa93 f3a3 	rbit	r3, r3
 800407c:	fab3 f383 	clz	r3, r3
 8004080:	f003 031f 	and.w	r3, r3, #31
 8004084:	2201      	movs	r2, #1
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	420b      	tst	r3, r1
 800408c:	f040 80c3 	bne.w	8004216 <HAL_RCC_OscConfig+0x27e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004090:	f7ff fe08 	bl	8003ca4 <HAL_GetTick>
 8004094:	1b40      	subs	r0, r0, r5
 8004096:	2802      	cmp	r0, #2
 8004098:	d9e8      	bls.n	800406c <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 800409a:	2003      	movs	r0, #3
 800409c:	e28b      	b.n	80045b6 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800409e:	4a79      	ldr	r2, [pc, #484]	; (8004284 <HAL_RCC_OscConfig+0x2ec>)
 80040a0:	6813      	ldr	r3, [r2, #0]
 80040a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a6:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80040a8:	4a76      	ldr	r2, [pc, #472]	; (8004284 <HAL_RCC_OscConfig+0x2ec>)
 80040aa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80040ac:	f023 030f 	bic.w	r3, r3, #15
 80040b0:	68a1      	ldr	r1, [r4, #8]
 80040b2:	430b      	orrs	r3, r1
 80040b4:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040b6:	6863      	ldr	r3, [r4, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d036      	beq.n	800412a <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 80040bc:	f7ff fdf2 	bl	8003ca4 <HAL_GetTick>
 80040c0:	4605      	mov	r5, r0
 80040c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040c6:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ca:	4b6e      	ldr	r3, [pc, #440]	; (8004284 <HAL_RCC_OscConfig+0x2ec>)
 80040cc:	6819      	ldr	r1, [r3, #0]
 80040ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040d2:	fa93 f3a3 	rbit	r3, r3
 80040d6:	fab3 f383 	clz	r3, r3
 80040da:	f003 031f 	and.w	r3, r3, #31
 80040de:	2201      	movs	r2, #1
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	420b      	tst	r3, r1
 80040e6:	d19d      	bne.n	8004024 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040e8:	f7ff fddc 	bl	8003ca4 <HAL_GetTick>
 80040ec:	1b40      	subs	r0, r0, r5
 80040ee:	2864      	cmp	r0, #100	; 0x64
 80040f0:	d9e7      	bls.n	80040c2 <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 80040f2:	2003      	movs	r0, #3
 80040f4:	e25f      	b.n	80045b6 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040fa:	d009      	beq.n	8004110 <HAL_RCC_OscConfig+0x178>
 80040fc:	4b61      	ldr	r3, [pc, #388]	; (8004284 <HAL_RCC_OscConfig+0x2ec>)
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	e7cb      	b.n	80040a8 <HAL_RCC_OscConfig+0x110>
 8004110:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004114:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	e7be      	b.n	80040a8 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 800412a:	f7ff fdbb 	bl	8003ca4 <HAL_GetTick>
 800412e:	4605      	mov	r5, r0
 8004130:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004134:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004138:	4b52      	ldr	r3, [pc, #328]	; (8004284 <HAL_RCC_OscConfig+0x2ec>)
 800413a:	6819      	ldr	r1, [r3, #0]
 800413c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004140:	fa93 f3a3 	rbit	r3, r3
 8004144:	fab3 f383 	clz	r3, r3
 8004148:	f003 031f 	and.w	r3, r3, #31
 800414c:	2201      	movs	r2, #1
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	420b      	tst	r3, r1
 8004154:	f43f af66 	beq.w	8004024 <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004158:	f7ff fda4 	bl	8003ca4 <HAL_GetTick>
 800415c:	1b40      	subs	r0, r0, r5
 800415e:	2864      	cmp	r0, #100	; 0x64
 8004160:	d9e6      	bls.n	8004130 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 8004162:	2003      	movs	r0, #3
 8004164:	e227      	b.n	80045b6 <HAL_RCC_OscConfig+0x61e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004166:	4b47      	ldr	r3, [pc, #284]	; (8004284 <HAL_RCC_OscConfig+0x2ec>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800416e:	f47f af6b 	bne.w	8004048 <HAL_RCC_OscConfig+0xb0>
 8004172:	2302      	movs	r3, #2
 8004174:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004178:	4b42      	ldr	r3, [pc, #264]	; (8004284 <HAL_RCC_OscConfig+0x2ec>)
 800417a:	6819      	ldr	r1, [r3, #0]
 800417c:	2302      	movs	r3, #2
 800417e:	fa93 f3a3 	rbit	r3, r3
 8004182:	fab3 f383 	clz	r3, r3
 8004186:	f003 031f 	and.w	r3, r3, #31
 800418a:	2201      	movs	r2, #1
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	420b      	tst	r3, r1
 8004192:	d003      	beq.n	800419c <HAL_RCC_OscConfig+0x204>
 8004194:	6923      	ldr	r3, [r4, #16]
 8004196:	4293      	cmp	r3, r2
 8004198:	f040 8206 	bne.w	80045a8 <HAL_RCC_OscConfig+0x610>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419c:	4839      	ldr	r0, [pc, #228]	; (8004284 <HAL_RCC_OscConfig+0x2ec>)
 800419e:	6803      	ldr	r3, [r0, #0]
 80041a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80041a4:	6961      	ldr	r1, [r4, #20]
 80041a6:	22f8      	movs	r2, #248	; 0xf8
 80041a8:	fa92 f2a2 	rbit	r2, r2
 80041ac:	fab2 f282 	clz	r2, r2
 80041b0:	fa01 f202 	lsl.w	r2, r1, r2
 80041b4:	4313      	orrs	r3, r2
 80041b6:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	f013 0f08 	tst.w	r3, #8
 80041be:	f000 808d 	beq.w	80042dc <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041c2:	69a3      	ldr	r3, [r4, #24]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d061      	beq.n	800428c <HAL_RCC_OscConfig+0x2f4>
 80041c8:	2101      	movs	r1, #1
 80041ca:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ce:	fab2 f282 	clz	r2, r2
 80041d2:	4b2d      	ldr	r3, [pc, #180]	; (8004288 <HAL_RCC_OscConfig+0x2f0>)
 80041d4:	4413      	add	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041da:	f7ff fd63 	bl	8003ca4 <HAL_GetTick>
 80041de:	4605      	mov	r5, r0
 80041e0:	2302      	movs	r3, #2
 80041e2:	fa93 f2a3 	rbit	r2, r3
 80041e6:	fa93 f2a3 	rbit	r2, r3
 80041ea:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ee:	4a25      	ldr	r2, [pc, #148]	; (8004284 <HAL_RCC_OscConfig+0x2ec>)
 80041f0:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80041f2:	fa93 f3a3 	rbit	r3, r3
 80041f6:	fab3 f383 	clz	r3, r3
 80041fa:	f003 031f 	and.w	r3, r3, #31
 80041fe:	2201      	movs	r2, #1
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	420b      	tst	r3, r1
 8004206:	d169      	bne.n	80042dc <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004208:	f7ff fd4c 	bl	8003ca4 <HAL_GetTick>
 800420c:	1b40      	subs	r0, r0, r5
 800420e:	2802      	cmp	r0, #2
 8004210:	d9e6      	bls.n	80041e0 <HAL_RCC_OscConfig+0x248>
        {
          return HAL_TIMEOUT;
 8004212:	2003      	movs	r0, #3
 8004214:	e1cf      	b.n	80045b6 <HAL_RCC_OscConfig+0x61e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004216:	481b      	ldr	r0, [pc, #108]	; (8004284 <HAL_RCC_OscConfig+0x2ec>)
 8004218:	6803      	ldr	r3, [r0, #0]
 800421a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800421e:	6961      	ldr	r1, [r4, #20]
 8004220:	22f8      	movs	r2, #248	; 0xf8
 8004222:	fa92 f2a2 	rbit	r2, r2
 8004226:	fab2 f282 	clz	r2, r2
 800422a:	fa01 f202 	lsl.w	r2, r1, r2
 800422e:	4313      	orrs	r3, r2
 8004230:	6003      	str	r3, [r0, #0]
 8004232:	e7c1      	b.n	80041b8 <HAL_RCC_OscConfig+0x220>
 8004234:	2301      	movs	r3, #1
 8004236:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 800423a:	fab3 f383 	clz	r3, r3
 800423e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004242:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800424c:	f7ff fd2a 	bl	8003ca4 <HAL_GetTick>
 8004250:	4605      	mov	r5, r0
 8004252:	2302      	movs	r3, #2
 8004254:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004258:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <HAL_RCC_OscConfig+0x2ec>)
 800425a:	6819      	ldr	r1, [r3, #0]
 800425c:	2302      	movs	r3, #2
 800425e:	fa93 f3a3 	rbit	r3, r3
 8004262:	fab3 f383 	clz	r3, r3
 8004266:	f003 031f 	and.w	r3, r3, #31
 800426a:	2201      	movs	r2, #1
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	420b      	tst	r3, r1
 8004272:	d0a1      	beq.n	80041b8 <HAL_RCC_OscConfig+0x220>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004274:	f7ff fd16 	bl	8003ca4 <HAL_GetTick>
 8004278:	1b40      	subs	r0, r0, r5
 800427a:	2802      	cmp	r0, #2
 800427c:	d9e9      	bls.n	8004252 <HAL_RCC_OscConfig+0x2ba>
            return HAL_TIMEOUT;
 800427e:	2003      	movs	r0, #3
 8004280:	e199      	b.n	80045b6 <HAL_RCC_OscConfig+0x61e>
 8004282:	bf00      	nop
 8004284:	40021000 	.word	0x40021000
 8004288:	10908120 	.word	0x10908120
 800428c:	2201      	movs	r2, #1
 800428e:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004292:	fab2 f282 	clz	r2, r2
 8004296:	4bb7      	ldr	r3, [pc, #732]	; (8004574 <HAL_RCC_OscConfig+0x5dc>)
 8004298:	4413      	add	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a0:	f7ff fd00 	bl	8003ca4 <HAL_GetTick>
 80042a4:	4605      	mov	r5, r0
 80042a6:	2302      	movs	r3, #2
 80042a8:	fa93 f2a3 	rbit	r2, r3
 80042ac:	fa93 f2a3 	rbit	r2, r3
 80042b0:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b4:	4ab0      	ldr	r2, [pc, #704]	; (8004578 <HAL_RCC_OscConfig+0x5e0>)
 80042b6:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80042b8:	fa93 f3a3 	rbit	r3, r3
 80042bc:	fab3 f383 	clz	r3, r3
 80042c0:	f003 031f 	and.w	r3, r3, #31
 80042c4:	2201      	movs	r2, #1
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	420b      	tst	r3, r1
 80042cc:	d006      	beq.n	80042dc <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ce:	f7ff fce9 	bl	8003ca4 <HAL_GetTick>
 80042d2:	1b40      	subs	r0, r0, r5
 80042d4:	2802      	cmp	r0, #2
 80042d6:	d9e6      	bls.n	80042a6 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 80042d8:	2003      	movs	r0, #3
 80042da:	e16c      	b.n	80045b6 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	f013 0f04 	tst.w	r3, #4
 80042e2:	f000 80a9 	beq.w	8004438 <HAL_RCC_OscConfig+0x4a0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042e6:	4ba4      	ldr	r3, [pc, #656]	; (8004578 <HAL_RCC_OscConfig+0x5e0>)
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80042ee:	d120      	bne.n	8004332 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f0:	4ba1      	ldr	r3, [pc, #644]	; (8004578 <HAL_RCC_OscConfig+0x5e0>)
 80042f2:	69da      	ldr	r2, [r3, #28]
 80042f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80042f8:	61da      	str	r2, [r3, #28]
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004300:	9301      	str	r3, [sp, #4]
 8004302:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004304:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004306:	4b9d      	ldr	r3, [pc, #628]	; (800457c <HAL_RCC_OscConfig+0x5e4>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800430e:	d012      	beq.n	8004336 <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004310:	68e3      	ldr	r3, [r4, #12]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d023      	beq.n	800435e <HAL_RCC_OscConfig+0x3c6>
 8004316:	bb73      	cbnz	r3, 8004376 <HAL_RCC_OscConfig+0x3de>
 8004318:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800431c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004320:	6a1a      	ldr	r2, [r3, #32]
 8004322:	f022 0201 	bic.w	r2, r2, #1
 8004326:	621a      	str	r2, [r3, #32]
 8004328:	6a1a      	ldr	r2, [r3, #32]
 800432a:	f022 0204 	bic.w	r2, r2, #4
 800432e:	621a      	str	r2, [r3, #32]
 8004330:	e01a      	b.n	8004368 <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 8004332:	2500      	movs	r5, #0
 8004334:	e7e7      	b.n	8004306 <HAL_RCC_OscConfig+0x36e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004336:	4a91      	ldr	r2, [pc, #580]	; (800457c <HAL_RCC_OscConfig+0x5e4>)
 8004338:	6813      	ldr	r3, [r2, #0]
 800433a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800433e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004340:	f7ff fcb0 	bl	8003ca4 <HAL_GetTick>
 8004344:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004346:	4b8d      	ldr	r3, [pc, #564]	; (800457c <HAL_RCC_OscConfig+0x5e4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800434e:	d1df      	bne.n	8004310 <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004350:	f7ff fca8 	bl	8003ca4 <HAL_GetTick>
 8004354:	1b80      	subs	r0, r0, r6
 8004356:	2864      	cmp	r0, #100	; 0x64
 8004358:	d9f5      	bls.n	8004346 <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 800435a:	2003      	movs	r0, #3
 800435c:	e12b      	b.n	80045b6 <HAL_RCC_OscConfig+0x61e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800435e:	4a86      	ldr	r2, [pc, #536]	; (8004578 <HAL_RCC_OscConfig+0x5e0>)
 8004360:	6a13      	ldr	r3, [r2, #32]
 8004362:	f043 0301 	orr.w	r3, r3, #1
 8004366:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004368:	68e3      	ldr	r3, [r4, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d03c      	beq.n	80043e8 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800436e:	f7ff fc99 	bl	8003ca4 <HAL_GetTick>
 8004372:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004374:	e02b      	b.n	80043ce <HAL_RCC_OscConfig+0x436>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004376:	2b05      	cmp	r3, #5
 8004378:	d009      	beq.n	800438e <HAL_RCC_OscConfig+0x3f6>
 800437a:	4b7f      	ldr	r3, [pc, #508]	; (8004578 <HAL_RCC_OscConfig+0x5e0>)
 800437c:	6a1a      	ldr	r2, [r3, #32]
 800437e:	f022 0201 	bic.w	r2, r2, #1
 8004382:	621a      	str	r2, [r3, #32]
 8004384:	6a1a      	ldr	r2, [r3, #32]
 8004386:	f022 0204 	bic.w	r2, r2, #4
 800438a:	621a      	str	r2, [r3, #32]
 800438c:	e7ec      	b.n	8004368 <HAL_RCC_OscConfig+0x3d0>
 800438e:	4b7a      	ldr	r3, [pc, #488]	; (8004578 <HAL_RCC_OscConfig+0x5e0>)
 8004390:	6a1a      	ldr	r2, [r3, #32]
 8004392:	f042 0204 	orr.w	r2, r2, #4
 8004396:	621a      	str	r2, [r3, #32]
 8004398:	6a1a      	ldr	r2, [r3, #32]
 800439a:	f042 0201 	orr.w	r2, r2, #1
 800439e:	621a      	str	r2, [r3, #32]
 80043a0:	e7e2      	b.n	8004368 <HAL_RCC_OscConfig+0x3d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a2:	4b75      	ldr	r3, [pc, #468]	; (8004578 <HAL_RCC_OscConfig+0x5e0>)
 80043a4:	6a19      	ldr	r1, [r3, #32]
 80043a6:	2302      	movs	r3, #2
 80043a8:	fa93 f3a3 	rbit	r3, r3
 80043ac:	fab3 f383 	clz	r3, r3
 80043b0:	f003 031f 	and.w	r3, r3, #31
 80043b4:	2201      	movs	r2, #1
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	4219      	tst	r1, r3
 80043bc:	d13b      	bne.n	8004436 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043be:	f7ff fc71 	bl	8003ca4 <HAL_GetTick>
 80043c2:	1b80      	subs	r0, r0, r6
 80043c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80043c8:	4298      	cmp	r0, r3
 80043ca:	f200 80ef 	bhi.w	80045ac <HAL_RCC_OscConfig+0x614>
 80043ce:	2302      	movs	r3, #2
 80043d0:	fa93 f2a3 	rbit	r2, r3
 80043d4:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1e2      	bne.n	80043a2 <HAL_RCC_OscConfig+0x40a>
 80043dc:	2302      	movs	r3, #2
 80043de:	fa93 f3a3 	rbit	r3, r3
 80043e2:	4b65      	ldr	r3, [pc, #404]	; (8004578 <HAL_RCC_OscConfig+0x5e0>)
 80043e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80043e6:	e7de      	b.n	80043a6 <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e8:	f7ff fc5c 	bl	8003ca4 <HAL_GetTick>
 80043ec:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ee:	e015      	b.n	800441c <HAL_RCC_OscConfig+0x484>
 80043f0:	4b61      	ldr	r3, [pc, #388]	; (8004578 <HAL_RCC_OscConfig+0x5e0>)
 80043f2:	6a19      	ldr	r1, [r3, #32]
 80043f4:	2302      	movs	r3, #2
 80043f6:	fa93 f3a3 	rbit	r3, r3
 80043fa:	fab3 f383 	clz	r3, r3
 80043fe:	f003 031f 	and.w	r3, r3, #31
 8004402:	2201      	movs	r2, #1
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	4219      	tst	r1, r3
 800440a:	d014      	beq.n	8004436 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800440c:	f7ff fc4a 	bl	8003ca4 <HAL_GetTick>
 8004410:	1b80      	subs	r0, r0, r6
 8004412:	f241 3388 	movw	r3, #5000	; 0x1388
 8004416:	4298      	cmp	r0, r3
 8004418:	f200 80ca 	bhi.w	80045b0 <HAL_RCC_OscConfig+0x618>
 800441c:	2302      	movs	r3, #2
 800441e:	fa93 f2a3 	rbit	r2, r3
 8004422:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e2      	bne.n	80043f0 <HAL_RCC_OscConfig+0x458>
 800442a:	2302      	movs	r3, #2
 800442c:	fa93 f3a3 	rbit	r3, r3
 8004430:	4b51      	ldr	r3, [pc, #324]	; (8004578 <HAL_RCC_OscConfig+0x5e0>)
 8004432:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004434:	e7de      	b.n	80043f4 <HAL_RCC_OscConfig+0x45c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004436:	bbb5      	cbnz	r5, 80044a6 <HAL_RCC_OscConfig+0x50e>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004438:	69e3      	ldr	r3, [r4, #28]
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 80ba 	beq.w	80045b4 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004440:	4a4d      	ldr	r2, [pc, #308]	; (8004578 <HAL_RCC_OscConfig+0x5e0>)
 8004442:	6852      	ldr	r2, [r2, #4]
 8004444:	f002 020c 	and.w	r2, r2, #12
 8004448:	2a08      	cmp	r2, #8
 800444a:	f000 8099 	beq.w	8004580 <HAL_RCC_OscConfig+0x5e8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800444e:	2b02      	cmp	r3, #2
 8004450:	d02f      	beq.n	80044b2 <HAL_RCC_OscConfig+0x51a>
 8004452:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004456:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800445a:	fab3 f383 	clz	r3, r3
 800445e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004462:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446c:	f7ff fc1a 	bl	8003ca4 <HAL_GetTick>
 8004470:	4604      	mov	r4, r0
 8004472:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004476:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800447a:	4b3f      	ldr	r3, [pc, #252]	; (8004578 <HAL_RCC_OscConfig+0x5e0>)
 800447c:	6819      	ldr	r1, [r3, #0]
 800447e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004482:	fa93 f3a3 	rbit	r3, r3
 8004486:	fab3 f383 	clz	r3, r3
 800448a:	f003 031f 	and.w	r3, r3, #31
 800448e:	2201      	movs	r2, #1
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	4219      	tst	r1, r3
 8004496:	d06b      	beq.n	8004570 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004498:	f7ff fc04 	bl	8003ca4 <HAL_GetTick>
 800449c:	1b00      	subs	r0, r0, r4
 800449e:	2802      	cmp	r0, #2
 80044a0:	d9e7      	bls.n	8004472 <HAL_RCC_OscConfig+0x4da>
          {
            return HAL_TIMEOUT;
 80044a2:	2003      	movs	r0, #3
 80044a4:	e087      	b.n	80045b6 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a6:	4a34      	ldr	r2, [pc, #208]	; (8004578 <HAL_RCC_OscConfig+0x5e0>)
 80044a8:	69d3      	ldr	r3, [r2, #28]
 80044aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ae:	61d3      	str	r3, [r2, #28]
 80044b0:	e7c2      	b.n	8004438 <HAL_RCC_OscConfig+0x4a0>
 80044b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044b6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80044ba:	fab3 f383 	clz	r3, r3
 80044be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80044cc:	f7ff fbea 	bl	8003ca4 <HAL_GetTick>
 80044d0:	4605      	mov	r5, r0
 80044d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044d6:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044da:	4b27      	ldr	r3, [pc, #156]	; (8004578 <HAL_RCC_OscConfig+0x5e0>)
 80044dc:	6819      	ldr	r1, [r3, #0]
 80044de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044e2:	fa93 f3a3 	rbit	r3, r3
 80044e6:	fab3 f383 	clz	r3, r3
 80044ea:	f003 031f 	and.w	r3, r3, #31
 80044ee:	2201      	movs	r2, #1
 80044f0:	fa02 f303 	lsl.w	r3, r2, r3
 80044f4:	4219      	tst	r1, r3
 80044f6:	d006      	beq.n	8004506 <HAL_RCC_OscConfig+0x56e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044f8:	f7ff fbd4 	bl	8003ca4 <HAL_GetTick>
 80044fc:	1b40      	subs	r0, r0, r5
 80044fe:	2802      	cmp	r0, #2
 8004500:	d9e7      	bls.n	80044d2 <HAL_RCC_OscConfig+0x53a>
            return HAL_TIMEOUT;
 8004502:	2003      	movs	r0, #3
 8004504:	e057      	b.n	80045b6 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004506:	491c      	ldr	r1, [pc, #112]	; (8004578 <HAL_RCC_OscConfig+0x5e0>)
 8004508:	684b      	ldr	r3, [r1, #4]
 800450a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800450e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004510:	6a20      	ldr	r0, [r4, #32]
 8004512:	4302      	orrs	r2, r0
 8004514:	4313      	orrs	r3, r2
 8004516:	604b      	str	r3, [r1, #4]
 8004518:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800451c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8004520:	fab3 f383 	clz	r3, r3
 8004524:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004528:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	2201      	movs	r2, #1
 8004530:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004532:	f7ff fbb7 	bl	8003ca4 <HAL_GetTick>
 8004536:	4604      	mov	r4, r0
 8004538:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800453c:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004540:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <HAL_RCC_OscConfig+0x5e0>)
 8004542:	6819      	ldr	r1, [r3, #0]
 8004544:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004548:	fa93 f3a3 	rbit	r3, r3
 800454c:	fab3 f383 	clz	r3, r3
 8004550:	f003 031f 	and.w	r3, r3, #31
 8004554:	2201      	movs	r2, #1
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	4219      	tst	r1, r3
 800455c:	d106      	bne.n	800456c <HAL_RCC_OscConfig+0x5d4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800455e:	f7ff fba1 	bl	8003ca4 <HAL_GetTick>
 8004562:	1b00      	subs	r0, r0, r4
 8004564:	2802      	cmp	r0, #2
 8004566:	d9e7      	bls.n	8004538 <HAL_RCC_OscConfig+0x5a0>
            return HAL_TIMEOUT;
 8004568:	2003      	movs	r0, #3
 800456a:	e024      	b.n	80045b6 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 800456c:	2000      	movs	r0, #0
 800456e:	e022      	b.n	80045b6 <HAL_RCC_OscConfig+0x61e>
 8004570:	2000      	movs	r0, #0
 8004572:	e020      	b.n	80045b6 <HAL_RCC_OscConfig+0x61e>
 8004574:	10908120 	.word	0x10908120
 8004578:	40021000 	.word	0x40021000
 800457c:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004580:	2b01      	cmp	r3, #1
 8004582:	d01a      	beq.n	80045ba <HAL_RCC_OscConfig+0x622>
        pll_config = RCC->CFGR;
 8004584:	4b10      	ldr	r3, [pc, #64]	; (80045c8 <HAL_RCC_OscConfig+0x630>)
 8004586:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004588:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800458c:	6a22      	ldr	r2, [r4, #32]
 800458e:	4291      	cmp	r1, r2
 8004590:	d115      	bne.n	80045be <HAL_RCC_OscConfig+0x626>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004592:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004596:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004598:	4293      	cmp	r3, r2
 800459a:	d112      	bne.n	80045c2 <HAL_RCC_OscConfig+0x62a>
  return HAL_OK;
 800459c:	2000      	movs	r0, #0
 800459e:	e00a      	b.n	80045b6 <HAL_RCC_OscConfig+0x61e>
    return HAL_ERROR;
 80045a0:	2001      	movs	r0, #1
}
 80045a2:	4770      	bx	lr
        return HAL_ERROR;
 80045a4:	2001      	movs	r0, #1
 80045a6:	e006      	b.n	80045b6 <HAL_RCC_OscConfig+0x61e>
        return HAL_ERROR;
 80045a8:	2001      	movs	r0, #1
 80045aa:	e004      	b.n	80045b6 <HAL_RCC_OscConfig+0x61e>
          return HAL_TIMEOUT;
 80045ac:	2003      	movs	r0, #3
 80045ae:	e002      	b.n	80045b6 <HAL_RCC_OscConfig+0x61e>
          return HAL_TIMEOUT;
 80045b0:	2003      	movs	r0, #3
 80045b2:	e000      	b.n	80045b6 <HAL_RCC_OscConfig+0x61e>
  return HAL_OK;
 80045b4:	2000      	movs	r0, #0
}
 80045b6:	b002      	add	sp, #8
 80045b8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80045ba:	2001      	movs	r0, #1
 80045bc:	e7fb      	b.n	80045b6 <HAL_RCC_OscConfig+0x61e>
          return HAL_ERROR;
 80045be:	2001      	movs	r0, #1
 80045c0:	e7f9      	b.n	80045b6 <HAL_RCC_OscConfig+0x61e>
 80045c2:	2001      	movs	r0, #1
 80045c4:	e7f7      	b.n	80045b6 <HAL_RCC_OscConfig+0x61e>
 80045c6:	bf00      	nop
 80045c8:	40021000 	.word	0x40021000

080045cc <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80045cc:	4b11      	ldr	r3, [pc, #68]	; (8004614 <HAL_RCC_GetSysClockFreq+0x48>)
 80045ce:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045d0:	f002 030c 	and.w	r3, r2, #12
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d018      	beq.n	800460a <HAL_RCC_GetSysClockFreq+0x3e>
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d118      	bne.n	800460e <HAL_RCC_GetSysClockFreq+0x42>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80045dc:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80045e0:	490d      	ldr	r1, [pc, #52]	; (8004618 <HAL_RCC_GetSysClockFreq+0x4c>)
 80045e2:	5cc8      	ldrb	r0, [r1, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80045e4:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <HAL_RCC_GetSysClockFreq+0x48>)
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	f003 030f 	and.w	r3, r3, #15
 80045ec:	490b      	ldr	r1, [pc, #44]	; (800461c <HAL_RCC_GetSysClockFreq+0x50>)
 80045ee:	5cc9      	ldrb	r1, [r1, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80045f0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80045f4:	d005      	beq.n	8004602 <HAL_RCC_GetSysClockFreq+0x36>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80045f6:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <HAL_RCC_GetSysClockFreq+0x54>)
 80045f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80045fc:	fb03 f000 	mul.w	r0, r3, r0
 8004600:	4770      	bx	lr
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004602:	4b08      	ldr	r3, [pc, #32]	; (8004624 <HAL_RCC_GetSysClockFreq+0x58>)
 8004604:	fb03 f000 	mul.w	r0, r3, r0
 8004608:	4770      	bx	lr
  switch (tmpreg & RCC_CFGR_SWS)
 800460a:	4805      	ldr	r0, [pc, #20]	; (8004620 <HAL_RCC_GetSysClockFreq+0x54>)
 800460c:	4770      	bx	lr
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800460e:	4806      	ldr	r0, [pc, #24]	; (8004628 <HAL_RCC_GetSysClockFreq+0x5c>)
      break;
    }
  }
  return sysclockfreq;
}
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40021000 	.word	0x40021000
 8004618:	0800623c 	.word	0x0800623c
 800461c:	0800624c 	.word	0x0800624c
 8004620:	00f42400 	.word	0x00f42400
 8004624:	003d0900 	.word	0x003d0900
 8004628:	007a1200 	.word	0x007a1200

0800462c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800462c:	2800      	cmp	r0, #0
 800462e:	f000 80be 	beq.w	80047ae <HAL_RCC_ClockConfig+0x182>
{
 8004632:	b570      	push	{r4, r5, r6, lr}
 8004634:	460d      	mov	r5, r1
 8004636:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004638:	4b61      	ldr	r3, [pc, #388]	; (80047c0 <HAL_RCC_ClockConfig+0x194>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	428b      	cmp	r3, r1
 8004642:	d20b      	bcs.n	800465c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004644:	4a5e      	ldr	r2, [pc, #376]	; (80047c0 <HAL_RCC_ClockConfig+0x194>)
 8004646:	6813      	ldr	r3, [r2, #0]
 8004648:	f023 0307 	bic.w	r3, r3, #7
 800464c:	430b      	orrs	r3, r1
 800464e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004650:	6813      	ldr	r3, [r2, #0]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	428b      	cmp	r3, r1
 8004658:	f040 80ab 	bne.w	80047b2 <HAL_RCC_ClockConfig+0x186>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	f013 0f02 	tst.w	r3, #2
 8004662:	d006      	beq.n	8004672 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004664:	4a57      	ldr	r2, [pc, #348]	; (80047c4 <HAL_RCC_ClockConfig+0x198>)
 8004666:	6853      	ldr	r3, [r2, #4]
 8004668:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800466c:	68a1      	ldr	r1, [r4, #8]
 800466e:	430b      	orrs	r3, r1
 8004670:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	f013 0f01 	tst.w	r3, #1
 8004678:	d05a      	beq.n	8004730 <HAL_RCC_ClockConfig+0x104>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800467a:	6863      	ldr	r3, [r4, #4]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d02d      	beq.n	80046dc <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004680:	2b02      	cmp	r3, #2
 8004682:	d040      	beq.n	8004706 <HAL_RCC_ClockConfig+0xda>
 8004684:	2202      	movs	r2, #2
 8004686:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800468a:	4a4e      	ldr	r2, [pc, #312]	; (80047c4 <HAL_RCC_ClockConfig+0x198>)
 800468c:	6810      	ldr	r0, [r2, #0]
 800468e:	2202      	movs	r2, #2
 8004690:	fa92 f2a2 	rbit	r2, r2
 8004694:	fab2 f282 	clz	r2, r2
 8004698:	f002 021f 	and.w	r2, r2, #31
 800469c:	2101      	movs	r1, #1
 800469e:	fa01 f202 	lsl.w	r2, r1, r2
 80046a2:	4210      	tst	r0, r2
 80046a4:	f000 8087 	beq.w	80047b6 <HAL_RCC_ClockConfig+0x18a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046a8:	4946      	ldr	r1, [pc, #280]	; (80047c4 <HAL_RCC_ClockConfig+0x198>)
 80046aa:	684a      	ldr	r2, [r1, #4]
 80046ac:	f022 0203 	bic.w	r2, r2, #3
 80046b0:	4313      	orrs	r3, r2
 80046b2:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80046b4:	f7ff faf6 	bl	8003ca4 <HAL_GetTick>
 80046b8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ba:	4b42      	ldr	r3, [pc, #264]	; (80047c4 <HAL_RCC_ClockConfig+0x198>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f003 030c 	and.w	r3, r3, #12
 80046c2:	6862      	ldr	r2, [r4, #4]
 80046c4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80046c8:	d032      	beq.n	8004730 <HAL_RCC_ClockConfig+0x104>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ca:	f7ff faeb 	bl	8003ca4 <HAL_GetTick>
 80046ce:	1b80      	subs	r0, r0, r6
 80046d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80046d4:	4298      	cmp	r0, r3
 80046d6:	d9f0      	bls.n	80046ba <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 80046d8:	2003      	movs	r0, #3
 80046da:	e067      	b.n	80047ac <HAL_RCC_ClockConfig+0x180>
 80046dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046e0:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e4:	4a37      	ldr	r2, [pc, #220]	; (80047c4 <HAL_RCC_ClockConfig+0x198>)
 80046e6:	6810      	ldr	r0, [r2, #0]
 80046e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046ec:	fa92 f2a2 	rbit	r2, r2
 80046f0:	fab2 f282 	clz	r2, r2
 80046f4:	f002 021f 	and.w	r2, r2, #31
 80046f8:	2101      	movs	r1, #1
 80046fa:	fa01 f202 	lsl.w	r2, r1, r2
 80046fe:	4202      	tst	r2, r0
 8004700:	d1d2      	bne.n	80046a8 <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 8004702:	2001      	movs	r0, #1
 8004704:	e052      	b.n	80047ac <HAL_RCC_ClockConfig+0x180>
 8004706:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800470a:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800470e:	4a2d      	ldr	r2, [pc, #180]	; (80047c4 <HAL_RCC_ClockConfig+0x198>)
 8004710:	6810      	ldr	r0, [r2, #0]
 8004712:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004716:	fa92 f2a2 	rbit	r2, r2
 800471a:	fab2 f282 	clz	r2, r2
 800471e:	f002 021f 	and.w	r2, r2, #31
 8004722:	2101      	movs	r1, #1
 8004724:	fa01 f202 	lsl.w	r2, r1, r2
 8004728:	4210      	tst	r0, r2
 800472a:	d1bd      	bne.n	80046a8 <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 800472c:	2001      	movs	r0, #1
 800472e:	e03d      	b.n	80047ac <HAL_RCC_ClockConfig+0x180>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004730:	4b23      	ldr	r3, [pc, #140]	; (80047c0 <HAL_RCC_ClockConfig+0x194>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	42ab      	cmp	r3, r5
 800473a:	d90a      	bls.n	8004752 <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473c:	4a20      	ldr	r2, [pc, #128]	; (80047c0 <HAL_RCC_ClockConfig+0x194>)
 800473e:	6813      	ldr	r3, [r2, #0]
 8004740:	f023 0307 	bic.w	r3, r3, #7
 8004744:	432b      	orrs	r3, r5
 8004746:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004748:	6813      	ldr	r3, [r2, #0]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	42ab      	cmp	r3, r5
 8004750:	d133      	bne.n	80047ba <HAL_RCC_ClockConfig+0x18e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004752:	6823      	ldr	r3, [r4, #0]
 8004754:	f013 0f04 	tst.w	r3, #4
 8004758:	d006      	beq.n	8004768 <HAL_RCC_ClockConfig+0x13c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800475a:	4a1a      	ldr	r2, [pc, #104]	; (80047c4 <HAL_RCC_ClockConfig+0x198>)
 800475c:	6853      	ldr	r3, [r2, #4]
 800475e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004762:	68e1      	ldr	r1, [r4, #12]
 8004764:	430b      	orrs	r3, r1
 8004766:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	f013 0f08 	tst.w	r3, #8
 800476e:	d007      	beq.n	8004780 <HAL_RCC_ClockConfig+0x154>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004770:	4a14      	ldr	r2, [pc, #80]	; (80047c4 <HAL_RCC_ClockConfig+0x198>)
 8004772:	6853      	ldr	r3, [r2, #4]
 8004774:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004778:	6921      	ldr	r1, [r4, #16]
 800477a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800477e:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004780:	f7ff ff24 	bl	80045cc <HAL_RCC_GetSysClockFreq>
 8004784:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <HAL_RCC_ClockConfig+0x198>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800478c:	22f0      	movs	r2, #240	; 0xf0
 800478e:	fa92 f2a2 	rbit	r2, r2
 8004792:	fab2 f282 	clz	r2, r2
 8004796:	40d3      	lsrs	r3, r2
 8004798:	4a0b      	ldr	r2, [pc, #44]	; (80047c8 <HAL_RCC_ClockConfig+0x19c>)
 800479a:	5cd3      	ldrb	r3, [r2, r3]
 800479c:	40d8      	lsrs	r0, r3
 800479e:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <HAL_RCC_ClockConfig+0x1a0>)
 80047a0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80047a2:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <HAL_RCC_ClockConfig+0x1a4>)
 80047a4:	6818      	ldr	r0, [r3, #0]
 80047a6:	f7ff fa39 	bl	8003c1c <HAL_InitTick>
  return HAL_OK;
 80047aa:	2000      	movs	r0, #0
}
 80047ac:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80047ae:	2001      	movs	r0, #1
}
 80047b0:	4770      	bx	lr
      return HAL_ERROR;
 80047b2:	2001      	movs	r0, #1
 80047b4:	e7fa      	b.n	80047ac <HAL_RCC_ClockConfig+0x180>
        return HAL_ERROR;
 80047b6:	2001      	movs	r0, #1
 80047b8:	e7f8      	b.n	80047ac <HAL_RCC_ClockConfig+0x180>
      return HAL_ERROR;
 80047ba:	2001      	movs	r0, #1
 80047bc:	e7f6      	b.n	80047ac <HAL_RCC_ClockConfig+0x180>
 80047be:	bf00      	nop
 80047c0:	40022000 	.word	0x40022000
 80047c4:	40021000 	.word	0x40021000
 80047c8:	0800625c 	.word	0x0800625c
 80047cc:	200000ec 	.word	0x200000ec
 80047d0:	200000e8 	.word	0x200000e8

080047d4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80047d4:	4b01      	ldr	r3, [pc, #4]	; (80047dc <HAL_RCC_GetHCLKFreq+0x8>)
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	200000ec 	.word	0x200000ec

080047e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80047e2:	f7ff fff7 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 80047e6:	4b07      	ldr	r3, [pc, #28]	; (8004804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047ee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80047f2:	fa92 f2a2 	rbit	r2, r2
 80047f6:	fab2 f282 	clz	r2, r2
 80047fa:	40d3      	lsrs	r3, r2
 80047fc:	4a02      	ldr	r2, [pc, #8]	; (8004808 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047fe:	5cd3      	ldrb	r3, [r2, r3]
}    
 8004800:	40d8      	lsrs	r0, r3
 8004802:	bd08      	pop	{r3, pc}
 8004804:	40021000 	.word	0x40021000
 8004808:	0800626c 	.word	0x0800626c

0800480c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800480c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800480e:	f7ff ffe1 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 8004812:	4b07      	ldr	r3, [pc, #28]	; (8004830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800481a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800481e:	fa92 f2a2 	rbit	r2, r2
 8004822:	fab2 f282 	clz	r2, r2
 8004826:	40d3      	lsrs	r3, r2
 8004828:	4a02      	ldr	r2, [pc, #8]	; (8004834 <HAL_RCC_GetPCLK2Freq+0x28>)
 800482a:	5cd3      	ldrb	r3, [r2, r3]
} 
 800482c:	40d8      	lsrs	r0, r3
 800482e:	bd08      	pop	{r3, pc}
 8004830:	40021000 	.word	0x40021000
 8004834:	0800626c 	.word	0x0800626c

08004838 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800483a:	b083      	sub	sp, #12
 800483c:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800483e:	6803      	ldr	r3, [r0, #0]
 8004840:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004844:	d048      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004846:	4b91      	ldr	r3, [pc, #580]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800484e:	f040 80d4 	bne.w	80049fa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004852:	4b8e      	ldr	r3, [pc, #568]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004854:	69da      	ldr	r2, [r3, #28]
 8004856:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800485a:	61da      	str	r2, [r3, #28]
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004862:	9301      	str	r3, [sp, #4]
 8004864:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004866:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004868:	4b89      	ldr	r3, [pc, #548]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004870:	f000 80c5 	beq.w	80049fe <HAL_RCCEx_PeriphCLKConfig+0x1c6>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004874:	4b85      	ldr	r3, [pc, #532]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004876:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004878:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800487c:	d022      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 800487e:	6862      	ldr	r2, [r4, #4]
 8004880:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004884:	429a      	cmp	r2, r3
 8004886:	d01d      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004888:	4880      	ldr	r0, [pc, #512]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800488a:	6a01      	ldr	r1, [r0, #32]
 800488c:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8004890:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004894:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004898:	fab2 f282 	clz	r2, r2
 800489c:	4f7d      	ldr	r7, [pc, #500]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800489e:	443a      	add	r2, r7
 80048a0:	0092      	lsls	r2, r2, #2
 80048a2:	f04f 0c01 	mov.w	ip, #1
 80048a6:	f8c2 c000 	str.w	ip, [r2]
 80048aa:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048ae:	fab3 f383 	clz	r3, r3
 80048b2:	443b      	add	r3, r7
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80048ba:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048bc:	f011 0f01 	tst.w	r1, #1
 80048c0:	f040 80b2 	bne.w	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80048c4:	4a71      	ldr	r2, [pc, #452]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80048c6:	6a13      	ldr	r3, [r2, #32]
 80048c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048cc:	6861      	ldr	r1, [r4, #4]
 80048ce:	430b      	orrs	r3, r1
 80048d0:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048d2:	2d00      	cmp	r5, #0
 80048d4:	f040 80cf 	bne.w	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	f013 0f01 	tst.w	r3, #1
 80048de:	d006      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048e0:	4a6a      	ldr	r2, [pc, #424]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80048e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80048e4:	f023 0303 	bic.w	r3, r3, #3
 80048e8:	68a1      	ldr	r1, [r4, #8]
 80048ea:	430b      	orrs	r3, r1
 80048ec:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048ee:	6823      	ldr	r3, [r4, #0]
 80048f0:	f013 0f02 	tst.w	r3, #2
 80048f4:	d006      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048f6:	4a65      	ldr	r2, [pc, #404]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80048f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80048fa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80048fe:	68e1      	ldr	r1, [r4, #12]
 8004900:	430b      	orrs	r3, r1
 8004902:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	f013 0f04 	tst.w	r3, #4
 800490a:	d006      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800490c:	4a5f      	ldr	r2, [pc, #380]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800490e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004910:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8004914:	6921      	ldr	r1, [r4, #16]
 8004916:	430b      	orrs	r3, r1
 8004918:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	f013 0f20 	tst.w	r3, #32
 8004920:	d006      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004922:	4a5a      	ldr	r2, [pc, #360]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004924:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004926:	f023 0310 	bic.w	r3, r3, #16
 800492a:	69e1      	ldr	r1, [r4, #28]
 800492c:	430b      	orrs	r3, r1
 800492e:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004936:	d006      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004938:	4a54      	ldr	r2, [pc, #336]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800493a:	6853      	ldr	r3, [r2, #4]
 800493c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004940:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004942:	430b      	orrs	r3, r1
 8004944:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	f013 0f40 	tst.w	r3, #64	; 0x40
 800494c:	d006      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800494e:	4a4f      	ldr	r2, [pc, #316]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004950:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004952:	f023 0320 	bic.w	r3, r3, #32
 8004956:	6a21      	ldr	r1, [r4, #32]
 8004958:	430b      	orrs	r3, r1
 800495a:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	f013 0f08 	tst.w	r3, #8
 8004962:	d006      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004964:	4a49      	ldr	r2, [pc, #292]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004966:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004968:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800496c:	6961      	ldr	r1, [r4, #20]
 800496e:	430b      	orrs	r3, r1
 8004970:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	f013 0f10 	tst.w	r3, #16
 8004978:	d006      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800497a:	4a44      	ldr	r2, [pc, #272]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800497c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800497e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004982:	69a1      	ldr	r1, [r4, #24]
 8004984:	430b      	orrs	r3, r1
 8004986:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800498e:	d006      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004990:	4a3e      	ldr	r2, [pc, #248]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004992:	6853      	ldr	r3, [r2, #4]
 8004994:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004998:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800499a:	430b      	orrs	r3, r1
 800499c:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80049a4:	d006      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049a6:	4a39      	ldr	r2, [pc, #228]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80049a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80049aa:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80049ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80049b0:	430b      	orrs	r3, r1
 80049b2:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80049ba:	d006      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80049bc:	4a33      	ldr	r2, [pc, #204]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80049be:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80049c0:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 80049c4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80049c6:	430b      	orrs	r3, r1
 80049c8:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80049ca:	6823      	ldr	r3, [r4, #0]
 80049cc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80049d0:	d006      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80049d2:	4a2e      	ldr	r2, [pc, #184]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80049d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80049d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80049dc:	430b      	orrs	r3, r1
 80049de:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80049e6:	d04d      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80049e8:	4a28      	ldr	r2, [pc, #160]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80049ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80049ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049f2:	430b      	orrs	r3, r1
 80049f4:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80049f6:	2000      	movs	r0, #0
 80049f8:	e045      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  FlagStatus       pwrclkchanged = RESET;
 80049fa:	2500      	movs	r5, #0
 80049fc:	e734      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049fe:	4a24      	ldr	r2, [pc, #144]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a00:	6813      	ldr	r3, [r2, #0]
 8004a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a06:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004a08:	f7ff f94c 	bl	8003ca4 <HAL_GetTick>
 8004a0c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a0e:	4b20      	ldr	r3, [pc, #128]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004a16:	f47f af2d 	bne.w	8004874 <HAL_RCCEx_PeriphCLKConfig+0x3c>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a1a:	f7ff f943 	bl	8003ca4 <HAL_GetTick>
 8004a1e:	1b80      	subs	r0, r0, r6
 8004a20:	2864      	cmp	r0, #100	; 0x64
 8004a22:	d9f4      	bls.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 8004a24:	2003      	movs	r0, #3
 8004a26:	e02e      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x24e>
        tickstart = HAL_GetTick();
 8004a28:	f7ff f93c 	bl	8003ca4 <HAL_GetTick>
 8004a2c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a2e:	e015      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x224>
 8004a30:	4b16      	ldr	r3, [pc, #88]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a32:	6a19      	ldr	r1, [r3, #32]
 8004a34:	2302      	movs	r3, #2
 8004a36:	fa93 f3a3 	rbit	r3, r3
 8004a3a:	fab3 f383 	clz	r3, r3
 8004a3e:	f003 031f 	and.w	r3, r3, #31
 8004a42:	2201      	movs	r2, #1
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	420b      	tst	r3, r1
 8004a4a:	f47f af3b 	bne.w	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4e:	f7ff f929 	bl	8003ca4 <HAL_GetTick>
 8004a52:	1b80      	subs	r0, r0, r6
 8004a54:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a58:	4298      	cmp	r0, r3
 8004a5a:	d811      	bhi.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x248>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	fa93 f2a3 	rbit	r2, r3
 8004a62:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1e2      	bne.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	fa93 f3a3 	rbit	r3, r3
 8004a70:	4b06      	ldr	r3, [pc, #24]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a72:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004a74:	e7de      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a76:	69d3      	ldr	r3, [r2, #28]
 8004a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a7c:	61d3      	str	r3, [r2, #28]
 8004a7e:	e72b      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
            return HAL_TIMEOUT;
 8004a80:	2003      	movs	r0, #3
 8004a82:	e000      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  return HAL_OK;
 8004a84:	2000      	movs	r0, #0
}
 8004a86:	b003      	add	sp, #12
 8004a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40021000 	.word	0x40021000
 8004a90:	40007000 	.word	0x40007000
 8004a94:	10908100 	.word	0x10908100

08004a98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a9c:	b082      	sub	sp, #8
 8004a9e:	4605      	mov	r5, r0
 8004aa0:	4688      	mov	r8, r1
 8004aa2:	4617      	mov	r7, r2
 8004aa4:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004aa6:	f7ff f8fd 	bl	8003ca4 <HAL_GetTick>
 8004aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aac:	1a1b      	subs	r3, r3, r0
 8004aae:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8004ab2:	f7ff f8f7 	bl	8003ca4 <HAL_GetTick>
 8004ab6:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ab8:	4b2b      	ldr	r3, [pc, #172]	; (8004b68 <SPI_WaitFlagStateUntilTimeout+0xd0>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004ac0:	fb09 f303 	mul.w	r3, r9, r3
 8004ac4:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ac6:	682b      	ldr	r3, [r5, #0]
 8004ac8:	689c      	ldr	r4, [r3, #8]
 8004aca:	ea38 0304 	bics.w	r3, r8, r4
 8004ace:	bf0c      	ite	eq
 8004ad0:	f04f 0c01 	moveq.w	ip, #1
 8004ad4:	f04f 0c00 	movne.w	ip, #0
 8004ad8:	45bc      	cmp	ip, r7
 8004ada:	d040      	beq.n	8004b5e <SPI_WaitFlagStateUntilTimeout+0xc6>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004adc:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8004ae0:	d0f1      	beq.n	8004ac6 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ae2:	f7ff f8df 	bl	8003ca4 <HAL_GetTick>
 8004ae6:	eba0 000a 	sub.w	r0, r0, sl
 8004aea:	4548      	cmp	r0, r9
 8004aec:	d20a      	bcs.n	8004b04 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8004aee:	f1b9 0f00 	cmp.w	r9, #0
 8004af2:	d007      	beq.n	8004b04 <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004af4:	9a01      	ldr	r2, [sp, #4]
 8004af6:	b102      	cbz	r2, 8004afa <SPI_WaitFlagStateUntilTimeout+0x62>
 8004af8:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8004afa:	9b01      	ldr	r3, [sp, #4]
 8004afc:	3b01      	subs	r3, #1
 8004afe:	9301      	str	r3, [sp, #4]
 8004b00:	4691      	mov	r9, r2
 8004b02:	e7e0      	b.n	8004ac6 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b04:	682a      	ldr	r2, [r5, #0]
 8004b06:	6853      	ldr	r3, [r2, #4]
 8004b08:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004b0c:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b0e:	686b      	ldr	r3, [r5, #4]
 8004b10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b14:	d00b      	beq.n	8004b2e <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b16:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b1c:	d014      	beq.n	8004b48 <SPI_WaitFlagStateUntilTimeout+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8004b24:	2300      	movs	r3, #0
 8004b26:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8004b2a:	2003      	movs	r0, #3
 8004b2c:	e018      	b.n	8004b60 <SPI_WaitFlagStateUntilTimeout+0xc8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b2e:	68ab      	ldr	r3, [r5, #8]
 8004b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b34:	d002      	beq.n	8004b3c <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b3a:	d1ec      	bne.n	8004b16 <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 8004b3c:	682a      	ldr	r2, [r5, #0]
 8004b3e:	6813      	ldr	r3, [r2, #0]
 8004b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	e7e6      	b.n	8004b16 <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 8004b48:	682a      	ldr	r2, [r5, #0]
 8004b4a:	6813      	ldr	r3, [r2, #0]
 8004b4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	682a      	ldr	r2, [r5, #0]
 8004b54:	6813      	ldr	r3, [r2, #0]
 8004b56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	e7df      	b.n	8004b1e <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 8004b5e:	2000      	movs	r0, #0
}
 8004b60:	b002      	add	sp, #8
 8004b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b66:	bf00      	nop
 8004b68:	200000ec 	.word	0x200000ec

08004b6c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b70:	b082      	sub	sp, #8
 8004b72:	4606      	mov	r6, r0
 8004b74:	460c      	mov	r4, r1
 8004b76:	4615      	mov	r5, r2
 8004b78:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b80:	f7ff f890 	bl	8003ca4 <HAL_GetTick>
 8004b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b86:	1a1b      	subs	r3, r3, r0
 8004b88:	eb03 0807 	add.w	r8, r3, r7
  tmp_tickstart = HAL_GetTick();
 8004b8c:	f7ff f88a 	bl	8003ca4 <HAL_GetTick>
 8004b90:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b92:	f8d6 a000 	ldr.w	sl, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b96:	4b31      	ldr	r3, [pc, #196]	; (8004c5c <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004b9e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004ba2:	0d1b      	lsrs	r3, r3, #20
 8004ba4:	fb08 f303 	mul.w	r3, r8, r3
 8004ba8:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8004baa:	e002      	b.n	8004bb2 <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8004bac:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8004bb0:	d112      	bne.n	8004bd8 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8004bb2:	6833      	ldr	r3, [r6, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	ea03 0c04 	and.w	ip, r3, r4
 8004bba:	45ac      	cmp	ip, r5
 8004bbc:	d04a      	beq.n	8004c54 <SPI_WaitFifoStateUntilTimeout+0xe8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004bbe:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8004bc2:	d1f3      	bne.n	8004bac <SPI_WaitFifoStateUntilTimeout+0x40>
 8004bc4:	2d00      	cmp	r5, #0
 8004bc6:	d1f1      	bne.n	8004bac <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 8004bc8:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8004bd2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004bd6:	e7e9      	b.n	8004bac <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bd8:	f7ff f864 	bl	8003ca4 <HAL_GetTick>
 8004bdc:	eba0 0009 	sub.w	r0, r0, r9
 8004be0:	4540      	cmp	r0, r8
 8004be2:	d20a      	bcs.n	8004bfa <SPI_WaitFifoStateUntilTimeout+0x8e>
 8004be4:	f1b8 0f00 	cmp.w	r8, #0
 8004be8:	d007      	beq.n	8004bfa <SPI_WaitFifoStateUntilTimeout+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bea:	9a01      	ldr	r2, [sp, #4]
 8004bec:	b102      	cbz	r2, 8004bf0 <SPI_WaitFifoStateUntilTimeout+0x84>
 8004bee:	4642      	mov	r2, r8
      {
        tmp_timeout = 0U;
      }
      count--;
 8004bf0:	9b01      	ldr	r3, [sp, #4]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	9301      	str	r3, [sp, #4]
 8004bf6:	4690      	mov	r8, r2
 8004bf8:	e7db      	b.n	8004bb2 <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bfa:	6832      	ldr	r2, [r6, #0]
 8004bfc:	6853      	ldr	r3, [r2, #4]
 8004bfe:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004c02:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c04:	6873      	ldr	r3, [r6, #4]
 8004c06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c0a:	d00b      	beq.n	8004c24 <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c0c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8004c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c12:	d014      	beq.n	8004c3e <SPI_WaitFifoStateUntilTimeout+0xd2>
        hspi->State = HAL_SPI_STATE_READY;
 8004c14:	2301      	movs	r3, #1
 8004c16:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8004c20:	2003      	movs	r0, #3
 8004c22:	e018      	b.n	8004c56 <SPI_WaitFifoStateUntilTimeout+0xea>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c24:	68b3      	ldr	r3, [r6, #8]
 8004c26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c2a:	d002      	beq.n	8004c32 <SPI_WaitFifoStateUntilTimeout+0xc6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c30:	d1ec      	bne.n	8004c0c <SPI_WaitFifoStateUntilTimeout+0xa0>
          __HAL_SPI_DISABLE(hspi);
 8004c32:	6832      	ldr	r2, [r6, #0]
 8004c34:	6813      	ldr	r3, [r2, #0]
 8004c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c3a:	6013      	str	r3, [r2, #0]
 8004c3c:	e7e6      	b.n	8004c0c <SPI_WaitFifoStateUntilTimeout+0xa0>
          SPI_RESET_CRC(hspi);
 8004c3e:	6832      	ldr	r2, [r6, #0]
 8004c40:	6813      	ldr	r3, [r2, #0]
 8004c42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c46:	6013      	str	r3, [r2, #0]
 8004c48:	6832      	ldr	r2, [r6, #0]
 8004c4a:	6813      	ldr	r3, [r2, #0]
 8004c4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	e7df      	b.n	8004c14 <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 8004c54:	2000      	movs	r0, #0
}
 8004c56:	b002      	add	sp, #8
 8004c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c5c:	200000ec 	.word	0x200000ec

08004c60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	4604      	mov	r4, r0
 8004c66:	460d      	mov	r5, r1
 8004c68:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c6a:	9200      	str	r2, [sp, #0]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004c74:	f7ff ff7a 	bl	8004b6c <SPI_WaitFifoStateUntilTimeout>
 8004c78:	b9b0      	cbnz	r0, 8004ca8 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c7a:	9600      	str	r6, [sp, #0]
 8004c7c:	462b      	mov	r3, r5
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2180      	movs	r1, #128	; 0x80
 8004c82:	4620      	mov	r0, r4
 8004c84:	f7ff ff08 	bl	8004a98 <SPI_WaitFlagStateUntilTimeout>
 8004c88:	b9a8      	cbnz	r0, 8004cb6 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c8a:	9600      	str	r6, [sp, #0]
 8004c8c:	462b      	mov	r3, r5
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c94:	4620      	mov	r0, r4
 8004c96:	f7ff ff69 	bl	8004b6c <SPI_WaitFifoStateUntilTimeout>
 8004c9a:	b150      	cbz	r0, 8004cb2 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c9c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004c9e:	f043 0320 	orr.w	r3, r3, #32
 8004ca2:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ca4:	2003      	movs	r0, #3
 8004ca6:	e004      	b.n	8004cb2 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ca8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004caa:	f043 0320 	orr.w	r3, r3, #32
 8004cae:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cb0:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8004cb2:	b002      	add	sp, #8
 8004cb4:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cb6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004cb8:	f043 0320 	orr.w	r3, r3, #32
 8004cbc:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cbe:	2003      	movs	r0, #3
 8004cc0:	e7f7      	b.n	8004cb2 <SPI_EndRxTxTransaction+0x52>

08004cc2 <SPI_EndRxTransaction>:
{
 8004cc2:	b570      	push	{r4, r5, r6, lr}
 8004cc4:	b082      	sub	sp, #8
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	460d      	mov	r5, r1
 8004cca:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ccc:	6843      	ldr	r3, [r0, #4]
 8004cce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cd2:	d00d      	beq.n	8004cf0 <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cd4:	9600      	str	r6, [sp, #0]
 8004cd6:	462b      	mov	r3, r5
 8004cd8:	2200      	movs	r2, #0
 8004cda:	2180      	movs	r1, #128	; 0x80
 8004cdc:	4620      	mov	r0, r4
 8004cde:	f7ff fedb 	bl	8004a98 <SPI_WaitFlagStateUntilTimeout>
 8004ce2:	b990      	cbnz	r0, 8004d0a <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ce4:	6863      	ldr	r3, [r4, #4]
 8004ce6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cea:	d014      	beq.n	8004d16 <SPI_EndRxTransaction+0x54>
}
 8004cec:	b002      	add	sp, #8
 8004cee:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cf0:	6883      	ldr	r3, [r0, #8]
 8004cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf6:	d002      	beq.n	8004cfe <SPI_EndRxTransaction+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cfc:	d1ea      	bne.n	8004cd4 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 8004cfe:	6822      	ldr	r2, [r4, #0]
 8004d00:	6813      	ldr	r3, [r2, #0]
 8004d02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	e7e4      	b.n	8004cd4 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d0a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004d0c:	f043 0320 	orr.w	r3, r3, #32
 8004d10:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d12:	2003      	movs	r0, #3
 8004d14:	e7ea      	b.n	8004cec <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d16:	68a3      	ldr	r3, [r4, #8]
 8004d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d1c:	d002      	beq.n	8004d24 <SPI_EndRxTransaction+0x62>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d22:	d1e3      	bne.n	8004cec <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d24:	9600      	str	r6, [sp, #0]
 8004d26:	462b      	mov	r3, r5
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d2e:	4620      	mov	r0, r4
 8004d30:	f7ff ff1c 	bl	8004b6c <SPI_WaitFifoStateUntilTimeout>
 8004d34:	2800      	cmp	r0, #0
 8004d36:	d0d9      	beq.n	8004cec <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d38:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004d3a:	f043 0320 	orr.w	r3, r3, #32
 8004d3e:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8004d40:	2003      	movs	r0, #3
 8004d42:	e7d3      	b.n	8004cec <SPI_EndRxTransaction+0x2a>

08004d44 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004d44:	2800      	cmp	r0, #0
 8004d46:	d06f      	beq.n	8004e28 <HAL_SPI_Init+0xe4>
{
 8004d48:	b510      	push	{r4, lr}
 8004d4a:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004d4e:	b933      	cbnz	r3, 8004d5e <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d50:	6843      	ldr	r3, [r0, #4]
 8004d52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d56:	d005      	beq.n	8004d64 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	61c3      	str	r3, [r0, #28]
 8004d5c:	e002      	b.n	8004d64 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d62:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d64:	2300      	movs	r3, #0
 8004d66:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d68:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d052      	beq.n	8004e16 <HAL_SPI_Init+0xd2>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004d70:	2302      	movs	r3, #2
 8004d72:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004d76:	6822      	ldr	r2, [r4, #0]
 8004d78:	6813      	ldr	r3, [r2, #0]
 8004d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d7e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d80:	68e3      	ldr	r3, [r4, #12]
 8004d82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d86:	d94c      	bls.n	8004e22 <HAL_SPI_Init+0xde>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d88:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d8a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d8e:	d004      	beq.n	8004d9a <HAL_SPI_Init+0x56>
 8004d90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d94:	d001      	beq.n	8004d9a <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d96:	2300      	movs	r3, #0
 8004d98:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d9a:	6863      	ldr	r3, [r4, #4]
 8004d9c:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004da0:	68a1      	ldr	r1, [r4, #8]
 8004da2:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8004da6:	430b      	orrs	r3, r1
 8004da8:	6921      	ldr	r1, [r4, #16]
 8004daa:	f001 0102 	and.w	r1, r1, #2
 8004dae:	430b      	orrs	r3, r1
 8004db0:	6961      	ldr	r1, [r4, #20]
 8004db2:	f001 0101 	and.w	r1, r1, #1
 8004db6:	430b      	orrs	r3, r1
 8004db8:	69a1      	ldr	r1, [r4, #24]
 8004dba:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8004dbe:	430b      	orrs	r3, r1
 8004dc0:	69e1      	ldr	r1, [r4, #28]
 8004dc2:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8004dc6:	430b      	orrs	r3, r1
 8004dc8:	6a21      	ldr	r1, [r4, #32]
 8004dca:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004dce:	430b      	orrs	r3, r1
 8004dd0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004dd2:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8004dd6:	6820      	ldr	r0, [r4, #0]
 8004dd8:	430b      	orrs	r3, r1
 8004dda:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ddc:	8b63      	ldrh	r3, [r4, #26]
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004de4:	f001 0110 	and.w	r1, r1, #16
 8004de8:	430b      	orrs	r3, r1
 8004dea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dec:	f001 0108 	and.w	r1, r1, #8
 8004df0:	430b      	orrs	r3, r1
 8004df2:	68e1      	ldr	r1, [r4, #12]
 8004df4:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	6821      	ldr	r1, [r4, #0]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e00:	6822      	ldr	r2, [r4, #0]
 8004e02:	69d3      	ldr	r3, [r2, #28]
 8004e04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e08:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8004e14:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004e16:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f7fe feca 	bl	8003bb4 <HAL_SPI_MspInit>
 8004e20:	e7a6      	b.n	8004d70 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e26:	e7b0      	b.n	8004d8a <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8004e28:	2001      	movs	r0, #1
}
 8004e2a:	4770      	bx	lr

08004e2c <HAL_SPI_Transmit>:
{
 8004e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e30:	b083      	sub	sp, #12
 8004e32:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8004e34:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	f000 80f4 	beq.w	8005026 <HAL_SPI_Transmit+0x1fa>
 8004e3e:	4604      	mov	r4, r0
 8004e40:	4688      	mov	r8, r1
 8004e42:	4691      	mov	r9, r2
 8004e44:	2301      	movs	r3, #1
 8004e46:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004e4a:	f7fe ff2b 	bl	8003ca4 <HAL_GetTick>
 8004e4e:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004e50:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8004e54:	b2f6      	uxtb	r6, r6
 8004e56:	2e01      	cmp	r6, #1
 8004e58:	f040 80dd 	bne.w	8005016 <HAL_SPI_Transmit+0x1ea>
  if ((pData == NULL) || (Size == 0U))
 8004e5c:	f1b8 0f00 	cmp.w	r8, #0
 8004e60:	f000 80da 	beq.w	8005018 <HAL_SPI_Transmit+0x1ec>
 8004e64:	f1b9 0f00 	cmp.w	r9, #0
 8004e68:	f000 80d6 	beq.w	8005018 <HAL_SPI_Transmit+0x1ec>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e72:	2300      	movs	r3, #0
 8004e74:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e76:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004e7a:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004e7e:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e82:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004e84:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004e88:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004e8c:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004e8e:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e90:	68a3      	ldr	r3, [r4, #8]
 8004e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e96:	d01e      	beq.n	8004ed6 <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004ea0:	d103      	bne.n	8004eaa <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ea8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004eaa:	68e3      	ldr	r3, [r4, #12]
 8004eac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004eb0:	d944      	bls.n	8004f3c <HAL_SPI_Transmit+0x110>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eb2:	6863      	ldr	r3, [r4, #4]
 8004eb4:	b113      	cbz	r3, 8004ebc <HAL_SPI_Transmit+0x90>
 8004eb6:	f1b9 0f01 	cmp.w	r9, #1
 8004eba:	d120      	bne.n	8004efe <HAL_SPI_Transmit+0xd2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ebc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	8812      	ldrh	r2, [r2, #0]
 8004ec2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ec4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ec6:	3302      	adds	r3, #2
 8004ec8:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8004eca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004ed4:	e013      	b.n	8004efe <HAL_SPI_Transmit+0xd2>
    __HAL_SPI_DISABLE(hspi);
 8004ed6:	6822      	ldr	r2, [r4, #0]
 8004ed8:	6813      	ldr	r3, [r2, #0]
 8004eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ede:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8004ee0:	6822      	ldr	r2, [r4, #0]
 8004ee2:	6813      	ldr	r3, [r2, #0]
 8004ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	e7d5      	b.n	8004e98 <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eec:	f7fe feda 	bl	8003ca4 <HAL_GetTick>
 8004ef0:	1bc0      	subs	r0, r0, r7
 8004ef2:	42a8      	cmp	r0, r5
 8004ef4:	d302      	bcc.n	8004efc <HAL_SPI_Transmit+0xd0>
 8004ef6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004efa:	d11a      	bne.n	8004f32 <HAL_SPI_Transmit+0x106>
 8004efc:	b1cd      	cbz	r5, 8004f32 <HAL_SPI_Transmit+0x106>
    while (hspi->TxXferCount > 0U)
 8004efe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d06f      	beq.n	8004fe6 <HAL_SPI_Transmit+0x1ba>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	f012 0f02 	tst.w	r2, #2
 8004f0e:	d0ed      	beq.n	8004eec <HAL_SPI_Transmit+0xc0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f10:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004f12:	8812      	ldrh	r2, [r2, #0]
 8004f14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f18:	3302      	adds	r3, #2
 8004f1a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004f1c:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8004f20:	fa1f fc8c 	uxth.w	ip, ip
 8004f24:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8004f28:	fa1f fc8c 	uxth.w	ip, ip
 8004f2c:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 8004f30:	e7e5      	b.n	8004efe <HAL_SPI_Transmit+0xd2>
          hspi->State = HAL_SPI_STATE_READY;
 8004f32:	2301      	movs	r3, #1
 8004f34:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          errorcode = HAL_TIMEOUT;
 8004f38:	2603      	movs	r6, #3
          goto error;
 8004f3a:	e06d      	b.n	8005018 <HAL_SPI_Transmit+0x1ec>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f3c:	6863      	ldr	r3, [r4, #4]
 8004f3e:	b113      	cbz	r3, 8004f46 <HAL_SPI_Transmit+0x11a>
 8004f40:	f1b9 0f01 	cmp.w	r9, #1
 8004f44:	d132      	bne.n	8004fac <HAL_SPI_Transmit+0x180>
      if (hspi->TxXferCount > 1U)
 8004f46:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d90c      	bls.n	8004f68 <HAL_SPI_Transmit+0x13c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f4e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	8812      	ldrh	r2, [r2, #0]
 8004f54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f58:	3302      	adds	r3, #2
 8004f5a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004f5c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b02      	subs	r3, #2
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004f66:	e021      	b.n	8004fac <HAL_SPI_Transmit+0x180>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	7812      	ldrb	r2, [r2, #0]
 8004f6e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8004f70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f72:	3301      	adds	r3, #1
 8004f74:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004f76:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004f80:	e014      	b.n	8004fac <HAL_SPI_Transmit+0x180>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8004f88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8004f8e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004f98:	e008      	b.n	8004fac <HAL_SPI_Transmit+0x180>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f9a:	f7fe fe83 	bl	8003ca4 <HAL_GetTick>
 8004f9e:	1bc0      	subs	r0, r0, r7
 8004fa0:	42a8      	cmp	r0, r5
 8004fa2:	d302      	bcc.n	8004faa <HAL_SPI_Transmit+0x17e>
 8004fa4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004fa8:	d118      	bne.n	8004fdc <HAL_SPI_Transmit+0x1b0>
 8004faa:	b1bd      	cbz	r5, 8004fdc <HAL_SPI_Transmit+0x1b0>
    while (hspi->TxXferCount > 0U)
 8004fac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	b1cb      	cbz	r3, 8004fe6 <HAL_SPI_Transmit+0x1ba>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fb2:	6822      	ldr	r2, [r4, #0]
 8004fb4:	6893      	ldr	r3, [r2, #8]
 8004fb6:	f013 0f02 	tst.w	r3, #2
 8004fba:	d0ee      	beq.n	8004f9a <HAL_SPI_Transmit+0x16e>
        if (hspi->TxXferCount > 1U)
 8004fbc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d9de      	bls.n	8004f82 <HAL_SPI_Transmit+0x156>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fcc:	3302      	adds	r3, #2
 8004fce:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004fd0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	3b02      	subs	r3, #2
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004fda:	e7e7      	b.n	8004fac <HAL_SPI_Transmit+0x180>
          hspi->State = HAL_SPI_STATE_READY;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          errorcode = HAL_TIMEOUT;
 8004fe2:	2603      	movs	r6, #3
          goto error;
 8004fe4:	e018      	b.n	8005018 <HAL_SPI_Transmit+0x1ec>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fe6:	463a      	mov	r2, r7
 8004fe8:	4629      	mov	r1, r5
 8004fea:	4620      	mov	r0, r4
 8004fec:	f7ff fe38 	bl	8004c60 <SPI_EndRxTxTransaction>
 8004ff0:	b108      	cbz	r0, 8004ff6 <HAL_SPI_Transmit+0x1ca>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ff2:	2320      	movs	r3, #32
 8004ff4:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ff6:	68a3      	ldr	r3, [r4, #8]
 8004ff8:	b933      	cbnz	r3, 8005008 <HAL_SPI_Transmit+0x1dc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ffa:	9301      	str	r3, [sp, #4]
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	9201      	str	r2, [sp, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	9301      	str	r3, [sp, #4]
 8005006:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005008:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800500a:	b92b      	cbnz	r3, 8005018 <HAL_SPI_Transmit+0x1ec>
    hspi->State = HAL_SPI_STATE_READY;
 800500c:	2301      	movs	r3, #1
 800500e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005012:	2600      	movs	r6, #0
 8005014:	e000      	b.n	8005018 <HAL_SPI_Transmit+0x1ec>
    errorcode = HAL_BUSY;
 8005016:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 8005018:	2300      	movs	r3, #0
 800501a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800501e:	4630      	mov	r0, r6
 8005020:	b003      	add	sp, #12
 8005022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8005026:	2602      	movs	r6, #2
 8005028:	e7f9      	b.n	800501e <HAL_SPI_Transmit+0x1f2>

0800502a <HAL_SPI_TransmitReceive>:
{
 800502a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800502e:	461f      	mov	r7, r3
 8005030:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8005032:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8005036:	2b01      	cmp	r3, #1
 8005038:	f000 816b 	beq.w	8005312 <HAL_SPI_TransmitReceive+0x2e8>
 800503c:	4604      	mov	r4, r0
 800503e:	4688      	mov	r8, r1
 8005040:	4691      	mov	r9, r2
 8005042:	2301      	movs	r3, #1
 8005044:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8005048:	f7fe fe2c 	bl	8003ca4 <HAL_GetTick>
 800504c:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 800504e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8005052:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8005054:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005056:	2b01      	cmp	r3, #1
 8005058:	d00a      	beq.n	8005070 <HAL_SPI_TransmitReceive+0x46>
 800505a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800505e:	f040 8146 	bne.w	80052ee <HAL_SPI_TransmitReceive+0x2c4>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005062:	68a2      	ldr	r2, [r4, #8]
 8005064:	2a00      	cmp	r2, #0
 8005066:	f040 8148 	bne.w	80052fa <HAL_SPI_TransmitReceive+0x2d0>
 800506a:	2b04      	cmp	r3, #4
 800506c:	f040 8147 	bne.w	80052fe <HAL_SPI_TransmitReceive+0x2d4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005070:	f1b8 0f00 	cmp.w	r8, #0
 8005074:	f000 8145 	beq.w	8005302 <HAL_SPI_TransmitReceive+0x2d8>
 8005078:	f1b9 0f00 	cmp.w	r9, #0
 800507c:	f000 8143 	beq.w	8005306 <HAL_SPI_TransmitReceive+0x2dc>
 8005080:	2f00      	cmp	r7, #0
 8005082:	f000 8142 	beq.w	800530a <HAL_SPI_TransmitReceive+0x2e0>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005086:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b04      	cmp	r3, #4
 800508e:	d002      	beq.n	8005096 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005090:	2305      	movs	r3, #5
 8005092:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005096:	2300      	movs	r3, #0
 8005098:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800509a:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800509e:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80050a2:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80050a6:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80050aa:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80050ac:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 80050ae:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80050b0:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80050b2:	68e3      	ldr	r3, [r4, #12]
 80050b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050b8:	d801      	bhi.n	80050be <HAL_SPI_TransmitReceive+0x94>
 80050ba:	2f01      	cmp	r7, #1
 80050bc:	d923      	bls.n	8005106 <HAL_SPI_TransmitReceive+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050be:	6822      	ldr	r2, [r4, #0]
 80050c0:	6853      	ldr	r3, [r2, #4]
 80050c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050c6:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80050d0:	d103      	bne.n	80050da <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050d8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050da:	68e3      	ldr	r3, [r4, #12]
 80050dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050e0:	d95c      	bls.n	800519c <HAL_SPI_TransmitReceive+0x172>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050e2:	6863      	ldr	r3, [r4, #4]
 80050e4:	b10b      	cbz	r3, 80050ea <HAL_SPI_TransmitReceive+0xc0>
 80050e6:	2f01      	cmp	r7, #1
 80050e8:	d10b      	bne.n	8005102 <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	8812      	ldrh	r2, [r2, #0]
 80050f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050f4:	3302      	adds	r3, #2
 80050f6:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80050f8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	3b01      	subs	r3, #1
 80050fe:	b29b      	uxth	r3, r3
 8005100:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005102:	2701      	movs	r7, #1
 8005104:	e030      	b.n	8005168 <HAL_SPI_TransmitReceive+0x13e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005106:	6822      	ldr	r2, [r4, #0]
 8005108:	6853      	ldr	r3, [r2, #4]
 800510a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800510e:	6053      	str	r3, [r2, #4]
 8005110:	e7da      	b.n	80050c8 <HAL_SPI_TransmitReceive+0x9e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005112:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005114:	8812      	ldrh	r2, [r2, #0]
 8005116:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005118:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800511a:	3302      	adds	r3, #2
 800511c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800511e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005120:	b29b      	uxth	r3, r3
 8005122:	3b01      	subs	r3, #1
 8005124:	b29b      	uxth	r3, r3
 8005126:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005128:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	f012 0f01 	tst.w	r2, #1
 8005132:	d011      	beq.n	8005158 <HAL_SPI_TransmitReceive+0x12e>
 8005134:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005138:	b292      	uxth	r2, r2
 800513a:	b16a      	cbz	r2, 8005158 <HAL_SPI_TransmitReceive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005140:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005142:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005144:	3302      	adds	r3, #2
 8005146:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8005148:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800514c:	b29b      	uxth	r3, r3
 800514e:	3b01      	subs	r3, #1
 8005150:	b29b      	uxth	r3, r3
 8005152:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8005156:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005158:	f7fe fda4 	bl	8003ca4 <HAL_GetTick>
 800515c:	1b83      	subs	r3, r0, r6
 800515e:	42ab      	cmp	r3, r5
 8005160:	d302      	bcc.n	8005168 <HAL_SPI_TransmitReceive+0x13e>
 8005162:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005166:	d114      	bne.n	8005192 <HAL_SPI_TransmitReceive+0x168>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005168:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800516a:	b29b      	uxth	r3, r3
 800516c:	b92b      	cbnz	r3, 800517a <HAL_SPI_TransmitReceive+0x150>
 800516e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005172:	b29b      	uxth	r3, r3
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 80ab 	beq.w	80052d0 <HAL_SPI_TransmitReceive+0x2a6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	f012 0f02 	tst.w	r2, #2
 8005182:	d0d2      	beq.n	800512a <HAL_SPI_TransmitReceive+0x100>
 8005184:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005186:	b292      	uxth	r2, r2
 8005188:	2a00      	cmp	r2, #0
 800518a:	d0ce      	beq.n	800512a <HAL_SPI_TransmitReceive+0x100>
 800518c:	2f00      	cmp	r7, #0
 800518e:	d0cc      	beq.n	800512a <HAL_SPI_TransmitReceive+0x100>
 8005190:	e7bf      	b.n	8005112 <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 8005192:	2301      	movs	r3, #1
 8005194:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        errorcode = HAL_TIMEOUT;
 8005198:	2003      	movs	r0, #3
        goto error;
 800519a:	e0a9      	b.n	80052f0 <HAL_SPI_TransmitReceive+0x2c6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800519c:	6863      	ldr	r3, [r4, #4]
 800519e:	b10b      	cbz	r3, 80051a4 <HAL_SPI_TransmitReceive+0x17a>
 80051a0:	2f01      	cmp	r7, #1
 80051a2:	d10f      	bne.n	80051c4 <HAL_SPI_TransmitReceive+0x19a>
      if (hspi->TxXferCount > 1U)
 80051a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d90d      	bls.n	80051c8 <HAL_SPI_TransmitReceive+0x19e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80051ae:	6823      	ldr	r3, [r4, #0]
 80051b0:	8812      	ldrh	r2, [r2, #0]
 80051b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051b6:	3302      	adds	r3, #2
 80051b8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80051ba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051bc:	b29b      	uxth	r3, r3
 80051be:	3b02      	subs	r3, #2
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80051c4:	2701      	movs	r7, #1
 80051c6:	e049      	b.n	800525c <HAL_SPI_TransmitReceive+0x232>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80051ca:	6823      	ldr	r3, [r4, #0]
 80051cc:	7812      	ldrb	r2, [r2, #0]
 80051ce:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80051d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051d2:	3301      	adds	r3, #1
 80051d4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80051d6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051d8:	b29b      	uxth	r3, r3
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29b      	uxth	r3, r3
 80051de:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80051e0:	e7f0      	b.n	80051c4 <HAL_SPI_TransmitReceive+0x19a>
        if (hspi->TxXferCount > 1U)
 80051e2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80051e4:	b292      	uxth	r2, r2
 80051e6:	2a01      	cmp	r2, #1
 80051e8:	d90c      	bls.n	8005204 <HAL_SPI_TransmitReceive+0x1da>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80051ec:	8812      	ldrh	r2, [r2, #0]
 80051ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80051f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051f2:	3302      	adds	r3, #2
 80051f4:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80051f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b02      	subs	r3, #2
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005200:	2700      	movs	r7, #0
 8005202:	e03d      	b.n	8005280 <HAL_SPI_TransmitReceive+0x256>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005204:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005206:	7812      	ldrb	r2, [r2, #0]
 8005208:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 800520a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800520c:	3301      	adds	r3, #1
 800520e:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005210:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	b29b      	uxth	r3, r3
 8005218:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800521a:	2700      	movs	r7, #0
 800521c:	e030      	b.n	8005280 <HAL_SPI_TransmitReceive+0x256>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800521e:	6822      	ldr	r2, [r4, #0]
 8005220:	6853      	ldr	r3, [r2, #4]
 8005222:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005226:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8005228:	2701      	movs	r7, #1
 800522a:	e00d      	b.n	8005248 <HAL_SPI_TransmitReceive+0x21e>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800522c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800522e:	7b1b      	ldrb	r3, [r3, #12]
 8005230:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8005232:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005234:	3301      	adds	r3, #1
 8005236:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8005238:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800523c:	b29b      	uxth	r3, r3
 800523e:	3b01      	subs	r3, #1
 8005240:	b29b      	uxth	r3, r3
 8005242:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8005246:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005248:	f7fe fd2c 	bl	8003ca4 <HAL_GetTick>
 800524c:	1b80      	subs	r0, r0, r6
 800524e:	42a8      	cmp	r0, r5
 8005250:	d302      	bcc.n	8005258 <HAL_SPI_TransmitReceive+0x22e>
 8005252:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005256:	d136      	bne.n	80052c6 <HAL_SPI_TransmitReceive+0x29c>
 8005258:	2d00      	cmp	r5, #0
 800525a:	d034      	beq.n	80052c6 <HAL_SPI_TransmitReceive+0x29c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800525c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800525e:	b29b      	uxth	r3, r3
 8005260:	b923      	cbnz	r3, 800526c <HAL_SPI_TransmitReceive+0x242>
 8005262:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005266:	b29b      	uxth	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	d031      	beq.n	80052d0 <HAL_SPI_TransmitReceive+0x2a6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	f012 0f02 	tst.w	r2, #2
 8005274:	d004      	beq.n	8005280 <HAL_SPI_TransmitReceive+0x256>
 8005276:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005278:	b292      	uxth	r2, r2
 800527a:	b10a      	cbz	r2, 8005280 <HAL_SPI_TransmitReceive+0x256>
 800527c:	2f00      	cmp	r7, #0
 800527e:	d1b0      	bne.n	80051e2 <HAL_SPI_TransmitReceive+0x1b8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	f012 0f01 	tst.w	r2, #1
 8005288:	d0de      	beq.n	8005248 <HAL_SPI_TransmitReceive+0x21e>
 800528a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800528e:	b292      	uxth	r2, r2
 8005290:	2a00      	cmp	r2, #0
 8005292:	d0d9      	beq.n	8005248 <HAL_SPI_TransmitReceive+0x21e>
        if (hspi->RxXferCount > 1U)
 8005294:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005298:	b292      	uxth	r2, r2
 800529a:	2a01      	cmp	r2, #1
 800529c:	d9c6      	bls.n	800522c <HAL_SPI_TransmitReceive+0x202>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052a2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80052a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052a6:	3302      	adds	r3, #2
 80052a8:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80052aa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b02      	subs	r3, #2
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80052b8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d9ad      	bls.n	800521e <HAL_SPI_TransmitReceive+0x1f4>
        txallowed = 1U;
 80052c2:	2701      	movs	r7, #1
 80052c4:	e7c0      	b.n	8005248 <HAL_SPI_TransmitReceive+0x21e>
        hspi->State = HAL_SPI_STATE_READY;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        errorcode = HAL_TIMEOUT;
 80052cc:	2003      	movs	r0, #3
        goto error;
 80052ce:	e00f      	b.n	80052f0 <HAL_SPI_TransmitReceive+0x2c6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052d0:	4632      	mov	r2, r6
 80052d2:	4629      	mov	r1, r5
 80052d4:	4620      	mov	r0, r4
 80052d6:	f7ff fcc3 	bl	8004c60 <SPI_EndRxTxTransaction>
 80052da:	b110      	cbz	r0, 80052e2 <HAL_SPI_TransmitReceive+0x2b8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052dc:	2320      	movs	r3, #32
 80052de:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80052e0:	2001      	movs	r0, #1
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052e2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80052e4:	b99b      	cbnz	r3, 800530e <HAL_SPI_TransmitReceive+0x2e4>
    hspi->State = HAL_SPI_STATE_READY;
 80052e6:	2301      	movs	r3, #1
 80052e8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 80052ec:	e000      	b.n	80052f0 <HAL_SPI_TransmitReceive+0x2c6>
    errorcode = HAL_BUSY;
 80052ee:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 80052f0:	2300      	movs	r3, #0
 80052f2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80052f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 80052fa:	2002      	movs	r0, #2
 80052fc:	e7f8      	b.n	80052f0 <HAL_SPI_TransmitReceive+0x2c6>
 80052fe:	2002      	movs	r0, #2
 8005300:	e7f6      	b.n	80052f0 <HAL_SPI_TransmitReceive+0x2c6>
    errorcode = HAL_ERROR;
 8005302:	2001      	movs	r0, #1
 8005304:	e7f4      	b.n	80052f0 <HAL_SPI_TransmitReceive+0x2c6>
 8005306:	2001      	movs	r0, #1
 8005308:	e7f2      	b.n	80052f0 <HAL_SPI_TransmitReceive+0x2c6>
 800530a:	2001      	movs	r0, #1
 800530c:	e7f0      	b.n	80052f0 <HAL_SPI_TransmitReceive+0x2c6>
    errorcode = HAL_ERROR;
 800530e:	2001      	movs	r0, #1
 8005310:	e7ee      	b.n	80052f0 <HAL_SPI_TransmitReceive+0x2c6>
  __HAL_LOCK(hspi);
 8005312:	2002      	movs	r0, #2
 8005314:	e7ef      	b.n	80052f6 <HAL_SPI_TransmitReceive+0x2cc>

08005316 <HAL_SPI_Receive>:
{
 8005316:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800531a:	b083      	sub	sp, #12
 800531c:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800531e:	f890 605d 	ldrb.w	r6, [r0, #93]	; 0x5d
 8005322:	b2f6      	uxtb	r6, r6
 8005324:	2e01      	cmp	r6, #1
 8005326:	f040 80c0 	bne.w	80054aa <HAL_SPI_Receive+0x194>
 800532a:	4688      	mov	r8, r1
 800532c:	4691      	mov	r9, r2
 800532e:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005330:	6843      	ldr	r3, [r0, #4]
 8005332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005336:	d03d      	beq.n	80053b4 <HAL_SPI_Receive+0x9e>
  __HAL_LOCK(hspi);
 8005338:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800533c:	2b01      	cmp	r3, #1
 800533e:	f000 80bc 	beq.w	80054ba <HAL_SPI_Receive+0x1a4>
 8005342:	2301      	movs	r3, #1
 8005344:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8005348:	f7fe fcac 	bl	8003ca4 <HAL_GetTick>
 800534c:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 800534e:	f1b8 0f00 	cmp.w	r8, #0
 8005352:	f000 80ab 	beq.w	80054ac <HAL_SPI_Receive+0x196>
 8005356:	f1b9 0f00 	cmp.w	r9, #0
 800535a:	f000 80a7 	beq.w	80054ac <HAL_SPI_Receive+0x196>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800535e:	2304      	movs	r3, #4
 8005360:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005364:	2300      	movs	r3, #0
 8005366:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005368:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800536c:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005370:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005374:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005376:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005378:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800537a:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800537c:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800537e:	68e3      	ldr	r3, [r4, #12]
 8005380:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005384:	d923      	bls.n	80053ce <HAL_SPI_Receive+0xb8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005386:	6822      	ldr	r2, [r4, #0]
 8005388:	6853      	ldr	r3, [r2, #4]
 800538a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800538e:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005390:	68a3      	ldr	r3, [r4, #8]
 8005392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005396:	d020      	beq.n	80053da <HAL_SPI_Receive+0xc4>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005398:	6823      	ldr	r3, [r4, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	f012 0f40 	tst.w	r2, #64	; 0x40
 80053a0:	d103      	bne.n	80053aa <HAL_SPI_Receive+0x94>
    __HAL_SPI_ENABLE(hspi);
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053a8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80053aa:	68e3      	ldr	r3, [r4, #12]
 80053ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053b0:	d927      	bls.n	8005402 <HAL_SPI_Receive+0xec>
 80053b2:	e04c      	b.n	800544e <HAL_SPI_Receive+0x138>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80053b4:	6883      	ldr	r3, [r0, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1be      	bne.n	8005338 <HAL_SPI_Receive+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80053ba:	2304      	movs	r3, #4
 80053bc:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80053c0:	9500      	str	r5, [sp, #0]
 80053c2:	4613      	mov	r3, r2
 80053c4:	460a      	mov	r2, r1
 80053c6:	f7ff fe30 	bl	800502a <HAL_SPI_TransmitReceive>
 80053ca:	4606      	mov	r6, r0
 80053cc:	e071      	b.n	80054b2 <HAL_SPI_Receive+0x19c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053ce:	6822      	ldr	r2, [r4, #0]
 80053d0:	6853      	ldr	r3, [r2, #4]
 80053d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053d6:	6053      	str	r3, [r2, #4]
 80053d8:	e7da      	b.n	8005390 <HAL_SPI_Receive+0x7a>
    __HAL_SPI_DISABLE(hspi);
 80053da:	6822      	ldr	r2, [r4, #0]
 80053dc:	6813      	ldr	r3, [r2, #0]
 80053de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e2:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 80053e4:	6822      	ldr	r2, [r4, #0]
 80053e6:	6813      	ldr	r3, [r2, #0]
 80053e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	e7d3      	b.n	8005398 <HAL_SPI_Receive+0x82>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053f0:	f7fe fc58 	bl	8003ca4 <HAL_GetTick>
 80053f4:	1bc0      	subs	r0, r0, r7
 80053f6:	42a8      	cmp	r0, r5
 80053f8:	d302      	bcc.n	8005400 <HAL_SPI_Receive+0xea>
 80053fa:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80053fe:	d118      	bne.n	8005432 <HAL_SPI_Receive+0x11c>
 8005400:	b1bd      	cbz	r5, 8005432 <HAL_SPI_Receive+0x11c>
    while (hspi->RxXferCount > 0U)
 8005402:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d03f      	beq.n	800548c <HAL_SPI_Receive+0x176>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	f012 0f01 	tst.w	r2, #1
 8005414:	d0ec      	beq.n	80053f0 <HAL_SPI_Receive+0xda>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005416:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005418:	7b1b      	ldrb	r3, [r3, #12]
 800541a:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800541c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800541e:	3301      	adds	r3, #1
 8005420:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8005422:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005426:	b29b      	uxth	r3, r3
 8005428:	3b01      	subs	r3, #1
 800542a:	b29b      	uxth	r3, r3
 800542c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8005430:	e7e7      	b.n	8005402 <HAL_SPI_Receive+0xec>
          hspi->State = HAL_SPI_STATE_READY;
 8005432:	2301      	movs	r3, #1
 8005434:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          errorcode = HAL_TIMEOUT;
 8005438:	2603      	movs	r6, #3
          goto error;
 800543a:	e037      	b.n	80054ac <HAL_SPI_Receive+0x196>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800543c:	f7fe fc32 	bl	8003ca4 <HAL_GetTick>
 8005440:	1bc0      	subs	r0, r0, r7
 8005442:	42a8      	cmp	r0, r5
 8005444:	d302      	bcc.n	800544c <HAL_SPI_Receive+0x136>
 8005446:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800544a:	d11a      	bne.n	8005482 <HAL_SPI_Receive+0x16c>
 800544c:	b1cd      	cbz	r5, 8005482 <HAL_SPI_Receive+0x16c>
    while (hspi->RxXferCount > 0U)
 800544e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005452:	b29b      	uxth	r3, r3
 8005454:	b1d3      	cbz	r3, 800548c <HAL_SPI_Receive+0x176>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	689a      	ldr	r2, [r3, #8]
 800545a:	f012 0f01 	tst.w	r2, #1
 800545e:	d0ed      	beq.n	800543c <HAL_SPI_Receive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005464:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005466:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005468:	3302      	adds	r3, #2
 800546a:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800546c:	f8b4 c046 	ldrh.w	ip, [r4, #70]	; 0x46
 8005470:	fa1f fc8c 	uxth.w	ip, ip
 8005474:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8005478:	fa1f fc8c 	uxth.w	ip, ip
 800547c:	f8a4 c046 	strh.w	ip, [r4, #70]	; 0x46
 8005480:	e7e5      	b.n	800544e <HAL_SPI_Receive+0x138>
          hspi->State = HAL_SPI_STATE_READY;
 8005482:	2301      	movs	r3, #1
 8005484:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          errorcode = HAL_TIMEOUT;
 8005488:	2603      	movs	r6, #3
          goto error;
 800548a:	e00f      	b.n	80054ac <HAL_SPI_Receive+0x196>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800548c:	463a      	mov	r2, r7
 800548e:	4629      	mov	r1, r5
 8005490:	4620      	mov	r0, r4
 8005492:	f7ff fc16 	bl	8004cc2 <SPI_EndRxTransaction>
 8005496:	b108      	cbz	r0, 800549c <HAL_SPI_Receive+0x186>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005498:	2320      	movs	r3, #32
 800549a:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800549c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800549e:	b92b      	cbnz	r3, 80054ac <HAL_SPI_Receive+0x196>
    hspi->State = HAL_SPI_STATE_READY;
 80054a0:	2301      	movs	r3, #1
 80054a2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054a6:	2600      	movs	r6, #0
 80054a8:	e000      	b.n	80054ac <HAL_SPI_Receive+0x196>
    errorcode = HAL_BUSY;
 80054aa:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 80054ac:	2300      	movs	r3, #0
 80054ae:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80054b2:	4630      	mov	r0, r6
 80054b4:	b003      	add	sp, #12
 80054b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 80054ba:	2602      	movs	r6, #2
 80054bc:	e7f9      	b.n	80054b2 <HAL_SPI_Receive+0x19c>

080054be <HAL_SPI_GetState>:
  return hspi->State;
 80054be:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 80054c2:	4770      	bx	lr

080054c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054c4:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054c6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054c8:	6a04      	ldr	r4, [r0, #32]
 80054ca:	f024 0401 	bic.w	r4, r4, #1
 80054ce:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054d0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054d2:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054d6:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054da:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80054de:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054e0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80054e2:	6203      	str	r3, [r0, #32]
}
 80054e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ea:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054ec:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ee:	6a04      	ldr	r4, [r0, #32]
 80054f0:	f024 0410 	bic.w	r4, r4, #16
 80054f4:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054f6:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054f8:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054fc:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005500:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005504:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005508:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800550a:	6203      	str	r3, [r0, #32]
}
 800550c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005510:	4770      	bx	lr

08005512 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005512:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005518:	430b      	orrs	r3, r1
 800551a:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800551e:	6083      	str	r3, [r0, #8]
}
 8005520:	4770      	bx	lr
	...

08005524 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8005524:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005526:	4a30      	ldr	r2, [pc, #192]	; (80055e8 <TIM_Base_SetConfig+0xc4>)
 8005528:	4290      	cmp	r0, r2
 800552a:	d00e      	beq.n	800554a <TIM_Base_SetConfig+0x26>
 800552c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005530:	d00b      	beq.n	800554a <TIM_Base_SetConfig+0x26>
 8005532:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005536:	4290      	cmp	r0, r2
 8005538:	d007      	beq.n	800554a <TIM_Base_SetConfig+0x26>
 800553a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800553e:	4290      	cmp	r0, r2
 8005540:	d003      	beq.n	800554a <TIM_Base_SetConfig+0x26>
 8005542:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8005546:	4290      	cmp	r0, r2
 8005548:	d103      	bne.n	8005552 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800554a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800554e:	684a      	ldr	r2, [r1, #4]
 8005550:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005552:	4a25      	ldr	r2, [pc, #148]	; (80055e8 <TIM_Base_SetConfig+0xc4>)
 8005554:	4290      	cmp	r0, r2
 8005556:	d01a      	beq.n	800558e <TIM_Base_SetConfig+0x6a>
 8005558:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800555c:	d017      	beq.n	800558e <TIM_Base_SetConfig+0x6a>
 800555e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005562:	4290      	cmp	r0, r2
 8005564:	d013      	beq.n	800558e <TIM_Base_SetConfig+0x6a>
 8005566:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800556a:	4290      	cmp	r0, r2
 800556c:	d00f      	beq.n	800558e <TIM_Base_SetConfig+0x6a>
 800556e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8005572:	4290      	cmp	r0, r2
 8005574:	d00b      	beq.n	800558e <TIM_Base_SetConfig+0x6a>
 8005576:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800557a:	4290      	cmp	r0, r2
 800557c:	d007      	beq.n	800558e <TIM_Base_SetConfig+0x6a>
 800557e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005582:	4290      	cmp	r0, r2
 8005584:	d003      	beq.n	800558e <TIM_Base_SetConfig+0x6a>
 8005586:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800558a:	4290      	cmp	r0, r2
 800558c:	d103      	bne.n	8005596 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 800558e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005592:	68ca      	ldr	r2, [r1, #12]
 8005594:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800559a:	694a      	ldr	r2, [r1, #20]
 800559c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800559e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055a0:	688b      	ldr	r3, [r1, #8]
 80055a2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80055a4:	680b      	ldr	r3, [r1, #0]
 80055a6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055a8:	4b0f      	ldr	r3, [pc, #60]	; (80055e8 <TIM_Base_SetConfig+0xc4>)
 80055aa:	4298      	cmp	r0, r3
 80055ac:	d00f      	beq.n	80055ce <TIM_Base_SetConfig+0xaa>
 80055ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b2:	4298      	cmp	r0, r3
 80055b4:	d00b      	beq.n	80055ce <TIM_Base_SetConfig+0xaa>
 80055b6:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80055ba:	4298      	cmp	r0, r3
 80055bc:	d007      	beq.n	80055ce <TIM_Base_SetConfig+0xaa>
 80055be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055c2:	4298      	cmp	r0, r3
 80055c4:	d003      	beq.n	80055ce <TIM_Base_SetConfig+0xaa>
 80055c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055ca:	4298      	cmp	r0, r3
 80055cc:	d101      	bne.n	80055d2 <TIM_Base_SetConfig+0xae>
    TIMx->RCR = Structure->RepetitionCounter;
 80055ce:	690b      	ldr	r3, [r1, #16]
 80055d0:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80055d2:	2301      	movs	r3, #1
 80055d4:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055d6:	6903      	ldr	r3, [r0, #16]
 80055d8:	f013 0f01 	tst.w	r3, #1
 80055dc:	d003      	beq.n	80055e6 <TIM_Base_SetConfig+0xc2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055de:	6903      	ldr	r3, [r0, #16]
 80055e0:	f023 0301 	bic.w	r3, r3, #1
 80055e4:	6103      	str	r3, [r0, #16]
}
 80055e6:	4770      	bx	lr
 80055e8:	40012c00 	.word	0x40012c00

080055ec <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80055ec:	b360      	cbz	r0, 8005648 <HAL_TIM_Base_Init+0x5c>
{
 80055ee:	b510      	push	{r4, lr}
 80055f0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80055f2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80055f6:	b313      	cbz	r3, 800563e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80055f8:	2302      	movs	r3, #2
 80055fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055fe:	4621      	mov	r1, r4
 8005600:	f851 0b04 	ldr.w	r0, [r1], #4
 8005604:	f7ff ff8e 	bl	8005524 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005608:	2301      	movs	r3, #1
 800560a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800560e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005612:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005616:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800561a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800561e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005622:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005626:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800562a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800562e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005632:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005636:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800563a:	2000      	movs	r0, #0
}
 800563c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800563e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005642:	f000 fc85 	bl	8005f50 <HAL_TIM_Base_MspInit>
 8005646:	e7d7      	b.n	80055f8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005648:	2001      	movs	r0, #1
}
 800564a:	4770      	bx	lr

0800564c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800564c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800564e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005650:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005654:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005658:	430a      	orrs	r2, r1
 800565a:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800565e:	6082      	str	r2, [r0, #8]
}
 8005660:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005664:	4770      	bx	lr
	...

08005668 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005668:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800566c:	2b01      	cmp	r3, #1
 800566e:	d076      	beq.n	800575e <HAL_TIM_ConfigClockSource+0xf6>
{
 8005670:	b510      	push	{r4, lr}
 8005672:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005674:	2301      	movs	r3, #1
 8005676:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800567a:	2302      	movs	r3, #2
 800567c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005680:	6802      	ldr	r2, [r0, #0]
 8005682:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005684:	4b37      	ldr	r3, [pc, #220]	; (8005764 <HAL_TIM_ConfigClockSource+0xfc>)
 8005686:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8005688:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800568a:	680b      	ldr	r3, [r1, #0]
 800568c:	2b60      	cmp	r3, #96	; 0x60
 800568e:	d04c      	beq.n	800572a <HAL_TIM_ConfigClockSource+0xc2>
 8005690:	d829      	bhi.n	80056e6 <HAL_TIM_ConfigClockSource+0x7e>
 8005692:	2b40      	cmp	r3, #64	; 0x40
 8005694:	d054      	beq.n	8005740 <HAL_TIM_ConfigClockSource+0xd8>
 8005696:	d90c      	bls.n	80056b2 <HAL_TIM_ConfigClockSource+0x4a>
 8005698:	2b50      	cmp	r3, #80	; 0x50
 800569a:	d122      	bne.n	80056e2 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800569c:	68ca      	ldr	r2, [r1, #12]
 800569e:	6849      	ldr	r1, [r1, #4]
 80056a0:	6820      	ldr	r0, [r4, #0]
 80056a2:	f7ff ff0f 	bl	80054c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056a6:	2150      	movs	r1, #80	; 0x50
 80056a8:	6820      	ldr	r0, [r4, #0]
 80056aa:	f7ff ff32 	bl	8005512 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80056ae:	2000      	movs	r0, #0
      break;
 80056b0:	e005      	b.n	80056be <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80056b2:	2b20      	cmp	r3, #32
 80056b4:	d00d      	beq.n	80056d2 <HAL_TIM_ConfigClockSource+0x6a>
 80056b6:	d909      	bls.n	80056cc <HAL_TIM_ConfigClockSource+0x64>
 80056b8:	2b30      	cmp	r3, #48	; 0x30
 80056ba:	d00a      	beq.n	80056d2 <HAL_TIM_ConfigClockSource+0x6a>
      status = HAL_ERROR;
 80056bc:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80056be:	2301      	movs	r3, #1
 80056c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80056c4:	2300      	movs	r3, #0
 80056c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80056ca:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80056cc:	b10b      	cbz	r3, 80056d2 <HAL_TIM_ConfigClockSource+0x6a>
 80056ce:	2b10      	cmp	r3, #16
 80056d0:	d105      	bne.n	80056de <HAL_TIM_ConfigClockSource+0x76>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056d2:	4619      	mov	r1, r3
 80056d4:	6820      	ldr	r0, [r4, #0]
 80056d6:	f7ff ff1c 	bl	8005512 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80056da:	2000      	movs	r0, #0
      break;
 80056dc:	e7ef      	b.n	80056be <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 80056de:	2001      	movs	r0, #1
 80056e0:	e7ed      	b.n	80056be <HAL_TIM_ConfigClockSource+0x56>
 80056e2:	2001      	movs	r0, #1
 80056e4:	e7eb      	b.n	80056be <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80056e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ea:	d034      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0xee>
 80056ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056f0:	d10c      	bne.n	800570c <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance,
 80056f2:	68cb      	ldr	r3, [r1, #12]
 80056f4:	684a      	ldr	r2, [r1, #4]
 80056f6:	6889      	ldr	r1, [r1, #8]
 80056f8:	6820      	ldr	r0, [r4, #0]
 80056fa:	f7ff ffa7 	bl	800564c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056fe:	6822      	ldr	r2, [r4, #0]
 8005700:	6893      	ldr	r3, [r2, #8]
 8005702:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005706:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005708:	2000      	movs	r0, #0
      break;
 800570a:	e7d8      	b.n	80056be <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 800570c:	2b70      	cmp	r3, #112	; 0x70
 800570e:	d124      	bne.n	800575a <HAL_TIM_ConfigClockSource+0xf2>
      TIM_ETR_SetConfig(htim->Instance,
 8005710:	68cb      	ldr	r3, [r1, #12]
 8005712:	684a      	ldr	r2, [r1, #4]
 8005714:	6889      	ldr	r1, [r1, #8]
 8005716:	6820      	ldr	r0, [r4, #0]
 8005718:	f7ff ff98 	bl	800564c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800571c:	6822      	ldr	r2, [r4, #0]
 800571e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005720:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005724:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005726:	2000      	movs	r0, #0
      break;
 8005728:	e7c9      	b.n	80056be <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800572a:	68ca      	ldr	r2, [r1, #12]
 800572c:	6849      	ldr	r1, [r1, #4]
 800572e:	6820      	ldr	r0, [r4, #0]
 8005730:	f7ff fedb 	bl	80054ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005734:	2160      	movs	r1, #96	; 0x60
 8005736:	6820      	ldr	r0, [r4, #0]
 8005738:	f7ff feeb 	bl	8005512 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800573c:	2000      	movs	r0, #0
      break;
 800573e:	e7be      	b.n	80056be <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005740:	68ca      	ldr	r2, [r1, #12]
 8005742:	6849      	ldr	r1, [r1, #4]
 8005744:	6820      	ldr	r0, [r4, #0]
 8005746:	f7ff febd 	bl	80054c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800574a:	2140      	movs	r1, #64	; 0x40
 800574c:	6820      	ldr	r0, [r4, #0]
 800574e:	f7ff fee0 	bl	8005512 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005752:	2000      	movs	r0, #0
      break;
 8005754:	e7b3      	b.n	80056be <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8005756:	2000      	movs	r0, #0
 8005758:	e7b1      	b.n	80056be <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 800575a:	2001      	movs	r0, #1
 800575c:	e7af      	b.n	80056be <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 800575e:	2002      	movs	r0, #2
}
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	fffe0088 	.word	0xfffe0088

08005768 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005768:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800576c:	2b01      	cmp	r3, #1
 800576e:	d03e      	beq.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0x86>
{
 8005770:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8005772:	2301      	movs	r3, #1
 8005774:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005778:	2302      	movs	r3, #2
 800577a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800577e:	6802      	ldr	r2, [r0, #0]
 8005780:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005782:	6894      	ldr	r4, [r2, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005784:	4d1b      	ldr	r5, [pc, #108]	; (80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8005786:	42aa      	cmp	r2, r5
 8005788:	d003      	beq.n	8005792 <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 800578a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800578e:	42aa      	cmp	r2, r5
 8005790:	d103      	bne.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005792:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005796:	684d      	ldr	r5, [r1, #4]
 8005798:	432b      	orrs	r3, r5
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800579a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800579e:	680d      	ldr	r5, [r1, #0]
 80057a0:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057a2:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057a4:	6803      	ldr	r3, [r0, #0]
 80057a6:	4a13      	ldr	r2, [pc, #76]	; (80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d012      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 80057ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b0:	d00f      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 80057b2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00b      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 80057ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057be:	4293      	cmp	r3, r2
 80057c0:	d007      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 80057c2:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d003      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 80057ca:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d104      	bne.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0x74>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057d2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057d6:	688a      	ldr	r2, [r1, #8]
 80057d8:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057da:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057dc:	2301      	movs	r3, #1
 80057de:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057e2:	2300      	movs	r3, #0
 80057e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80057e8:	4618      	mov	r0, r3
}
 80057ea:	bc30      	pop	{r4, r5}
 80057ec:	4770      	bx	lr
  __HAL_LOCK(htim);
 80057ee:	2002      	movs	r0, #2
}
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	40012c00 	.word	0x40012c00

080057f8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057f8:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fa:	e852 3f00 	ldrex	r3, [r2]
 80057fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005802:	e842 3100 	strex	r1, r3, [r2]
 8005806:	2900      	cmp	r1, #0
 8005808:	d1f6      	bne.n	80057f8 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580c:	f102 0308 	add.w	r3, r2, #8
 8005810:	e853 3f00 	ldrex	r3, [r3]
 8005814:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005818:	3208      	adds	r2, #8
 800581a:	e842 3100 	strex	r1, r3, [r2]
 800581e:	2900      	cmp	r1, #0
 8005820:	d1f3      	bne.n	800580a <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005822:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005824:	2b01      	cmp	r3, #1
 8005826:	d006      	beq.n	8005836 <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005828:	2320      	movs	r3, #32
 800582a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800582e:	2300      	movs	r3, #0
 8005830:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005832:	6683      	str	r3, [r0, #104]	; 0x68
}
 8005834:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005836:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005838:	e852 3f00 	ldrex	r3, [r2]
 800583c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005840:	e842 3100 	strex	r1, r3, [r2]
 8005844:	2900      	cmp	r1, #0
 8005846:	d1f6      	bne.n	8005836 <UART_EndRxTransfer+0x3e>
 8005848:	e7ee      	b.n	8005828 <UART_EndRxTransfer+0x30>
	...

0800584c <UART_SetConfig>:
{
 800584c:	b510      	push	{r4, lr}
 800584e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005850:	6883      	ldr	r3, [r0, #8]
 8005852:	6902      	ldr	r2, [r0, #16]
 8005854:	4313      	orrs	r3, r2
 8005856:	6942      	ldr	r2, [r0, #20]
 8005858:	4313      	orrs	r3, r2
 800585a:	69c2      	ldr	r2, [r0, #28]
 800585c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800585e:	6801      	ldr	r1, [r0, #0]
 8005860:	680b      	ldr	r3, [r1, #0]
 8005862:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005866:	f023 030c 	bic.w	r3, r3, #12
 800586a:	4313      	orrs	r3, r2
 800586c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800586e:	6802      	ldr	r2, [r0, #0]
 8005870:	6853      	ldr	r3, [r2, #4]
 8005872:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005876:	68c1      	ldr	r1, [r0, #12]
 8005878:	430b      	orrs	r3, r1
 800587a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800587c:	6982      	ldr	r2, [r0, #24]
  tmpreg |= huart->Init.OneBitSampling;
 800587e:	6a03      	ldr	r3, [r0, #32]
 8005880:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005882:	6801      	ldr	r1, [r0, #0]
 8005884:	688b      	ldr	r3, [r1, #8]
 8005886:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800588a:	4313      	orrs	r3, r2
 800588c:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800588e:	6803      	ldr	r3, [r0, #0]
 8005890:	4a7b      	ldr	r2, [pc, #492]	; (8005a80 <UART_SetConfig+0x234>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d00d      	beq.n	80058b2 <UART_SetConfig+0x66>
 8005896:	4a7b      	ldr	r2, [pc, #492]	; (8005a84 <UART_SetConfig+0x238>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d01c      	beq.n	80058d6 <UART_SetConfig+0x8a>
 800589c:	4a7a      	ldr	r2, [pc, #488]	; (8005a88 <UART_SetConfig+0x23c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d03a      	beq.n	8005918 <UART_SetConfig+0xcc>
 80058a2:	4a7a      	ldr	r2, [pc, #488]	; (8005a8c <UART_SetConfig+0x240>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d04a      	beq.n	800593e <UART_SetConfig+0xf2>
 80058a8:	4a79      	ldr	r2, [pc, #484]	; (8005a90 <UART_SetConfig+0x244>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d05a      	beq.n	8005964 <UART_SetConfig+0x118>
 80058ae:	2310      	movs	r3, #16
 80058b0:	e01f      	b.n	80058f2 <UART_SetConfig+0xa6>
 80058b2:	4b78      	ldr	r3, [pc, #480]	; (8005a94 <UART_SetConfig+0x248>)
 80058b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	d809      	bhi.n	80058d2 <UART_SetConfig+0x86>
 80058be:	e8df f003 	tbb	[pc, r3]
 80058c2:	0402      	.short	0x0402
 80058c4:	6406      	.short	0x6406
 80058c6:	2301      	movs	r3, #1
 80058c8:	e013      	b.n	80058f2 <UART_SetConfig+0xa6>
 80058ca:	2304      	movs	r3, #4
 80058cc:	e011      	b.n	80058f2 <UART_SetConfig+0xa6>
 80058ce:	2308      	movs	r3, #8
 80058d0:	e00f      	b.n	80058f2 <UART_SetConfig+0xa6>
 80058d2:	2310      	movs	r3, #16
 80058d4:	e00d      	b.n	80058f2 <UART_SetConfig+0xa6>
 80058d6:	4b6f      	ldr	r3, [pc, #444]	; (8005a94 <UART_SetConfig+0x248>)
 80058d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058e2:	d054      	beq.n	800598e <UART_SetConfig+0x142>
 80058e4:	d813      	bhi.n	800590e <UART_SetConfig+0xc2>
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d053      	beq.n	8005992 <UART_SetConfig+0x146>
 80058ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058ee:	d152      	bne.n	8005996 <UART_SetConfig+0x14a>
 80058f0:	2304      	movs	r3, #4
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058f2:	69e0      	ldr	r0, [r4, #28]
 80058f4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80058f8:	d069      	beq.n	80059ce <UART_SetConfig+0x182>
    switch (clocksource)
 80058fa:	2b08      	cmp	r3, #8
 80058fc:	f200 80b9 	bhi.w	8005a72 <UART_SetConfig+0x226>
 8005900:	e8df f003 	tbb	[pc, r3]
 8005904:	b790a892 	.word	0xb790a892
 8005908:	b7b7b7ab 	.word	0xb7b7b7ab
 800590c:	ae          	.byte	0xae
 800590d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800590e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005912:	d142      	bne.n	800599a <UART_SetConfig+0x14e>
 8005914:	2302      	movs	r3, #2
 8005916:	e7ec      	b.n	80058f2 <UART_SetConfig+0xa6>
 8005918:	4b5e      	ldr	r3, [pc, #376]	; (8005a94 <UART_SetConfig+0x248>)
 800591a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005920:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005924:	d03b      	beq.n	800599e <UART_SetConfig+0x152>
 8005926:	d805      	bhi.n	8005934 <UART_SetConfig+0xe8>
 8005928:	b3db      	cbz	r3, 80059a2 <UART_SetConfig+0x156>
 800592a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800592e:	d13a      	bne.n	80059a6 <UART_SetConfig+0x15a>
 8005930:	2304      	movs	r3, #4
 8005932:	e7de      	b.n	80058f2 <UART_SetConfig+0xa6>
 8005934:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005938:	d137      	bne.n	80059aa <UART_SetConfig+0x15e>
 800593a:	2302      	movs	r3, #2
 800593c:	e7d9      	b.n	80058f2 <UART_SetConfig+0xa6>
 800593e:	4b55      	ldr	r3, [pc, #340]	; (8005a94 <UART_SetConfig+0x248>)
 8005940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005942:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005946:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800594a:	d030      	beq.n	80059ae <UART_SetConfig+0x162>
 800594c:	d805      	bhi.n	800595a <UART_SetConfig+0x10e>
 800594e:	b383      	cbz	r3, 80059b2 <UART_SetConfig+0x166>
 8005950:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005954:	d12f      	bne.n	80059b6 <UART_SetConfig+0x16a>
 8005956:	2304      	movs	r3, #4
 8005958:	e7cb      	b.n	80058f2 <UART_SetConfig+0xa6>
 800595a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800595e:	d12c      	bne.n	80059ba <UART_SetConfig+0x16e>
 8005960:	2302      	movs	r3, #2
 8005962:	e7c6      	b.n	80058f2 <UART_SetConfig+0xa6>
 8005964:	4b4b      	ldr	r3, [pc, #300]	; (8005a94 <UART_SetConfig+0x248>)
 8005966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005968:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800596c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005970:	d025      	beq.n	80059be <UART_SetConfig+0x172>
 8005972:	d805      	bhi.n	8005980 <UART_SetConfig+0x134>
 8005974:	b32b      	cbz	r3, 80059c2 <UART_SetConfig+0x176>
 8005976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800597a:	d124      	bne.n	80059c6 <UART_SetConfig+0x17a>
 800597c:	2304      	movs	r3, #4
 800597e:	e7b8      	b.n	80058f2 <UART_SetConfig+0xa6>
 8005980:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005984:	d121      	bne.n	80059ca <UART_SetConfig+0x17e>
 8005986:	2302      	movs	r3, #2
 8005988:	e7b3      	b.n	80058f2 <UART_SetConfig+0xa6>
 800598a:	2302      	movs	r3, #2
 800598c:	e7b1      	b.n	80058f2 <UART_SetConfig+0xa6>
 800598e:	2308      	movs	r3, #8
 8005990:	e7af      	b.n	80058f2 <UART_SetConfig+0xa6>
 8005992:	2300      	movs	r3, #0
 8005994:	e7ad      	b.n	80058f2 <UART_SetConfig+0xa6>
 8005996:	2310      	movs	r3, #16
 8005998:	e7ab      	b.n	80058f2 <UART_SetConfig+0xa6>
 800599a:	2310      	movs	r3, #16
 800599c:	e7a9      	b.n	80058f2 <UART_SetConfig+0xa6>
 800599e:	2308      	movs	r3, #8
 80059a0:	e7a7      	b.n	80058f2 <UART_SetConfig+0xa6>
 80059a2:	2300      	movs	r3, #0
 80059a4:	e7a5      	b.n	80058f2 <UART_SetConfig+0xa6>
 80059a6:	2310      	movs	r3, #16
 80059a8:	e7a3      	b.n	80058f2 <UART_SetConfig+0xa6>
 80059aa:	2310      	movs	r3, #16
 80059ac:	e7a1      	b.n	80058f2 <UART_SetConfig+0xa6>
 80059ae:	2308      	movs	r3, #8
 80059b0:	e79f      	b.n	80058f2 <UART_SetConfig+0xa6>
 80059b2:	2300      	movs	r3, #0
 80059b4:	e79d      	b.n	80058f2 <UART_SetConfig+0xa6>
 80059b6:	2310      	movs	r3, #16
 80059b8:	e79b      	b.n	80058f2 <UART_SetConfig+0xa6>
 80059ba:	2310      	movs	r3, #16
 80059bc:	e799      	b.n	80058f2 <UART_SetConfig+0xa6>
 80059be:	2308      	movs	r3, #8
 80059c0:	e797      	b.n	80058f2 <UART_SetConfig+0xa6>
 80059c2:	2300      	movs	r3, #0
 80059c4:	e795      	b.n	80058f2 <UART_SetConfig+0xa6>
 80059c6:	2310      	movs	r3, #16
 80059c8:	e793      	b.n	80058f2 <UART_SetConfig+0xa6>
 80059ca:	2310      	movs	r3, #16
 80059cc:	e791      	b.n	80058f2 <UART_SetConfig+0xa6>
    switch (clocksource)
 80059ce:	2b08      	cmp	r3, #8
 80059d0:	d849      	bhi.n	8005a66 <UART_SetConfig+0x21a>
 80059d2:	e8df f003 	tbb	[pc, r3]
 80059d6:	1f05      	.short	0x1f05
 80059d8:	48224825 	.word	0x48224825
 80059dc:	4848      	.short	0x4848
 80059de:	09          	.byte	0x09
 80059df:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 80059e0:	f7fe fefe 	bl	80047e0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80059e4:	2800      	cmp	r0, #0
 80059e6:	d040      	beq.n	8005a6a <UART_SetConfig+0x21e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059e8:	6862      	ldr	r2, [r4, #4]
 80059ea:	0853      	lsrs	r3, r2, #1
 80059ec:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80059f0:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059f4:	f1a0 0210 	sub.w	r2, r0, #16
 80059f8:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d836      	bhi.n	8005a6e <UART_SetConfig+0x222>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a00:	b283      	uxth	r3, r0
 8005a02:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a06:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8005a0a:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8005a0c:	6823      	ldr	r3, [r4, #0]
 8005a0e:	60d8      	str	r0, [r3, #12]
 8005a10:	2000      	movs	r0, #0
 8005a12:	e01b      	b.n	8005a4c <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a14:	f7fe fefa 	bl	800480c <HAL_RCC_GetPCLK2Freq>
        break;
 8005a18:	e7e4      	b.n	80059e4 <UART_SetConfig+0x198>
        pclk = HAL_RCC_GetSysClockFreq();
 8005a1a:	f7fe fdd7 	bl	80045cc <HAL_RCC_GetSysClockFreq>
        break;
 8005a1e:	e7e1      	b.n	80059e4 <UART_SetConfig+0x198>
        pclk = (uint32_t) HSI_VALUE;
 8005a20:	481d      	ldr	r0, [pc, #116]	; (8005a98 <UART_SetConfig+0x24c>)
 8005a22:	e7e1      	b.n	80059e8 <UART_SetConfig+0x19c>
    switch (clocksource)
 8005a24:	481c      	ldr	r0, [pc, #112]	; (8005a98 <UART_SetConfig+0x24c>)
 8005a26:	e002      	b.n	8005a2e <UART_SetConfig+0x1e2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a28:	f7fe feda 	bl	80047e0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005a2c:	b318      	cbz	r0, 8005a76 <UART_SetConfig+0x22a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a2e:	6863      	ldr	r3, [r4, #4]
 8005a30:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005a34:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a38:	f1a0 0210 	sub.w	r2, r0, #16
 8005a3c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d81a      	bhi.n	8005a7a <UART_SetConfig+0x22e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a44:	6823      	ldr	r3, [r4, #0]
 8005a46:	b280      	uxth	r0, r0
 8005a48:	60d8      	str	r0, [r3, #12]
 8005a4a:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8005a50:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8005a52:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a54:	f7fe feda 	bl	800480c <HAL_RCC_GetPCLK2Freq>
        break;
 8005a58:	e7e8      	b.n	8005a2c <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8005a5a:	f7fe fdb7 	bl	80045cc <HAL_RCC_GetSysClockFreq>
        break;
 8005a5e:	e7e5      	b.n	8005a2c <UART_SetConfig+0x1e0>
        pclk = (uint32_t) LSE_VALUE;
 8005a60:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005a64:	e7e3      	b.n	8005a2e <UART_SetConfig+0x1e2>
    switch (clocksource)
 8005a66:	2001      	movs	r0, #1
 8005a68:	e7f0      	b.n	8005a4c <UART_SetConfig+0x200>
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	e7ee      	b.n	8005a4c <UART_SetConfig+0x200>
        ret = HAL_ERROR;
 8005a6e:	2001      	movs	r0, #1
 8005a70:	e7ec      	b.n	8005a4c <UART_SetConfig+0x200>
    switch (clocksource)
 8005a72:	2001      	movs	r0, #1
 8005a74:	e7ea      	b.n	8005a4c <UART_SetConfig+0x200>
 8005a76:	2000      	movs	r0, #0
 8005a78:	e7e8      	b.n	8005a4c <UART_SetConfig+0x200>
        ret = HAL_ERROR;
 8005a7a:	2001      	movs	r0, #1
 8005a7c:	e7e6      	b.n	8005a4c <UART_SetConfig+0x200>
 8005a7e:	bf00      	nop
 8005a80:	40013800 	.word	0x40013800
 8005a84:	40004400 	.word	0x40004400
 8005a88:	40004800 	.word	0x40004800
 8005a8c:	40004c00 	.word	0x40004c00
 8005a90:	40005000 	.word	0x40005000
 8005a94:	40021000 	.word	0x40021000
 8005a98:	007a1200 	.word	0x007a1200

08005a9c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005a9e:	f013 0f08 	tst.w	r3, #8
 8005aa2:	d006      	beq.n	8005ab2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005aa4:	6802      	ldr	r2, [r0, #0]
 8005aa6:	6853      	ldr	r3, [r2, #4]
 8005aa8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005aac:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005aae:	430b      	orrs	r3, r1
 8005ab0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ab2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005ab4:	f013 0f01 	tst.w	r3, #1
 8005ab8:	d006      	beq.n	8005ac8 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005aba:	6802      	ldr	r2, [r0, #0]
 8005abc:	6853      	ldr	r3, [r2, #4]
 8005abe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ac2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8005ac4:	430b      	orrs	r3, r1
 8005ac6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ac8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005aca:	f013 0f02 	tst.w	r3, #2
 8005ace:	d006      	beq.n	8005ade <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ad0:	6802      	ldr	r2, [r0, #0]
 8005ad2:	6853      	ldr	r3, [r2, #4]
 8005ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ad8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005ada:	430b      	orrs	r3, r1
 8005adc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ade:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005ae0:	f013 0f04 	tst.w	r3, #4
 8005ae4:	d006      	beq.n	8005af4 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ae6:	6802      	ldr	r2, [r0, #0]
 8005ae8:	6853      	ldr	r3, [r2, #4]
 8005aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aee:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005af0:	430b      	orrs	r3, r1
 8005af2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005af4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005af6:	f013 0f10 	tst.w	r3, #16
 8005afa:	d006      	beq.n	8005b0a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005afc:	6802      	ldr	r2, [r0, #0]
 8005afe:	6893      	ldr	r3, [r2, #8]
 8005b00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b04:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005b06:	430b      	orrs	r3, r1
 8005b08:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b0a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005b0c:	f013 0f20 	tst.w	r3, #32
 8005b10:	d006      	beq.n	8005b20 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b12:	6802      	ldr	r2, [r0, #0]
 8005b14:	6893      	ldr	r3, [r2, #8]
 8005b16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b1a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005b1c:	430b      	orrs	r3, r1
 8005b1e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005b22:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005b26:	d00a      	beq.n	8005b3e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b28:	6802      	ldr	r2, [r0, #0]
 8005b2a:	6853      	ldr	r3, [r2, #4]
 8005b2c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005b30:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005b32:	430b      	orrs	r3, r1
 8005b34:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b36:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005b38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b3c:	d00b      	beq.n	8005b56 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b3e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005b40:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005b44:	d006      	beq.n	8005b54 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b46:	6802      	ldr	r2, [r0, #0]
 8005b48:	6853      	ldr	r3, [r2, #4]
 8005b4a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005b4e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005b50:	430b      	orrs	r3, r1
 8005b52:	6053      	str	r3, [r2, #4]
}
 8005b54:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b56:	6802      	ldr	r2, [r0, #0]
 8005b58:	6853      	ldr	r3, [r2, #4]
 8005b5a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005b5e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005b60:	430b      	orrs	r3, r1
 8005b62:	6053      	str	r3, [r2, #4]
 8005b64:	e7eb      	b.n	8005b3e <UART_AdvFeatureConfig+0xa2>

08005b66 <UART_WaitOnFlagUntilTimeout>:
{
 8005b66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b6a:	4605      	mov	r5, r0
 8005b6c:	460e      	mov	r6, r1
 8005b6e:	4617      	mov	r7, r2
 8005b70:	4699      	mov	r9, r3
 8005b72:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b76:	682c      	ldr	r4, [r5, #0]
 8005b78:	69e4      	ldr	r4, [r4, #28]
 8005b7a:	ea36 0304 	bics.w	r3, r6, r4
 8005b7e:	bf0c      	ite	eq
 8005b80:	f04f 0c01 	moveq.w	ip, #1
 8005b84:	f04f 0c00 	movne.w	ip, #0
 8005b88:	45bc      	cmp	ip, r7
 8005b8a:	d136      	bne.n	8005bfa <UART_WaitOnFlagUntilTimeout+0x94>
    if (Timeout != HAL_MAX_DELAY)
 8005b8c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8005b90:	d0f1      	beq.n	8005b76 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b92:	f7fe f887 	bl	8003ca4 <HAL_GetTick>
 8005b96:	eba0 0009 	sub.w	r0, r0, r9
 8005b9a:	4540      	cmp	r0, r8
 8005b9c:	d830      	bhi.n	8005c00 <UART_WaitOnFlagUntilTimeout+0x9a>
 8005b9e:	f1b8 0f00 	cmp.w	r8, #0
 8005ba2:	d02f      	beq.n	8005c04 <UART_WaitOnFlagUntilTimeout+0x9e>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ba4:	682b      	ldr	r3, [r5, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	f012 0f04 	tst.w	r2, #4
 8005bac:	d0e3      	beq.n	8005b76 <UART_WaitOnFlagUntilTimeout+0x10>
 8005bae:	2e80      	cmp	r6, #128	; 0x80
 8005bb0:	d0e1      	beq.n	8005b76 <UART_WaitOnFlagUntilTimeout+0x10>
 8005bb2:	2e40      	cmp	r6, #64	; 0x40
 8005bb4:	d0df      	beq.n	8005b76 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bb6:	69da      	ldr	r2, [r3, #28]
 8005bb8:	f012 0f08 	tst.w	r2, #8
 8005bbc:	d111      	bne.n	8005be2 <UART_WaitOnFlagUntilTimeout+0x7c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bbe:	69da      	ldr	r2, [r3, #28]
 8005bc0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005bc4:	d0d7      	beq.n	8005b76 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bca:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8005bcc:	4628      	mov	r0, r5
 8005bce:	f7ff fe13 	bl	80057f8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bd2:	2320      	movs	r3, #32
 8005bd4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
          return HAL_TIMEOUT;
 8005bde:	2003      	movs	r0, #3
 8005be0:	e00c      	b.n	8005bfc <UART_WaitOnFlagUntilTimeout+0x96>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005be2:	2408      	movs	r4, #8
 8005be4:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 8005be6:	4628      	mov	r0, r5
 8005be8:	f7ff fe06 	bl	80057f8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bec:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
          return HAL_ERROR;
 8005bf6:	2001      	movs	r0, #1
 8005bf8:	e000      	b.n	8005bfc <UART_WaitOnFlagUntilTimeout+0x96>
  return HAL_OK;
 8005bfa:	2000      	movs	r0, #0
}
 8005bfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8005c00:	2003      	movs	r0, #3
 8005c02:	e7fb      	b.n	8005bfc <UART_WaitOnFlagUntilTimeout+0x96>
 8005c04:	2003      	movs	r0, #3
 8005c06:	e7f9      	b.n	8005bfc <UART_WaitOnFlagUntilTimeout+0x96>

08005c08 <HAL_UART_Transmit>:
{
 8005c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c0c:	b082      	sub	sp, #8
 8005c0e:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005c10:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8005c12:	2b20      	cmp	r3, #32
 8005c14:	d156      	bne.n	8005cc4 <HAL_UART_Transmit+0xbc>
 8005c16:	4604      	mov	r4, r0
 8005c18:	460d      	mov	r5, r1
 8005c1a:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8005c1c:	2900      	cmp	r1, #0
 8005c1e:	d055      	beq.n	8005ccc <HAL_UART_Transmit+0xc4>
 8005c20:	b90a      	cbnz	r2, 8005c26 <HAL_UART_Transmit+0x1e>
      return  HAL_ERROR;
 8005c22:	2001      	movs	r0, #1
 8005c24:	e04f      	b.n	8005cc6 <HAL_UART_Transmit+0xbe>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c26:	2300      	movs	r3, #0
 8005c28:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c2c:	2321      	movs	r3, #33	; 0x21
 8005c2e:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8005c30:	f7fe f838 	bl	8003ca4 <HAL_GetTick>
 8005c34:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8005c36:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c3a:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c3e:	68a3      	ldr	r3, [r4, #8]
 8005c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c44:	d002      	beq.n	8005c4c <HAL_UART_Transmit+0x44>
      pdata16bits = NULL;
 8005c46:	f04f 0800 	mov.w	r8, #0
 8005c4a:	e018      	b.n	8005c7e <HAL_UART_Transmit+0x76>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c4c:	6923      	ldr	r3, [r4, #16]
 8005c4e:	b113      	cbz	r3, 8005c56 <HAL_UART_Transmit+0x4e>
      pdata16bits = NULL;
 8005c50:	f04f 0800 	mov.w	r8, #0
 8005c54:	e013      	b.n	8005c7e <HAL_UART_Transmit+0x76>
      pdata16bits = (const uint16_t *) pData;
 8005c56:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8005c58:	2500      	movs	r5, #0
 8005c5a:	e010      	b.n	8005c7e <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 8005c5c:	2320      	movs	r3, #32
 8005c5e:	67e3      	str	r3, [r4, #124]	; 0x7c
        return HAL_TIMEOUT;
 8005c60:	2003      	movs	r0, #3
 8005c62:	e030      	b.n	8005cc6 <HAL_UART_Transmit+0xbe>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c64:	f838 3b02 	ldrh.w	r3, [r8], #2
 8005c68:	6822      	ldr	r2, [r4, #0]
 8005c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c6e:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8005c70:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8005c74:	b292      	uxth	r2, r2
 8005c76:	3a01      	subs	r2, #1
 8005c78:	b292      	uxth	r2, r2
 8005c7a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c7e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	b17b      	cbz	r3, 8005ca6 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c86:	9600      	str	r6, [sp, #0]
 8005c88:	463b      	mov	r3, r7
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	2180      	movs	r1, #128	; 0x80
 8005c8e:	4620      	mov	r0, r4
 8005c90:	f7ff ff69 	bl	8005b66 <UART_WaitOnFlagUntilTimeout>
 8005c94:	2800      	cmp	r0, #0
 8005c96:	d1e1      	bne.n	8005c5c <HAL_UART_Transmit+0x54>
      if (pdata8bits == NULL)
 8005c98:	2d00      	cmp	r5, #0
 8005c9a:	d0e3      	beq.n	8005c64 <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8005ca2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ca4:	e7e4      	b.n	8005c70 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ca6:	9600      	str	r6, [sp, #0]
 8005ca8:	463b      	mov	r3, r7
 8005caa:	2200      	movs	r2, #0
 8005cac:	2140      	movs	r1, #64	; 0x40
 8005cae:	4620      	mov	r0, r4
 8005cb0:	f7ff ff59 	bl	8005b66 <UART_WaitOnFlagUntilTimeout>
 8005cb4:	b910      	cbnz	r0, 8005cbc <HAL_UART_Transmit+0xb4>
    huart->gState = HAL_UART_STATE_READY;
 8005cb6:	2320      	movs	r3, #32
 8005cb8:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8005cba:	e004      	b.n	8005cc6 <HAL_UART_Transmit+0xbe>
      huart->gState = HAL_UART_STATE_READY;
 8005cbc:	2320      	movs	r3, #32
 8005cbe:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8005cc0:	2003      	movs	r0, #3
 8005cc2:	e000      	b.n	8005cc6 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8005cc4:	2002      	movs	r0, #2
}
 8005cc6:	b002      	add	sp, #8
 8005cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8005ccc:	2001      	movs	r0, #1
 8005cce:	e7fa      	b.n	8005cc6 <HAL_UART_Transmit+0xbe>

08005cd0 <UART_CheckIdleState>:
{
 8005cd0:	b530      	push	{r4, r5, lr}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8005cdc:	f7fd ffe2 	bl	8003ca4 <HAL_GetTick>
 8005ce0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ce2:	6822      	ldr	r2, [r4, #0]
 8005ce4:	6812      	ldr	r2, [r2, #0]
 8005ce6:	f012 0f08 	tst.w	r2, #8
 8005cea:	d10f      	bne.n	8005d0c <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cec:	6823      	ldr	r3, [r4, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f013 0f04 	tst.w	r3, #4
 8005cf4:	d126      	bne.n	8005d44 <UART_CheckIdleState+0x74>
  huart->gState = HAL_UART_STATE_READY;
 8005cf6:	2320      	movs	r3, #32
 8005cf8:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005cfa:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfe:	2000      	movs	r0, #0
 8005d00:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d02:	6660      	str	r0, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8005d04:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
}
 8005d08:	b003      	add	sp, #12
 8005d0a:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	4603      	mov	r3, r0
 8005d14:	2200      	movs	r2, #0
 8005d16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f7ff ff23 	bl	8005b66 <UART_WaitOnFlagUntilTimeout>
 8005d20:	2800      	cmp	r0, #0
 8005d22:	d0e3      	beq.n	8005cec <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d24:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d26:	e852 3f00 	ldrex	r3, [r2]
 8005d2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2e:	e842 3100 	strex	r1, r3, [r2]
 8005d32:	2900      	cmp	r1, #0
 8005d34:	d1f6      	bne.n	8005d24 <UART_CheckIdleState+0x54>
      huart->gState = HAL_UART_STATE_READY;
 8005d36:	2320      	movs	r3, #32
 8005d38:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
      return HAL_TIMEOUT;
 8005d40:	2003      	movs	r0, #3
 8005d42:	e7e1      	b.n	8005d08 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	462b      	mov	r3, r5
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d52:	4620      	mov	r0, r4
 8005d54:	f7ff ff07 	bl	8005b66 <UART_WaitOnFlagUntilTimeout>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	d0cc      	beq.n	8005cf6 <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d5c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5e:	e852 3f00 	ldrex	r3, [r2]
 8005d62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	e842 3100 	strex	r1, r3, [r2]
 8005d6a:	2900      	cmp	r1, #0
 8005d6c:	d1f6      	bne.n	8005d5c <UART_CheckIdleState+0x8c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d70:	f102 0308 	add.w	r3, r2, #8
 8005d74:	e853 3f00 	ldrex	r3, [r3]
 8005d78:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7c:	3208      	adds	r2, #8
 8005d7e:	e842 3100 	strex	r1, r3, [r2]
 8005d82:	2900      	cmp	r1, #0
 8005d84:	d1f3      	bne.n	8005d6e <UART_CheckIdleState+0x9e>
      huart->RxState = HAL_UART_STATE_READY;
 8005d86:	2320      	movs	r3, #32
 8005d88:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      __HAL_UNLOCK(huart);
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
      return HAL_TIMEOUT;
 8005d92:	2003      	movs	r0, #3
 8005d94:	e7b8      	b.n	8005d08 <UART_CheckIdleState+0x38>

08005d96 <HAL_UART_Init>:
  if (huart == NULL)
 8005d96:	b368      	cbz	r0, 8005df4 <HAL_UART_Init+0x5e>
{
 8005d98:	b510      	push	{r4, lr}
 8005d9a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005d9c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8005d9e:	b303      	cbz	r3, 8005de2 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8005da0:	2324      	movs	r3, #36	; 0x24
 8005da2:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8005da4:	6822      	ldr	r2, [r4, #0]
 8005da6:	6813      	ldr	r3, [r2, #0]
 8005da8:	f023 0301 	bic.w	r3, r3, #1
 8005dac:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005db0:	b9e3      	cbnz	r3, 8005dec <HAL_UART_Init+0x56>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005db2:	4620      	mov	r0, r4
 8005db4:	f7ff fd4a 	bl	800584c <UART_SetConfig>
 8005db8:	2801      	cmp	r0, #1
 8005dba:	d011      	beq.n	8005de0 <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dbc:	6822      	ldr	r2, [r4, #0]
 8005dbe:	6853      	ldr	r3, [r2, #4]
 8005dc0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005dc4:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dc6:	6822      	ldr	r2, [r4, #0]
 8005dc8:	6893      	ldr	r3, [r2, #8]
 8005dca:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005dce:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005dd0:	6822      	ldr	r2, [r4, #0]
 8005dd2:	6813      	ldr	r3, [r2, #0]
 8005dd4:	f043 0301 	orr.w	r3, r3, #1
 8005dd8:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f7ff ff78 	bl	8005cd0 <UART_CheckIdleState>
}
 8005de0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005de2:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8005de6:	f000 f8e3 	bl	8005fb0 <HAL_UART_MspInit>
 8005dea:	e7d9      	b.n	8005da0 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8005dec:	4620      	mov	r0, r4
 8005dee:	f7ff fe55 	bl	8005a9c <UART_AdvFeatureConfig>
 8005df2:	e7de      	b.n	8005db2 <HAL_UART_Init+0x1c>
    return HAL_ERROR;
 8005df4:	2001      	movs	r0, #1
}
 8005df6:	4770      	bx	lr

08005df8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005df8:	e7fe      	b.n	8005df8 <NMI_Handler>

08005dfa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005dfa:	e7fe      	b.n	8005dfa <HardFault_Handler>

08005dfc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005dfc:	e7fe      	b.n	8005dfc <MemManage_Handler>

08005dfe <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005dfe:	e7fe      	b.n	8005dfe <BusFault_Handler>

08005e00 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e00:	e7fe      	b.n	8005e00 <UsageFault_Handler>

08005e02 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005e02:	4770      	bx	lr

08005e04 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e04:	4770      	bx	lr

08005e06 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005e06:	4770      	bx	lr

08005e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005e08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e0a:	f7fd ff3f 	bl	8003c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005e0e:	bd08      	pop	{r3, pc}

08005e10 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8005e10:	2001      	movs	r0, #1
 8005e12:	4770      	bx	lr

08005e14 <_kill>:

int _kill(int pid, int sig)
{
 8005e14:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005e16:	f7fa fa3d 	bl	8000294 <__errno>
 8005e1a:	2316      	movs	r3, #22
 8005e1c:	6003      	str	r3, [r0, #0]
  return -1;
}
 8005e1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e22:	bd08      	pop	{r3, pc}

08005e24 <_exit>:

void _exit (int status)
{
 8005e24:	b508      	push	{r3, lr}
  _kill(status, -1);
 8005e26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005e2a:	f7ff fff3 	bl	8005e14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005e2e:	e7fe      	b.n	8005e2e <_exit+0xa>

08005e30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005e30:	b570      	push	{r4, r5, r6, lr}
 8005e32:	460c      	mov	r4, r1
 8005e34:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e36:	2500      	movs	r5, #0
 8005e38:	e006      	b.n	8005e48 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8005e3a:	f3af 8000 	nop.w
 8005e3e:	4621      	mov	r1, r4
 8005e40:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e44:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8005e46:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e48:	42b5      	cmp	r5, r6
 8005e4a:	dbf6      	blt.n	8005e3a <_read+0xa>
  }

  return len;
}
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	bd70      	pop	{r4, r5, r6, pc}

08005e50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005e50:	b570      	push	{r4, r5, r6, lr}
 8005e52:	460c      	mov	r4, r1
 8005e54:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e56:	2500      	movs	r5, #0
 8005e58:	e004      	b.n	8005e64 <_write+0x14>
  {
    __io_putchar(*ptr++);
 8005e5a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005e5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e62:	3501      	adds	r5, #1
 8005e64:	42b5      	cmp	r5, r6
 8005e66:	dbf8      	blt.n	8005e5a <_write+0xa>
  }
  return len;
}
 8005e68:	4630      	mov	r0, r6
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}

08005e6c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8005e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e70:	4770      	bx	lr

08005e72 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8005e72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e76:	604b      	str	r3, [r1, #4]
  return 0;
}
 8005e78:	2000      	movs	r0, #0
 8005e7a:	4770      	bx	lr

08005e7c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8005e7c:	2001      	movs	r0, #1
 8005e7e:	4770      	bx	lr

08005e80 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8005e80:	2000      	movs	r0, #0
 8005e82:	4770      	bx	lr

08005e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005e84:	b510      	push	{r4, lr}
 8005e86:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005e88:	4a0c      	ldr	r2, [pc, #48]	; (8005ebc <_sbrk+0x38>)
 8005e8a:	490d      	ldr	r1, [pc, #52]	; (8005ec0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005e8c:	480d      	ldr	r0, [pc, #52]	; (8005ec4 <_sbrk+0x40>)
 8005e8e:	6800      	ldr	r0, [r0, #0]
 8005e90:	b140      	cbz	r0, 8005ea4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005e92:	480c      	ldr	r0, [pc, #48]	; (8005ec4 <_sbrk+0x40>)
 8005e94:	6800      	ldr	r0, [r0, #0]
 8005e96:	4403      	add	r3, r0
 8005e98:	1a52      	subs	r2, r2, r1
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d806      	bhi.n	8005eac <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8005e9e:	4a09      	ldr	r2, [pc, #36]	; (8005ec4 <_sbrk+0x40>)
 8005ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8005ea2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8005ea4:	4807      	ldr	r0, [pc, #28]	; (8005ec4 <_sbrk+0x40>)
 8005ea6:	4c08      	ldr	r4, [pc, #32]	; (8005ec8 <_sbrk+0x44>)
 8005ea8:	6004      	str	r4, [r0, #0]
 8005eaa:	e7f2      	b.n	8005e92 <_sbrk+0xe>
    errno = ENOMEM;
 8005eac:	f7fa f9f2 	bl	8000294 <__errno>
 8005eb0:	230c      	movs	r3, #12
 8005eb2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8005eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005eb8:	e7f3      	b.n	8005ea2 <_sbrk+0x1e>
 8005eba:	bf00      	nop
 8005ebc:	20008000 	.word	0x20008000
 8005ec0:	00000400 	.word	0x00000400
 8005ec4:	20000340 	.word	0x20000340
 8005ec8:	20000418 	.word	0x20000418

08005ecc <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ecc:	4a03      	ldr	r2, [pc, #12]	; (8005edc <SystemInit+0x10>)
 8005ece:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005ed2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ed6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005eda:	4770      	bx	lr
 8005edc:	e000ed00 	.word	0xe000ed00

08005ee0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005ee0:	b500      	push	{lr}
 8005ee2:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	9304      	str	r3, [sp, #16]
 8005ee8:	9305      	str	r3, [sp, #20]
 8005eea:	9306      	str	r3, [sp, #24]
 8005eec:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005eee:	9301      	str	r3, [sp, #4]
 8005ef0:	9302      	str	r3, [sp, #8]
 8005ef2:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005ef4:	4815      	ldr	r0, [pc, #84]	; (8005f4c <MX_TIM2_Init+0x6c>)
 8005ef6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005efa:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 71;
 8005efc:	2247      	movs	r2, #71	; 0x47
 8005efe:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f00:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 8005f02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f06:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f08:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f0a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005f0c:	f7ff fb6e 	bl	80055ec <HAL_TIM_Base_Init>
 8005f10:	b990      	cbnz	r0, 8005f38 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f16:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005f18:	a904      	add	r1, sp, #16
 8005f1a:	480c      	ldr	r0, [pc, #48]	; (8005f4c <MX_TIM2_Init+0x6c>)
 8005f1c:	f7ff fba4 	bl	8005668 <HAL_TIM_ConfigClockSource>
 8005f20:	b968      	cbnz	r0, 8005f3e <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f22:	2300      	movs	r3, #0
 8005f24:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f26:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005f28:	a901      	add	r1, sp, #4
 8005f2a:	4808      	ldr	r0, [pc, #32]	; (8005f4c <MX_TIM2_Init+0x6c>)
 8005f2c:	f7ff fc1c 	bl	8005768 <HAL_TIMEx_MasterConfigSynchronization>
 8005f30:	b940      	cbnz	r0, 8005f44 <MX_TIM2_Init+0x64>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005f32:	b009      	add	sp, #36	; 0x24
 8005f34:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8005f38:	f7fd fc9c 	bl	8003874 <Error_Handler>
 8005f3c:	e7e9      	b.n	8005f12 <MX_TIM2_Init+0x32>
    Error_Handler();
 8005f3e:	f7fd fc99 	bl	8003874 <Error_Handler>
 8005f42:	e7ee      	b.n	8005f22 <MX_TIM2_Init+0x42>
    Error_Handler();
 8005f44:	f7fd fc96 	bl	8003874 <Error_Handler>
}
 8005f48:	e7f3      	b.n	8005f32 <MX_TIM2_Init+0x52>
 8005f4a:	bf00      	nop
 8005f4c:	20000344 	.word	0x20000344

08005f50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8005f50:	6803      	ldr	r3, [r0, #0]
 8005f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f56:	d000      	beq.n	8005f5a <HAL_TIM_Base_MspInit+0xa>
 8005f58:	4770      	bx	lr
{
 8005f5a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005f5c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005f60:	69da      	ldr	r2, [r3, #28]
 8005f62:	f042 0201 	orr.w	r2, r2, #1
 8005f66:	61da      	str	r2, [r3, #28]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	9301      	str	r3, [sp, #4]
 8005f70:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005f72:	b002      	add	sp, #8
 8005f74:	4770      	bx	lr
	...

08005f78 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005f78:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005f7a:	480b      	ldr	r0, [pc, #44]	; (8005fa8 <MX_USART1_UART_Init+0x30>)
 8005f7c:	4b0b      	ldr	r3, [pc, #44]	; (8005fac <MX_USART1_UART_Init+0x34>)
 8005f7e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8005f80:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005f84:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005f86:	2300      	movs	r3, #0
 8005f88:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005f8a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005f8c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005f8e:	220c      	movs	r2, #12
 8005f90:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f92:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f94:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005f96:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005f98:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005f9a:	f7ff fefc 	bl	8005d96 <HAL_UART_Init>
 8005f9e:	b900      	cbnz	r0, 8005fa2 <MX_USART1_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005fa0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005fa2:	f7fd fc67 	bl	8003874 <Error_Handler>
}
 8005fa6:	e7fb      	b.n	8005fa0 <MX_USART1_UART_Init+0x28>
 8005fa8:	20000390 	.word	0x20000390
 8005fac:	40013800 	.word	0x40013800

08005fb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005fb0:	b500      	push	{lr}
 8005fb2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	9303      	str	r3, [sp, #12]
 8005fb8:	9304      	str	r3, [sp, #16]
 8005fba:	9305      	str	r3, [sp, #20]
 8005fbc:	9306      	str	r3, [sp, #24]
 8005fbe:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8005fc0:	6802      	ldr	r2, [r0, #0]
 8005fc2:	4b14      	ldr	r3, [pc, #80]	; (8006014 <HAL_UART_MspInit+0x64>)
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d002      	beq.n	8005fce <HAL_UART_MspInit+0x1e>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005fc8:	b009      	add	sp, #36	; 0x24
 8005fca:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8005fce:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8005fd2:	699a      	ldr	r2, [r3, #24]
 8005fd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fd8:	619a      	str	r2, [r3, #24]
 8005fda:	699a      	ldr	r2, [r3, #24]
 8005fdc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005fe0:	9201      	str	r2, [sp, #4]
 8005fe2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fe4:	695a      	ldr	r2, [r3, #20]
 8005fe6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005fea:	615a      	str	r2, [r3, #20]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff2:	9302      	str	r3, [sp, #8]
 8005ff4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005ff6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005ffa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006000:	2303      	movs	r3, #3
 8006002:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006004:	2307      	movs	r3, #7
 8006006:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006008:	a903      	add	r1, sp, #12
 800600a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800600e:	f7fd fec1 	bl	8003d94 <HAL_GPIO_Init>
}
 8006012:	e7d9      	b.n	8005fc8 <HAL_UART_MspInit+0x18>
 8006014:	40013800 	.word	0x40013800

08006018 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006018:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006050 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800601c:	f7ff ff56 	bl	8005ecc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006020:	480c      	ldr	r0, [pc, #48]	; (8006054 <LoopForever+0x6>)
  ldr r1, =_edata
 8006022:	490d      	ldr	r1, [pc, #52]	; (8006058 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006024:	4a0d      	ldr	r2, [pc, #52]	; (800605c <LoopForever+0xe>)
  movs r3, #0
 8006026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006028:	e002      	b.n	8006030 <LoopCopyDataInit>

0800602a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800602a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800602c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800602e:	3304      	adds	r3, #4

08006030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006034:	d3f9      	bcc.n	800602a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006036:	4a0a      	ldr	r2, [pc, #40]	; (8006060 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006038:	4c0a      	ldr	r4, [pc, #40]	; (8006064 <LoopForever+0x16>)
  movs r3, #0
 800603a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800603c:	e001      	b.n	8006042 <LoopFillZerobss>

0800603e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800603e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006040:	3204      	adds	r2, #4

08006042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006044:	d3fb      	bcc.n	800603e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006046:	f7fa f94d 	bl	80002e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800604a:	f7fd fc57 	bl	80038fc <main>

0800604e <LoopForever>:

LoopForever:
    b LoopForever
 800604e:	e7fe      	b.n	800604e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006050:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8006054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006058:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 800605c:	08006344 	.word	0x08006344
  ldr r2, =_sbss
 8006060:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8006064:	20000418 	.word	0x20000418

08006068 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006068:	e7fe      	b.n	8006068 <ADC1_2_IRQHandler>
	...

0800606c <_init>:
 800606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606e:	bf00      	nop
 8006070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006072:	bc08      	pop	{r3}
 8006074:	469e      	mov	lr, r3
 8006076:	4770      	bx	lr

08006078 <_fini>:
 8006078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607a:	bf00      	nop
 800607c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800607e:	bc08      	pop	{r3}
 8006080:	469e      	mov	lr, r3
 8006082:	4770      	bx	lr
